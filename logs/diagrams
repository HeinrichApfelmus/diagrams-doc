2011-03-25 20:51:55 UTC <byorgey> Testing...
2011-03-25 20:52:16 UTC <fryguybob> Hello!
2011-03-25 20:52:37 UTC <byorgey> well, that was easy
2011-03-25 20:52:43 UTC <fryguybob> Excellent.
2011-03-25 20:53:34 UTC <byorgey> I'm going to create a diagrams-doc repository for stuff like IRC logs, tutorials, website, etc.
2011-03-25 20:59:15 UTC <byorgey> Testing
2011-03-31 18:47:48 UTC <luite> anything happened here while I was away? :p
2011-03-31 18:55:52 UTC <fryguybob> We have logging now :D
2011-03-31 18:56:13 UTC <fryguybob> http://www.patch-tag.com/r/byorgey/diagrams-doc/home
2011-03-31 18:56:57 UTC <byorgey> hi luite!  Nothing much has happened in this channel, but I have been doing lots of hacking =)
2011-03-31 18:58:08 UTC <luite> cool :) I've just been doing lots of skiing ;)
2011-03-31 18:59:14 UTC <byorgey> sounds fun =)
2011-03-31 19:00:16 UTC <byorgey> In the next half-hour or so I'm going to implement a mode for the cairo CmdLine module which watches to see when the source of a diagram has been modified, and automatically recompiles itself
2011-03-31 19:00:19 UTC <luite> hehe it would've been more fun if my boots didn't hurt so much (actually it's my feet that hurt, not my boots). need to get them adjusted, or maybe a new pair, for next season
2011-03-31 19:00:42 UTC <byorgey> so you can just be editing a diagram and have a PDF viewer open and see it update every time you hit save in the editor =)
2011-03-31 19:00:59 UTC <byorgey> yikes, yes, well-fitting boots are essential
2011-03-31 19:01:13 UTC <byorgey> glad to hear the boots were not in pain though.
2011-03-31 19:02:40 UTC <luite> ah sounds good. what kind of diagrams do you want to use that feature for?
2011-03-31 19:04:05 UTC <byorgey> what kind of diagrams would you not want to use that feature for? ;)
2011-03-31 19:05:06 UTC <byorgey> seriously though, when developing one-off diagrams (e.g. to illustrate a blog post or something like that) it just dramatically cuts down the time you spend in the edit-compile-view cycle.
2011-03-31 19:07:06 UTC <byorgey> only problem I guess is that I don't know how to make it portable so it works on Windows too.
2011-03-31 19:07:19 UTC <fryguybob> I can work on that :D
2011-03-31 19:07:26 UTC <byorgey> ok, sounds good =)
2011-03-31 19:07:27 UTC <luite> oh I have a windows machine with cairo, so I can check
2011-03-31 19:07:29 UTC <luite> oh
2011-03-31 19:07:38 UTC <luite> great :)
2011-03-31 19:07:59 UTC <fryguybob> ACTION is a slave to windows for his day job... but not for long.
2011-03-31 19:08:32 UTC <luite> I need windows at home for adobe products
2011-03-31 19:08:57 UTC <luite> and uhm, itunes...
2011-03-31 19:40:15 UTC <byorgey> hmm, this CmdLine module needs to be split out into its own package, it's pulling too many dependencies into diagrams-cairo...
2011-03-31 20:24:42 UTC <byorgey> it works! =D
2011-03-31 20:37:11 UTC <byorgey> oh man, this is so much fun =)
2011-03-31 20:37:51 UTC <byorgey> there's something magical about processes with near-instant feedback
2011-03-31 20:59:53 UTC <fryguybob> :D
2011-03-31 22:01:05 UTC <fryguybob> byorgey: If the only thing from unix you need executeFile that should be easy.
2011-03-31 22:01:37 UTC <fryguybob> Alternatively we could use something like hint.  It seems to work fine for me on Windows.
2011-04-01 00:38:44 UTC <fryguybob> byorgey: There were only a couple of issues.  I could replace executeFile with runProcess and then build without the unix dependency.
2011-04-01 00:39:32 UTC <fryguybob> On Windows you can't overwrite the executing program, so I had to monkey with alternating the file name that it writes to.
2011-04-01 17:25:18 UTC <byorgey> fryguybob: hmm, won't using runProcess instead of executeFile result in having a bunch of processes all running at once, all except the last one waiting for the others to finish?
2011-04-01 17:26:40 UTC <fryguybob> byorgey: I thought that, but looking at the running processes, the previous one does exit.  So I don't think there is any parent/child process relationship with that particular call on windows.
2011-04-01 17:27:38 UTC <byorgey> oh, I see.  Actually, that makes sense -- note how the call to GHC has to use a call to 'waitForProcess', presumably otherwise it would just plow ahead without waiting for GHC to finish
2011-04-01 17:28:08 UTC <byorgey> ok, cool.
2011-04-01 17:28:58 UTC <byorgey> we might want to look into using hint anyway, since that could allow us to do things like externally specify which diagram you want to render, without changing main
2011-04-01 17:29:07 UTC <fryguybob> right
2011-04-01 17:30:28 UTC <byorgey> It would also be simpler since then we could make a standalone application that just watches for changes and then recompiles the diagram, rather than having this funny thing that recompiles and restarts itself
2011-04-01 17:30:54 UTC <fryguybob> Yeah, I was just going to say as it is you can compile yourself into a corner.
2011-04-01 17:31:22 UTC <byorgey> Right.
2011-04-01 17:34:08 UTC <byorgey> so I'm thinking that we (a) keep the basic command-line stuff in the cairo package, and (b) take out the looping stuff and make it into a standalone application using hint
2011-04-01 17:35:14 UTC <byorgey> what do you think?
2011-04-01 17:36:01 UTC <fryguybob> Sounds good.  I'm trying to think of other interesting things we could do with hint.
2011-04-01 17:37:13 UTC <byorgey> all sorts of things I'm sure.
2011-04-01 17:38:17 UTC <byorgey> How about a mode where it takes all the top-level things of type Diagram in a file and renders them in a grid.
2011-04-01 17:38:27 UTC <fryguybob> Yeah.
2011-04-01 17:38:32 UTC <byorgey> and then you could click on any one of them to "focus" and have it only render that one
2011-04-01 17:38:42 UTC <byorgey> if it was a gtk application or something
2011-04-01 17:39:20 UTC <byorgey> that would be a neat way to develop.  Work on the whole thing for a while, then you want to focus on some subpart so you have it just render that until you're happy with it, then go back to looking at the whole diagram...
2011-04-01 17:39:31 UTC <fryguybob> Yeah
2011-04-01 17:39:33 UTC <fryguybob> Another would be parameterized diagrams where it asked for values to functions that return diagrams.
2011-04-01 17:39:53 UTC <byorgey> yeah, with little sliders and input boxes!
2011-04-01 17:40:28 UTC <fryguybob> Kind of like what luite is doing.
2011-04-01 17:40:37 UTC <byorgey> indeed.
2011-04-01 17:40:48 UTC <fryguybob> luite: Are your sliders explicitly specified?
2011-04-01 17:41:13 UTC <fryguybob> ACTION hears a woosh of skis...
2011-04-01 17:41:22 UTC <byorgey> hehe
2011-04-01 17:41:32 UTC <luite> fryguybob: yes, unfortunately I don't know a better way
2011-04-01 17:41:38 UTC <fryguybob> Ah ok.
2011-04-01 17:42:53 UTC <luite> but my execution model is more limited than a local one, I can't use thunks or pass partially applied functions. every request has to be an expression, text based
2011-04-01 17:43:55 UTC <byorgey> fryguybob: is this standalone recompiling/previewing thing something you are interested in working on? (Feel free to say "no".)
2011-04-01 17:44:23 UTC <byorgey> It's not a huge priority but it is fun.
2011-04-01 17:44:44 UTC <fryguybob> Yeah, I don't think I will have time to do anything until mid June though.
2011-04-01 17:44:54 UTC <byorgey> ah, ok.
2011-04-01 17:46:27 UTC <byorgey> well, I may work on it if I get around to it, but the itch is scratched enough for now with the current hacked-up version, and I have a long list of other things to work on first.
2011-04-06 13:35:28 UTC <fryguybob> I made a minimal example of using Diagrams with hint: http://hpaste.org/45365/diagrams_with_hint
2011-04-06 15:15:50 UTC <byorgey> fryguybob: awesome, thanks!
2011-04-06 15:16:38 UTC <fryguybob> byorgey: I wasn't sure if the standalone deriving was going to work but it seemed to work fine.
2011-04-06 15:18:02 UTC <fryguybob> It also wasn't clear to me why I had to import what I did.
2011-04-06 15:18:16 UTC <byorgey> fryguybob: ah, yes, I see.  well, the instances for AnnDiagram and Cairo should be added.  not much we can do about Any. =)
2011-04-06 15:18:59 UTC <byorgey> yeah, I would have thought you would only need to import Diagrams.Prelude and Diagrams.Backend.Cairo.CmdLine
2011-04-06 15:19:46 UTC <fryguybob> Yeah I added deriving Typeable for AnnDiagram and Cairo then noticed Any and tried the standalone and it all worked.
2011-04-06 15:22:21 UTC <byorgey> I don't know if you've seen the stuff I've been playing around with in UDTree.  Freezing complicates everything =(
2011-04-06 15:26:28 UTC <fryguybob> byorgey: I looked at it a little bit this morning.  I'll try and look at it some more soon.
2011-04-06 15:36:34 UTC <byorgey> no rush, just wondering.
2011-04-08 18:12:45 UTC <fryguybob> byorgey: So, on issue 13.  I'm a little confused by diagrams-cairo's cairoStyle renderAttr.
2011-04-08 18:13:31 UTC <byorgey> me too.
2011-04-08 18:13:40 UTC <fryguybob> :D
2011-04-08 18:14:19 UTC <byorgey> don't waste brainpower thinking about #13 until I'm done with #15.
2011-04-08 18:14:19 UTC <fryguybob> cairoTransf t >> f a >> cairoTransf (inv t)  -- seems more correct
2011-04-08 18:14:41 UTC <byorgey> yes, but I think I tried that and it doesn't work.
2011-04-08 18:15:05 UTC <byorgey> I need to look more carefully into how setting attributes in cairo interacts with the current transformation.
2011-04-08 18:15:53 UTC <byorgey> well, *someone* needs to look more carefully into it, it doesn't necessarily have to be me =)
2011-04-08 18:16:40 UTC <fryguybob> Hehe, I'm mostly trying to get up to speed on things and write down some "laws" for how things should behave in the presence of freeze.
2011-04-08 18:17:10 UTC <byorgey> ah, great.
2011-04-08 18:17:25 UTC <fryguybob> Certainly   d # freeze # lc x == d # lc x # freeze :D
2011-04-08 18:17:48 UTC <byorgey> yes, which doesn't hold currently =)
2011-04-08 18:18:21 UTC <byorgey> also  freeze . f . freeze === freeze . f
2011-04-08 18:18:28 UTC <fryguybob> yes
2011-04-08 18:18:32 UTC <byorgey> err, f . freeze
2011-04-08 18:18:58 UTC <byorgey> I shouldn't mix # and .
2011-04-08 18:19:54 UTC <fryguybob> On the canvas backend   canvasTransf t >> f a >> canvasTransf (inv t)    lc x does commute correctly so it does seem like it is some strange interaction with Cairo.  I don't think the canvas output is correct yet though :D.
2011-04-08 18:21:19 UTC <byorgey> hehe =)
2011-04-08 18:28:03 UTC <fryguybob> One thing that is entirely clear to me is what something like  d # freeze # scale 2 # lw 2  means.
2011-04-08 19:03:57 UTC <byorgey> fryguybob: well I'm glad it's entirely clear to you! ;)
2011-04-08 19:04:59 UTC <fryguybob> byorgey: Ooops, I meant to say, *not* entirely clear.
2011-04-08 19:05:10 UTC <byorgey> hehe, I figured =)
2011-04-08 19:05:18 UTC <fryguybob> yeah
2011-04-08 19:06:06 UTC <fryguybob> It almost seems to me that freeze should be a type change.
2011-04-08 19:06:38 UTC <byorgey> hmm.  and then you can't apply transformable attributes to frozen things, or something?
2011-04-08 19:07:14 UTC <fryguybob> Yeah attributes that commute with freeze can be on either side.  But I haven't thought it through all the way.
2011-04-08 19:12:37 UTC <fryguybob> Humm, I think I have something I can test with Cairo that should clear a few things up.
2011-04-08 19:42:40 UTC <byorgey> actually, I think d # freeze # scale 2 # lw 2  makes sense.
2011-04-08 19:43:12 UTC <byorgey> it means that the line width should be uniformly equal to 2 with respect to the diagram's local vector space after applying the scale.
2011-04-08 19:43:29 UTC <byorgey> but since it's frozen any further transformations will affect the line width.
2011-04-08 19:43:56 UTC <byorgey> so e.g.  d # freeze # scale 2 # lw 2 # scale 2 === d # freeze # scale 4 # lw 4
2011-04-08 19:44:13 UTC <byorgey> === d # freeze # lw 1 # scale 4
2011-04-08 19:44:55 UTC <fryguybob> ok so on the other side   d # lw x # scale s # freeze === d # scale s # lw x # freeze
2011-04-08 19:48:23 UTC <byorgey> yes
2011-04-08 19:50:05 UTC <fryguybob> And  lw x # lw y === lw y
2011-04-08 19:50:58 UTC <byorgey> no, lw x
2011-04-08 19:51:03 UTC <fryguybob> ok
2011-04-08 19:51:26 UTC <byorgey> inner things i.e. things lower down in the AST override outer/higher things
2011-04-08 19:51:47 UTC <byorgey> so if you have some d and you apply an attribute to it, it only has an effect if that attribute was not already set
2011-04-08 19:52:13 UTC <byorgey> ok, I've got to go, talk to you later
2011-04-08 19:52:18 UTC <fryguybob> ok
2011-04-08 20:53:29 UTC <fryguybob> byorgey: I forgot to recompile (hint makes you forget about these things) so when I tested   cairoTransf t >> f a >> cairoTransf (inv t)   before I didn't see a change, but now after recompiling it appears to make lc x commute correctly.
2011-04-08 21:10:45 UTC <fryguybob> Ahh cairoTransf t >> f a >> cairoTransf (inv t)   makes lw always act as though it is unfrozen.
2011-04-08 22:20:19 UTC <byorgey> fryguybob: right, that was the problem.
2011-04-08 22:20:59 UTC <luite_> hmm, what does freeze do?
2011-04-08 22:21:08 UTC <luite_> (too busy in #haskell at the moment :p )
2011-04-08 22:22:49 UTC <byorgey> luite_: normally if you set, say, the line width of a diagram, the line width will be relative to the vector space of the *final* rendered diagram
2011-04-08 22:23:29 UTC <byorgey> this is so you can have a bunch of diagrams set to say lw 2 and have them all come out looking like they are drawn with the same size lines, even if you transformed some of them
2011-04-08 22:23:54 UTC <luite_> does it do the same for alpha values and compositing?
2011-04-08 22:23:55 UTC <fryguybob> I updated issue 13, don't know if you saw.
2011-04-08 22:24:02 UTC <byorgey> but once you freeze a diagram, transformations start affecting attributes like the line width as well, so scaling a diagram makes the lines get thicker/thinner, etc.
2011-04-08 22:24:21 UTC <byorgey> luite_: I'm not sure what effect transformations would have on alpha values
2011-04-08 22:24:52 UTC <byorgey> fryguybob: I did see, but I haven't had a chance to look at the patch yet
2011-04-08 22:25:21 UTC <luite_> hmm, ok. because I wondered, when you have two crossing lines, and then change the alpha to 0.5, does that make the whole cross 0.5, or will the point where the two lines cross be darker
2011-04-08 22:25:30 UTC <luite_> and how can you get both behaviours :)
2011-04-08 22:26:32 UTC <fryguybob> luite_: That's a good point.  I'm not sure what would happen in that situation right now.
2011-04-08 22:27:22 UTC <luite_> I'm pretty sure that you can get both with svg with grouping, don't know about cairo though
2011-04-08 22:27:33 UTC <byorgey> you can do grouping with cairo too
2011-04-08 22:27:46 UTC <byorgey> right now the intersection point would be darker
2011-04-08 22:28:14 UTC <byorgey> but we could probably just add a 'group' primitive, which backends would be free to ignore if they don't have a notion of grouping
2011-04-08 22:29:25 UTC <byorgey> I don't think I've actually played around with transparency at all even thought the current colour library + cairo backend can totally handle it =)
2011-04-08 22:29:39 UTC <luite_> groupign would probably be very useful for other things, like stencil groups, where one group determines where another is visible
2011-04-08 22:29:52 UTC <luite_> or compositing groups
2011-04-08 22:30:16 UTC <byorgey> right, good idea.
2011-04-08 22:30:51 UTC <luite_> don't know how good the backend support is for those things. pdf has a lot of transparency things, but postscript doesn't
2011-04-08 22:33:41 UTC <luite_> it would be messy if diagrams had to do all the compositing (especially if the output format is vector based)
2011-04-08 22:34:30 UTC <byorgey> yeah, we definitely don't want to get ourselves into the business of compositing.
2011-04-08 22:35:16 UTC <luite_> I looked at the pdf spec some time ago and apparently there's a lot involved in building a flexible transparency model, fortunately I didn't need to bother with all that :)
2011-04-08 22:41:42 UTC <byorgey> fryguybob: if I'm understanding your patch correctly, wouldn't that break if there was more than one type of transformable attribute?
2011-04-08 22:41:58 UTC <fryguybob> Yes
2011-04-08 22:42:05 UTC <byorgey> =(
2011-04-08 22:42:24 UTC <luite_> . o O ( #haskell is getting too big for beginners to get proper help with monads )
2011-04-08 22:42:43 UTC <fryguybob> But it depends on the kind of transformations that attribute allows.
2011-04-08 22:43:32 UTC <fryguybob> I think we could just as easily transform the line width value itself instead of building the matrix, but then if you do scaleX you won't get a varying line width like you should.
2011-04-08 22:43:46 UTC <byorgey> right.
2011-04-08 22:44:14 UTC <fryguybob> So attributes where that kind of transformation isn't needed would be fine.
2011-04-08 22:45:00 UTC <luite_> hmm, can't you combine the freezing with grouping, so that you don't need a separate freeze after all
2011-04-08 22:45:13 UTC <fryguybob> Like if you had an attribute for arrows at the end of a path.  You don't want those squished anyway..
2011-04-08 22:46:46 UTC <fryguybob> Another way to get the same scaling behavior for lines would be to convert them to filled areas on a freeze.
2011-04-08 22:47:11 UTC <byorgey> but then you can't later set their color.
2011-04-08 22:47:35 UTC <fryguybob> Right
2011-04-08 22:47:38 UTC <fryguybob> I think this is why I was confused about d # freeze # lw x
2011-04-08 22:48:13 UTC <fryguybob> I think what I think of with freeze is getting the semantics of  type image = VectorSpace v => v -> Pixel
2011-04-08 22:48:37 UTC <fryguybob> I've got to run.  Talk to you all later.
2011-04-08 22:48:43 UTC <byorgey> ok, see you
2011-04-09 01:30:26 UTC <byorgey> making some good progress on switching over to a tree representation. I've ripped out the guts, stuck a tree in its place, and now carefully suturing the wound closed ;)
2011-04-09 01:47:48 UTC <fryguybob> :D
2011-04-09 01:52:05 UTC <byorgey> fryguybob: did you read my comments on #13?  Do they make sense?
2011-04-09 01:52:59 UTC <fryguybob> Still reading :D
2011-04-09 01:53:04 UTC <byorgey> ok =)
2011-04-09 02:01:47 UTC <fryguybob> byorgey: Yes that makes sense to me!
2011-04-09 02:05:03 UTC <byorgey> ok, good =)
2011-04-09 11:42:16 UTC <byorgey> refactoring done. looks like it introduced a few bugs.
2011-04-09 11:42:38 UTC <byorgey> haven't had much time to test and track them down, will get to it on Monday.
2011-04-09 12:42:38 UTC <byorgey> hmm, one bug down, but others yet remain =)
2011-04-09 16:42:46 UTC <fryguybob> byorgey: ping
2011-04-09 16:51:26 UTC <fryguybob> I added a fuller example of using hint here: http://hpaste.org/45484/hint_diagrams_20
2011-04-11 00:23:34 UTC <fryguybob> byorgey: I can now successfully load a module and find all the top level expressions that are diagrams.
2011-04-11 18:14:53 UTC <byorgey> fryguybob: diagrams-hint looks promising, thanks!
2011-04-11 18:16:08 UTC <byorgey> also, I just found out that the HCAR submission deadline is May 1, and it would be really nice to have something released by then so we can talk about it
2011-04-11 18:16:21 UTC <fryguybob> Yeah, it's fun.  Shouldn't be too much more work and it will be ready to do the really fun stuff.
2011-04-11 18:16:42 UTC <byorgey> so I'm arbitrarily setting April 30 as the deadline for having a preview release out
2011-04-11 18:16:46 UTC <byorgey> =)
2011-04-11 18:17:08 UTC <fryguybob> Excellent
2011-04-11 18:17:20 UTC <fryguybob> The prestigious 20th edition.
2011-04-11 18:17:36 UTC <byorgey> oh, is it?  I didn't even realize that
2011-04-26 13:40:42 UTC <fryguybob> byorgey: Which would be better `segmentSplitAtParam` or `splitAtParam` or something else?
2011-04-26 14:49:41 UTC <fryguybob> byorgey: The latest isn't building for me because of some of the imports that were removed.
2011-04-26 15:08:22 UTC <fryguybob> I think you just forgot to push some changes from core.
2011-04-26 16:11:33 UTC <byorgey> fryguybob: yes, sorry, I was trying to push them last night before going to bed but my connection died =(
2011-04-26 16:11:38 UTC <byorgey> I'm pushing them now
2011-04-26 16:12:34 UTC <byorgey> last night I actually thought "I hope Ryan does not try to work on diagrams tomorrow morning because it will not build for him"
2011-04-26 17:10:13 UTC <fryguybob> byorgey: Hehe, no problem :D.
2011-04-26 17:24:53 UTC <byorgey> fryguybob: pushed
2011-04-26 17:25:21 UTC <byorgey> fryguybob: when I said "I'm pushing them now" it turns out I meant "after my computer crashes and I eat lunch and I talk for an hour with my officemates" =P
2011-04-26 17:25:37 UTC <fryguybob> of course, that's how all pushes work :D
2011-04-26 17:25:55 UTC <byorgey> sort of like "it's in the mail" =)
2011-04-26 17:26:39 UTC <fryguybob> did you have an opinion on the name?
2011-04-26 17:26:55 UTC <fryguybob> I think I'm leaning splitAtParam
2011-04-26 17:29:50 UTC <byorgey> yes, I like splitAtParam better too
2011-04-26 17:30:01 UTC <byorgey> the type should make it clear it is acting on segments.
2011-04-26 18:35:24 UTC <fryguybob> byorgey: Humm, does: class Arbitrary (Segment Q2) where ...  not make sense?
2011-04-26 18:35:46 UTC <byorgey> fryguybob: should be fine, why?
2011-04-26 18:37:35 UTC <fryguybob> I get the following error: http://hpaste.org/46059/quickcheck
2011-04-26 18:38:30 UTC <byorgey> oh! s/class/instance/  =)
2011-04-26 18:38:46 UTC <byorgey> that's not a very helpful error message
2011-04-26 18:39:22 UTC <fryguybob> ha, oops
2011-04-26 18:48:18 UTC <fryguybob> byorgey: Ok, I pushed.
2011-04-26 18:49:12 UTC <byorgey> cool, thanks!
2011-04-26 18:51:19 UTC <byorgey> haha, "lerp lerp lerp lerp lerp lerp"
2011-04-26 18:51:34 UTC <byorgey> call me juvenile but I find that hilarious =)
2011-04-26 18:51:47 UTC <fryguybob> :D
2011-04-26 18:55:20 UTC <byorgey> fryguybob: I am surprised to learn that there is no closed form for cubic Bezier arc length!
2011-04-26 18:55:56 UTC <byorgey> everything else about Bezier curves seems so neat and tidy
2011-04-26 18:55:57 UTC <fryguybob> Yeah it seams it is a sacrifice that you have to make to get nice subdivision.
2011-04-26 18:56:30 UTC <byorgey> well, I think it's useful in its own right as well
2011-04-26 18:57:13 UTC <byorgey> for example one thing I thought of that might be useful is an operation like "shorten this segment to 80% of its former length"
2011-04-26 18:57:44 UTC <byorgey> e.g. if you want a curved arrow pointing between two things but you want a little space between the arrow endpoints and the things being pointed from/to
2011-04-26 18:58:54 UTC <fryguybob> Yeah, it might be nice to have a more computationally heavy segment that is a Cubic with a length based parameterization.
2011-04-26 19:00:33 UTC <fryguybob> So "80% its former length" would be:  fst (splitAtParam c 0.8)
2011-04-26 19:01:35 UTC <byorgey> hmm, indeed
2011-04-26 19:02:10 UTC <byorgey> well, or maybe we can just provide a different operation, like splitAtParam, but which works by length instead of by t?
2011-04-26 19:02:45 UTC <byorgey> fundamentally I suppose we just need to be able to convert between t-values and arc length values
2011-04-26 19:03:25 UTC <byorgey> t -> arc length is easy given splitAtParam and arcLength
2011-04-26 19:03:31 UTC <luite> is shortening by a percentage really a good way? typically if you wanted to have your image look consistent, you'd want to have all arrowheads the same distance from the thing they point to, regardless of arrow length
2011-04-26 19:04:04 UTC <byorgey> ok, sure, we would also want a way to adjust the length by an absolute amount
2011-04-26 19:04:44 UTC <byorgey> but all these sorts of things can be easily implemented in terms of just a few fundamental pieces
2011-04-26 19:04:46 UTC <luite> tikz uses a shortening parameter for the arrow head I think
2011-04-26 19:06:08 UTC <fryguybob> One case where the map from t -> arc length is important is when placing things at length along a bezier.  Stroking with patterns for instance.
2011-04-26 19:06:26 UTC <luite> yeah or a label anchored at some point
2011-04-26 19:06:36 UTC <fryguybob> Right
2011-04-26 19:06:39 UTC <byorgey> hmm, don't you want arc length -> t for that?
2011-04-26 19:07:08 UTC <fryguybob> byorgey: Oops yes.
2011-04-26 19:07:29 UTC <byorgey> but I agree being able to convert in both directions is important
2011-04-26 19:08:23 UTC <byorgey> I suppose arc length -> t is done by some sort of subdivision as well
2011-04-26 19:09:28 UTC <fryguybob> If the invariant in the test that I pushed holds then we can share %arc length -> t maps across subdivisions.
2011-04-26 19:09:34 UTC <fryguybob> I don't know if that is helpful though.
2011-04-26 19:11:05 UTC <fryguybob> As in, if you know f :: %arc length -> t for  b, then you can compute it based on f for  (l,r) =  splitAtParam b t
2011-04-26 19:11:35 UTC <byorgey> makes sense
2011-04-26 19:15:03 UTC <fryguybob> byorgey: I haven't had time to play around with it, but this package could have some interesting stuff: http://hackage.haskell.org/package/polynomials-bernstein
2011-04-26 19:15:56 UTC <byorgey> woah, crazy
2011-04-26 19:16:29 UTC <byorgey> "Computes the intersection of a given Bezier hypersurface, given by its graph, with plane z=0."
2011-04-26 19:16:33 UTC <byorgey> o.O
2011-04-26 19:17:20 UTC <byorgey> It might be useful, but it's so abstract I can't tell yet =)
2011-04-26 19:17:28 UTC <fryguybob> Yeah :D
2011-04-26 19:17:46 UTC <byorgey> let's see if any other packages depend on it...
2011-04-26 19:18:55 UTC <byorgey> indeed, http://hackage.haskell.org/package/typography-geometry
2011-04-26 19:19:31 UTC <byorgey> ooh
2011-04-26 19:19:33 UTC <byorgey> approximate :: [Curve] -> [(Bernsteinp Int Double, Bernsteinp Int Double)]Source
2011-04-26 19:19:36 UTC <byorgey> Approximates a list of Curves with a list of degree 3 Bernstein curves.
2011-04-26 19:20:14 UTC <fryguybob> fun
2011-04-26 19:21:19 UTC <byorgey> looks like he was implementing a bunch of algorithms for essentially making a Haskell implementation of Metafont
2011-04-26 19:24:06 UTC <byorgey> and he was working on it as recently as four days ago, judging by the timestamps in his darcs repo =)
2011-04-26 19:24:43 UTC <byorgey> perhaps we can convince him to help with the implementation of text for diagrams
2011-04-26 19:25:30 UTC <fryguybob> Indeed.
2011-04-26 19:29:35 UTC <byorgey> sigh, this is boring
2011-04-26 19:29:50 UTC <byorgey> I am kicking myself now for not being better about writing good documentation along the way =P
2011-04-26 19:31:19 UTC <fryguybob> Yeah, I have that problem at work, but the backlog goes back 13 years...
2011-04-26 19:32:04 UTC <byorgey> haha, wow
2011-04-26 21:46:31 UTC <byorgey> whew, finally done adding Haddock documentation
2011-04-26 21:47:05 UTC <byorgey> of course, we will still need a tutorial and a user's manual but those can wait =)
2011-04-26 21:48:59 UTC <fryguybob> ACTION has been considering writing a blog post or two...
2011-04-26 21:49:23 UTC <byorgey> sure, that sounds fun
2011-04-26 21:49:34 UTC <byorgey> but wait until we put something up on Hackage of course
2011-04-26 21:49:43 UTC <fryguybob> yeah
2011-04-26 21:50:02 UTC <byorgey> hmm, so what still needs to be done before we do put something up on Hackage?
2011-04-26 21:51:16 UTC <byorgey> I'm imagining just announcing it as a "preview" release, i.e. enough for curious people to take a look, but not to expect too much
2011-04-26 21:51:26 UTC <byorgey> I want to start attracting more contributors
2011-04-26 21:51:41 UTC <fryguybob> I think as it is it doesn't build on Windows.  I have a patch that makes it build for me but also has stuff trying to do the looped compile thing.
2011-04-26 21:52:38 UTC <fryguybob> Should I cut that patch down to something that conditionally removes that functionality?
2011-04-26 21:52:44 UTC <byorgey> sure
2011-04-26 21:52:51 UTC <byorgey> and how hard is cairo to install on Windows?
2011-04-26 21:52:52 UTC <fryguybob> Ok.
2011-04-26 21:53:01 UTC <byorgey> I seem to recall that being a showstopper for Windows people before
2011-04-26 21:53:29 UTC <byorgey> which is part of the reason this version is more backend-pluggable
2011-04-26 21:53:38 UTC <fryguybob> Well it was quite easy but 7.0.3 requires some patching to the setup files unfortunately.
2011-04-26 21:53:47 UTC <byorgey> ah =(
2011-04-26 21:54:01 UTC <fryguybob> I don't think it has been fixed yet.
2011-04-26 21:54:21 UTC <byorgey> well, again, this is a preview release -- I think it's OK if we say up front "it's probably difficult to get working on Windows, but just wait!"
2011-04-26 21:54:35 UTC <fryguybob> http://hackage.haskell.org/trac/gtk2hs/ticket/1203
2011-04-26 21:54:42 UTC <fryguybob> Yeah that's fine.
2011-04-26 21:55:23 UTC <byorgey> long-term, we'll want to start pushing some other backends that are easier to get going on Windows
2011-04-26 21:55:34 UTC <byorgey> like maybe a native SVG backend or something
2011-04-26 21:55:38 UTC <byorgey> ?
2011-04-26 21:55:59 UTC <fryguybob> Yeah that wouldn't be very hard.
2011-04-26 21:57:21 UTC <byorgey> I'd like to get this path-inside-outside-testing thing working before the preview release
2011-04-26 21:58:06 UTC <fryguybob> One thing that I was wondering is are we going to consider line thickness when calculating bounds?
2011-04-26 21:58:12 UTC <byorgey> other than that I don't think there's anything critical
2011-04-26 21:58:19 UTC <byorgey> no
2011-04-26 21:58:25 UTC <fryguybob> ok that makes it easy :D
2011-04-26 21:58:53 UTC <byorgey> especially because the relative line thickness might change if the diagram isn't frozen and you do a scale
2011-04-26 21:59:34 UTC <byorgey> although having the ability to include the line thickness in the bounds would probably be a good idea.  but in any case it can wait.
2011-04-26 22:00:14 UTC <fryguybob> I suppose there could be some use to a "hardFreeze" that changes to a filled closed path, but that requires a lot of work.
2011-04-26 22:00:28 UTC <byorgey> yeah.
2011-04-26 22:00:32 UTC <fryguybob> But that would naturally include line thickness in the bounds.
2011-04-26 22:00:55 UTC <byorgey> yes, that's probably the right way to do it.  i.e. do the 'stroking' ourselves, manually.
2011-04-26 22:01:12 UTC <byorgey> why is it a lot of work?
2011-04-26 22:01:38 UTC <fryguybob> Well calculating the offset of a bezier is not easy.
2011-04-26 22:01:52 UTC <byorgey> oh, hm, yes, I see!
2011-04-26 22:01:58 UTC <fryguybob> I think there was something for that in the typography package we were looking at though.
2011-04-26 22:02:04 UTC <fryguybob> That made me excited.
2011-04-26 22:02:05 UTC <byorgey> shiny =)
2011-04-26 22:02:59 UTC <fryguybob> ACTION runs off to diner.
2011-04-26 22:03:13 UTC <byorgey> ok, enjoy your dinner. talk to you later.
2011-04-26 22:06:51 UTC <luite> proper font support could be an issue, with cairo or a native svg backend
2011-04-26 22:20:14 UTC <luite> hmm, I don't think there are haskell libraries that can convert a ttf/otf font to svg, but you can get the outlines for glyphs with the freetype2 bindings
2011-04-26 22:37:14 UTC <byorgey> luite: yeah, I was planning to look into getting glyph outlines with freetype2
2011-04-28 00:00:02 UTC <fryguybob> byorgey: I can't get anything conclusive about the accuracy.
2011-04-28 13:53:16 UTC <fryguybob> ACTION loves darcs amend-record.
2011-04-28 13:54:00 UTC <fryguybob> byorgey: I have a patch that avoids the looping stuff for Windows via CPP, do you want to look it over before I push?
2011-04-28 14:45:06 UTC <byorgey> amend-record is nice indeed =)
2011-04-28 14:46:03 UTC <byorgey> fryguybob: not really, go ahead =)
2011-04-28 14:46:15 UTC <fryguybob> ok
2011-04-28 21:29:22 UTC <fryguybob> byorgey: Is there an alignment aware atop combinator?
2011-04-28 21:29:50 UTC <byorgey> fryguybob: what do you mean?
2011-04-28 21:30:18 UTC <byorgey> there is no such thing as alignment, really
2011-04-28 21:30:24 UTC <byorgey> only local origins
2011-04-28 21:30:47 UTC <byorgey> atop matches up the local origins of two diagrams
2011-04-28 21:32:38 UTC <fryguybob> I think I know how to write what I want.
2011-04-28 21:33:08 UTC <fryguybob> The specific problem is given a box, put a smaller box in each corner of that box.
2011-04-28 21:34:39 UTC <fryguybob> byorgey: I want to be able to write that as:  acat [ sheet, aTL corner, aTR corner, aBL corner, aBR corner ]
2011-04-28 21:35:54 UTC <byorgey> hmm
2011-04-28 21:38:02 UTC <byorgey> you could do something like  acat :: D -> [(D, D -> D)];  acat = foldr (\d (other, algn) -> algn other <> algn d),  maybe?
2011-04-28 21:38:53 UTC <byorgey> otherwise you have to write code to look at a diagram and figure out "how it's aligned" by looking at its local origin in relation to its bounding region
2011-04-28 21:39:08 UTC <byorgey> that might be useful but I'm not sure what it would do in general.
2011-04-28 21:40:37 UTC <fryguybob> I'll experiment some and let you know what works for me.
2011-04-28 21:40:44 UTC <fryguybob> Thanks!
2011-04-28 21:41:56 UTC <byorgey> ok
2011-04-28 21:43:42 UTC <byorgey> fryguybob: what's stripProg?  I get a not-in-scope error
2011-04-28 21:44:01 UTC <byorgey> in D.B.Cairo.CmdLine
2011-04-28 21:44:07 UTC <fryguybob> Humm
2011-04-28 21:45:55 UTC <fryguybob> Yeah I missed that line.
2011-04-28 21:46:09 UTC <byorgey> hehe
2011-04-28 21:47:02 UTC <byorgey> well, see if you can push a fix when you get a chance, but no rush, I'm about to head home
2011-04-28 21:47:48 UTC <fryguybob> Ok, I pushed with that line removed.
2011-04-28 21:49:27 UTC <byorgey> thanks, works now =)
2011-04-29 22:56:46 UTC <fryguybob> byorgey: Here's what I ended up with: http://hpaste.org/46174/acat
2011-04-29 23:04:10 UTC <fryguybob> I'm not sure about it, but it seems a little better than what I had before.
2011-05-02 21:18:52 UTC <byorgey> fryguybob: can you explain what the 'phantom b' in your example is for?  I'm not sure I understand what it is doing.
2011-05-05 13:20:49 UTC <fryguybob> byorgey: Nice work on issue 17!
2011-05-05 13:21:45 UTC <fryguybob> I was not thinking clearly before on that and was confusing the issue with general clipping with beziers.
2011-05-05 14:21:44 UTC <byorgey> fryguybob: thanks!
2011-05-05 14:22:33 UTC <byorgey> not sure what you mean by general clipping
2011-05-05 14:23:19 UTC <fryguybob> byorgey: Computing intersection and union of closed paths.
2011-05-05 14:23:24 UTC <byorgey> ah, right
2011-05-05 14:23:37 UTC <byorgey> we will want that too, eventually, but it sounds difficult
2011-05-05 14:24:07 UTC <fryguybob> byorgey: Yeah we gave up at work and used GPC :D.
2011-05-05 14:24:39 UTC <byorgey> hehe
2011-05-05 14:29:50 UTC <byorgey> fryguybob: getting close to a preview release now.
2011-05-05 14:30:01 UTC <fryguybob> Excellent.
2011-05-05 14:30:17 UTC <byorgey> anything else you can think of that we ought to do before releasing?
2011-05-05 14:31:23 UTC <fryguybob> I wish I had more time to do some stuff with hint, but my replacement has been hired at work and so I'm quite busy training.
2011-05-05 14:31:38 UTC <byorgey> right, no worries
2011-05-05 14:32:28 UTC <byorgey> how much longer will you be at your job?
2011-05-05 14:32:44 UTC <fryguybob> Until the end of May.
2011-05-05 14:32:54 UTC <byorgey> just out of curiosity, this is not  version of "when will you start working on stuff with hint" =)
2011-05-05 14:33:00 UTC <byorgey> *not a coded version
2011-05-05 14:33:14 UTC <fryguybob> Right
2011-05-05 14:33:34 UTC <byorgey> any fun plans for the summer before you start school?
2011-05-05 14:33:38 UTC <fryguybob> Then in June I'm at the ACMS conference and after that I'm free.
2011-05-05 14:33:55 UTC <fryguybob> Hacphi!!
2011-05-05 14:34:10 UTC <fryguybob> I'm going to try and study up on some things and do a lot of cycling.
2011-05-05 14:34:12 UTC <byorgey> yay!
2011-05-05 14:34:28 UTC <byorgey> sounds nice =)
2011-05-05 14:34:39 UTC <byorgey> ACMS?
2011-05-05 14:34:50 UTC <fryguybob> http://acmsonline.org/
2011-05-05 14:35:18 UTC <fryguybob> It is mostly math people but that fits nicely with my wife and me.
2011-05-05 14:35:36 UTC <byorgey> oh, neat!
2011-05-05 14:35:48 UTC <fryguybob> I'm excited that Brooks is talking at this one.
2011-05-05 14:36:08 UTC <byorgey> I didn't know you're a Christian, so am I =)
2011-05-05 14:36:54 UTC <fryguybob> :D
2011-05-05 14:37:48 UTC <byorgey> for some reason I don't remember hearing about ACMS before, although I'm sure I did hear about it at InterVarsity's Following Christ conference a few years back
2011-05-05 14:39:07 UTC <fryguybob> Yeah I went to Wheaton for undergrad and the guy that started it was the head of the Math department there.
2011-05-05 14:39:27 UTC <byorgey> I see, cool
2011-05-08 12:57:43 UTC <luite> http://hackage.haskell.org/packages/archive/dia-base/0.1/doc/html/Graphics-Diagrams.html <- hmm, more competition :p
2011-05-08 12:58:14 UTC <luite> http://pnyf.inf.elte.hu/fp/Diagrams_en.xml
2011-05-08 18:04:54 UTC <byorgey> that's very cool!
2011-05-08 18:04:59 UTC <byorgey> it's not competition.
2011-05-08 18:06:01 UTC <byorgey> the scope is obviously MUCH smaller.
2011-05-08 19:10:31 UTC <luite> hehe yes, but it's a cool result
2011-05-08 19:13:57 UTC <luite> by the way, I have a demo of a reworked interface online now: http://jabberwock.xs4all.nl/exp/jquery-console/
2011-05-08 19:14:46 UTC <luite> the interactive graphics are done with wumpus at the moment, until there's a native svg backend for diagrams that supports annotations, such as onclick event handlers :)
2011-05-08 19:15:33 UTC <luite> it only supports expression cells at the moment, but I'm going to add comment cells (with markdown) and definitions
2011-05-08 22:22:39 UTC <luite> I was wondering, is something like "defs" planned or implemented in diagrams, where you can make building blocks that are reused, even in the output image?
2011-05-09 11:17:34 UTC <byorgey> luite: oh, interesting question, I'd have to think about it
2011-05-09 11:17:58 UTC <byorgey> Something like this should definitely be possible but I'm not sure what the best way to go about it would be
2011-05-13 20:19:51 UTC <byorgey> fryguybob: do you have a link to something about getting cairo to build/work on Windows?
2011-05-13 20:20:02 UTC <byorgey> I'd like to mention it in the tutorial
2011-05-13 20:21:05 UTC <fryguybob> Yeah, let me dig up a couple things.
2011-05-13 20:21:21 UTC <byorgey> aiming for a release on Monday!
2011-05-13 20:22:19 UTC <fryguybob> Super!
2011-05-13 20:22:32 UTC <fryguybob> http://www.haskell.org/pipermail/haskell-cafe/2011-May/091656.html  is the latest from someone having trouble.
2011-05-13 20:22:48 UTC <fryguybob> http://hackage.haskell.org/trac/gtk2hs/ticket/1203 is the issue with 7.0.x
2011-05-13 20:23:56 UTC <fryguybob> I think the steps normally followed to get the gtk libraries are on the gtk2hs project page, but that is down (as mentioned in the thread).
2011-05-13 20:27:58 UTC <byorgey> ok, thanks!
2011-05-13 20:28:09 UTC <fryguybob> These steps should work with the exception of the #1203 issue:  http://jystic.com/2010/10/20/installing-gtk2hs-on-windows/
2011-05-13 20:28:40 UTC <fryguybob> But doing  --global is the easiest way around that (if you don't mind the consequences)
2011-05-13 20:29:52 UTC <byorgey> doing --global for what?
2011-05-13 20:32:42 UTC <luite> hmm, where was the darcs repository for diagrams again?
2011-05-13 20:33:13 UTC <byorgey> patch-tag.com/r/byorgey/diagrams-X
2011-05-13 20:33:20 UTC <fryguybob> sorry, looked away.
2011-05-13 20:33:25 UTC <byorgey> where X is an element of {core,lib,cairo,doc}
2011-05-13 20:33:27 UTC <fryguybob> cabal install cairo --global
2011-05-13 20:33:33 UTC <byorgey> oh, ok, I see
2011-05-13 20:33:44 UTC <byorgey> I think I'll just make a page about this on the wiki and link to it from the tutorial
2011-05-13 20:34:02 UTC <fryguybob> Sounds good.  I can fill in details there.
2011-05-13 20:34:35 UTC <byorgey> cool, thanks.
2011-05-13 20:51:39 UTC <luite> hmm, looks like my mysterious cairo linking problems have been solved with the upgrade to 7.0.3
2011-05-13 20:52:15 UTC <luite> at least I can compile the cairo examples now, from the darcs repository :)
2011-05-13 20:55:49 UTC <byorgey> excellent =)
2011-05-13 20:56:56 UTC <luite> is there any support for text in this release?
2011-05-13 20:58:12 UTC <byorgey> fryguybob: http://code.google.com/p/diagrams/wiki/CairoOnWindows
2011-05-13 20:58:17 UTC <byorgey> luite: no, there isn't
2011-05-13 20:58:40 UTC <byorgey> but that's high on the list of things to work on.
2011-05-13 20:58:51 UTC <byorgey> it's quite difficult to do well.
2011-05-13 20:58:53 UTC <luite> hmm, yes, but tricky to get right
2011-05-13 20:58:58 UTC <byorgey> indeed.
2011-05-13 20:59:28 UTC <luite> only local coordinates would be a problem in many applications
2011-05-13 21:00:00 UTC <byorgey> why is that?
2011-05-13 21:01:07 UTC <luite> because you often want consistent font sizes I think, and the positioning of the text could depend on its relative size compared to the geometry
2011-05-13 21:01:48 UTC <byorgey> ah, right, indeed.  I didn't realize you were still specifically talking about text
2011-05-13 21:01:56 UTC <luite> oh ok :)
2011-05-13 21:02:23 UTC <luite> text metrics might even depend on their size, some fonts have glyph sets for different sizes
2011-05-13 21:02:40 UTC <byorgey> yikes, indeed
2011-05-13 21:03:43 UTC <luite> are there existing and usable libraries for proper typesetting in exotic situations, like text along a bezier?
2011-05-13 21:04:28 UTC <byorgey> there is a library fryguybob and I were looking at the other day which looks promising -- it basically looked like someone was trying to reimplement metafont in Haskell =)
2011-05-13 21:04:41 UTC <byorgey> so we might see if he is interested in contributing
2011-05-13 21:10:21 UTC <byorgey> a first-order approximation would be to have text take up no space, and make font size an attribute (hence not affected by transformations unless frozen)
2011-05-13 21:10:44 UTC <byorgey> if you wanted text to take up space you'd have to add an explicit bounding function yourself
2011-05-13 21:11:13 UTC <byorgey> to actually get it to automatically adjust everything according to the final size of the text will require first implementing a module to do constraint-based layout
2011-05-13 21:11:17 UTC <byorgey> which is also on the todo list anyway
2011-05-13 21:11:49 UTC <luite> I imagine that people will want LaTeX like math things once you add text :)
2011-05-13 21:12:00 UTC <byorgey> oh, of course =)
2011-05-13 21:12:18 UTC <byorgey> but that will be the domain of a backend that knows how to interpret LaTeX
2011-05-13 21:12:30 UTC <byorgey> or that can generate latex + pstex
2011-05-13 21:12:42 UTC <luite> or someone who wants to invent a new edsl for math :p
2011-05-13 21:12:46 UTC <byorgey> haha
2011-05-13 21:13:17 UTC <byorgey> well, I'm certainly not stopping them =)
2011-05-13 21:16:05 UTC <luite> where is this metafont lib by the way?
2011-05-13 21:18:37 UTC <byorgey> http://hackage.haskell.org/package/typography-geometry
2011-05-13 21:20:46 UTC <luite> ah still relatively low level
2011-05-13 21:21:54 UTC <byorgey> yes, it seems so
2011-05-13 21:22:30 UTC <byorgey> but combined with the freetype2 bindings that lispy has been putting together I think we will be able to get something working without having to reinvent the wheel
2011-05-13 21:22:32 UTC <luite> whoah 10 let, 4 if/else, 2 case in a single function :)
2011-05-13 21:22:46 UTC <byorgey> haha, wow =)
2011-05-13 21:24:05 UTC <fryguybob> But how many lerps?
2011-05-13 21:24:47 UTC <luite> using freetype is going to take some work, getting the outlines for a glyph is supported, but requires some very low level manipulation
2011-05-13 21:25:00 UTC <byorgey> fryguybob: hahaha
2011-05-13 21:25:17 UTC <byorgey> luite: yeah.
2011-05-13 21:25:53 UTC <luite> reading fonts would require some part of the diagrams things to be in IO :(
2011-05-13 21:26:30 UTC <byorgey> yeah, that is sad indeed =(
2011-05-13 21:27:32 UTC <fryguybob> unsafePerformFont ...
2011-05-13 21:28:15 UTC <luite> initially just supporting svg fonts might be an alternative to freetype, at least it's relatively easy to parse
2011-05-13 21:29:39 UTC <fryguybob> Just bake all the users fonts in at compile time with template haskell =P
2011-05-13 21:29:46 UTC <luite> but I guess it depends on the output type
2011-05-13 21:30:00 UTC <luite> I don't think you can embed svg fonts in pdf
2011-05-13 21:30:03 UTC <luite> not sure though
2011-05-13 21:34:37 UTC <luite> hmm, I should get back to writing javascript if I ever want to finish this thing :)
2011-05-13 21:34:57 UTC <byorgey> =)
2011-05-13 21:35:38 UTC <luite> for some reason the quality of javascript code samples seems to be lower than haskell...
2011-05-14 15:47:13 UTC <fryguybob> byorgey: I like the tutorial.  It inspired me to add a command to diagrams-hint that renders all the top level diagrams in a module.
2011-05-16 17:50:07 UTC <byorgey> fryguybob: glad you like the tutorial.  And rendering all top-level diagrams sounds cool, unfortunately I can't try it out just yet since I only have ghc 6.12 on this computer (and waiting for them to up my disk quota so I can install 7.0.3 as well)
2011-05-16 17:50:29 UTC <byorgey> I'm working on a release announcement.
2011-05-16 17:51:18 UTC <fryguybob> Moar disk!!!
2011-05-16 18:07:13 UTC <byorgey> 8 GB is not enough when you start having things like multiple copies of the GHC development repository =P
2011-05-16 18:22:26 UTC <fryguybob> Yeah diagrams-hint links to 21.2 MB for me.
2011-05-16 20:02:10 UTC <byorgey> compile compile compile...
2011-05-16 20:09:01 UTC <luite> hmm, have you guys talked with tg_ some more? I saw him recommending a paper to byorgey
2011-05-16 20:09:38 UTC <byorgey> luite: he recommended a number theory paper to me, it had nothing to do with diagrams
2011-05-16 20:09:44 UTC <luite> he has all kinds of fantastic physical/mathematical theories, and apparently he needs me to integrate my haskell web interface with gitit to explain them
2011-05-16 20:09:45 UTC <byorgey> was tg_ talking about diagram stuff?
2011-05-16 20:09:53 UTC <byorgey> ah, hehe
2011-05-16 20:10:38 UTC <luite> I had seen the paper before, but I don't know much of the field, would take me a long time to make sense of it :)
2011-05-16 20:12:30 UTC <byorgey> same for me
2011-05-16 20:12:31 UTC <luite> he did talk about diagrams related stuff too though, and mentioned protovis, which has declarative visualization with basic interactivity. that's about waht I'd like to do with diagrams :)
2011-05-16 20:12:51 UTC <byorgey> hmm, I'd never heard of protovis
2011-05-16 20:13:01 UTC <byorgey> ah, looks cool
2011-05-16 20:14:04 UTC <byorgey> they call that "declarative"?
2011-05-16 20:14:16 UTC <luite> yeah I  have to admit that I was a bit disapponted too :p
2011-05-16 20:14:54 UTC <byorgey> I guess the style is mostly declarative, but with function names and syntax that make it sound imperative =P
2011-05-16 20:15:31 UTC <byorgey> anyway, I think a protovis-like library built on top of diagrams would be really cooll
2011-05-16 20:15:32 UTC <luite> but I think it should be perfectly possible to do these things with diagrams
2011-05-16 20:15:35 UTC <byorgey> yeah
2011-05-16 20:15:37 UTC <luite> yes!
2011-05-16 20:15:42 UTC <luite> but you need a native svg generator
2011-05-16 20:15:43 UTC <luite> :)
2011-05-16 20:15:58 UTC <byorgey> yep, shouldn't be too hard =)
2011-05-16 20:16:07 UTC <byorgey> no one's stopping you from writing one ;)
2011-05-16 20:16:37 UTC <luite> yeah I already started, but I didn't get much further than module SVGGenerator ;p
2011-05-16 20:16:54 UTC <byorgey> I see =)
2011-05-16 20:17:13 UTC <byorgey> well, feel free to link to what you've done from http://code.google.com/p/diagrams/wiki/BackendProjects, perhaps others can pick up where you left off
2011-05-16 20:17:16 UTC <luite> problem was that I didn't know how to do things like fonts
2011-05-16 20:17:38 UTC <byorgey> we don't even have text objects yet, why are you worrying about fonts?
2011-05-16 20:17:50 UTC <byorgey> just get it working without text to start
2011-05-16 20:17:52 UTC <luite> and that I wanted to work on my web things first, and hoped that a svg backend would appear magically in the meantime ;p
2011-05-16 20:18:04 UTC <byorgey> hehe, fair enough =)
2011-05-16 20:18:26 UTC <fryguybob> ACTION waits for magic 3d printer backend.
2011-05-16 20:18:45 UTC <byorgey> =O
2011-05-16 20:19:08 UTC <byorgey> ACTION wants a magic 4d printer backend, as long as we are wishing for magical backends
2011-05-16 20:19:21 UTC <luite> fryguybob: does diagrams do 3d already?
2011-05-16 20:20:02 UTC <byorgey> luite: there's no reason in principle why it can't, although we have not yet added any 3d-specific primitives or transformations to the standard library
2011-05-16 20:20:27 UTC <byorgey> but that will just be a matter of taking the time to do it, there's nothing difficult about it
2011-05-16 20:20:47 UTC <byorgey> thanks for reminding me, I should make a ticket for that
2011-05-16 20:24:40 UTC <luite> hehe ok
2011-05-16 20:25:17 UTC <luite> bah I feel a bit guilty doing other stuffs while tg_ is explaining his theories to me :)
2011-05-16 20:26:27 UTC <byorgey> hehe
2011-05-16 20:41:23 UTC <byorgey> here's the release announcement: http://patch-tag.com/r/byorgey/diagrams-doc/snapshot/current/content/pretty/release/announce.markdown
2011-05-16 20:41:29 UTC <byorgey> feedback appreciated before I send it out
2011-05-16 20:41:49 UTC <byorgey> I may not actually quite get to it today but if not it will go out first thing in the morning
2011-05-16 20:42:38 UTC <byorgey> still trying to figure out the best way to distribute/make available the tutorial
2011-05-16 20:44:29 UTC <luite> yay I'm in the contributors list, for a one line patch or something :)
2011-05-16 20:44:52 UTC <byorgey> yes, IIRC you made it compile with GHC 7, a very important contribution =)
2011-05-16 20:49:23 UTC <luite> ah interesting, I hadn't seen the diagrams-canvas backend before
2011-05-16 20:53:07 UTC <byorgey> fryguybob has been working on it in his spare time, I don't actually know what the status is
2011-05-16 20:53:51 UTC <fryguybob> I haven't looked at it in a while.  I think the last time was after switching to GHC 7 I updated it a little, but mostly it was an exercise to understand how things work.
2011-05-16 20:54:29 UTC <luite> svg seems to be a better match for the vector oriented nature of diagrams though
2011-05-16 20:54:31 UTC <fryguybob> I chose not to just do SVG as I wanted to experiment a little with making interactive diagrams via some attributes that turn into javascript of some sort.
2011-05-16 20:54:47 UTC <fryguybob> But I haven't got around to that yet.
2011-05-16 20:54:59 UTC <luite> hmm, you can do that with svg as well, can't you?
2011-05-16 20:55:14 UTC <fryguybob> Yes
2011-05-16 21:03:02 UTC <luite> I really want to do something along those lines. It's how I've made tic-tac-toe of course, but that was done with wumpus
2011-05-16 21:03:13 UTC <luite> using really low level stuff because I didn't understand the rest
2011-05-16 21:16:35 UTC <byorgey> well, I've got to go home & make dinner, looks like the release will have to wait until first thing in the morning
2011-05-16 21:16:42 UTC <byorgey> but I've got everything pretty much ready to go!
2011-05-16 21:28:22 UTC <fryguybob> byorgey: Super!
2011-05-17 00:46:30 UTC <fryguybob> byorgey: Are you around?
2011-05-17 00:50:33 UTC <fryguybob> byorgey: I'll be traveling for the next three weeks or so and won't have much irc access but I'll be around with email.
2011-05-17 14:58:41 UTC <luite> byorgey: have you already released the new diagrams?
2011-05-17 14:59:08 UTC <byorgey> luite: not quite!
2011-05-17 14:59:29 UTC <byorgey> probably in the next half hour or so
2011-05-17 14:59:34 UTC <luite> ok cool :)
2011-05-17 14:59:44 UTC <byorgey> doing a few final tweaks to the documentation, release announcement, etc.
2011-05-17 14:59:52 UTC <luite> ah good
2011-05-17 15:01:07 UTC <luite> I hope to have module support in my web thing soon, so you can just copy the source from a diagrams example
2011-05-17 15:07:42 UTC <byorgey> neat
2011-05-17 15:13:34 UTC <luite> hmm, looks like the server-side support works, the rest is just javascribbling :)
2011-05-17 15:14:21 UTC <luite> and I need to whitelist the imports for Diagrams of course, I hope you didn't sneak some unsafePerformIO in there ;)
2011-05-17 15:36:53 UTC <byorgey> nope =)
2011-05-17 15:37:00 UTC <byorgey> uploaded!
2011-05-17 15:37:07 UTC <byorgey> now to spam the release announcement everywhere
2011-05-17 15:37:09 UTC <luite> sweet :)
2011-05-17 15:39:37 UTC <luite> I'll be javascripting for a few more hours, then I'll install it :)  the code should automatically be uploaded to the server and typechecked as the user types. when it typechecks, the user can evaluate expressions and generate diagrams
2011-05-17 15:44:48 UTC <byorgey> released!
2011-05-17 15:46:22 UTC <luite> I'm anxiously waiting for the hackagebot announce!
2011-05-17 15:46:34 UTC <byorgey> you mised them!
2011-05-17 15:46:36 UTC <byorgey> *missed
2011-05-17 15:46:38 UTC <luite> oh really?
2011-05-17 15:46:39 UTC <luite> :(
2011-05-17 15:46:51 UTC <byorgey> aroudn 11:37-11:38
2011-05-17 15:46:55 UTC <luite> ah I see
2011-05-17 15:47:01 UTC <byorgey> grah, I cnat spel tody
2011-05-17 15:53:54 UTC <byorgey> I just uploaded a new version of the 'diagrams' package saying it is deprecated.  But I wonder whether we ought to make 'diagrams' just a wrapper package that depends on diagrams-core and diagrams-lib or something like that, and move the old version of diagrams to 'diagrams-old' or something like that
2011-05-17 15:57:11 UTC <byorgey> and now we wait =)
2011-05-17 16:02:14 UTC <luite> yes, we should see a huge influx of users in this channel soon
2011-05-17 16:33:10 UTC <alpounet> hey
2011-05-17 16:33:28 UTC <alpounet> this release looks fun!
2011-05-17 16:33:30 UTC <luite> woohoo
2011-05-17 16:33:37 UTC <luite> a new user in the channel
2011-05-17 16:33:46 UTC <luite> the first after the new release
2011-05-17 16:34:27 UTC <alpounet> byorgey's on his way to fame and fortune
2011-05-17 16:34:53 UTC <byorgey> =D
2011-05-17 16:35:14 UTC <byorgey> thanks alpounet, glad it looks fun!
2011-05-17 16:35:43 UTC <byorgey> I'm off to lunch, back later
2011-05-17 16:41:00 UTC <alpounet> gonna try to make some fun graphics if i have some spare time tonight
2011-05-17 16:44:30 UTC <luite> please share the code if you have something, I want more examples :)
2011-05-17 16:44:50 UTC <alpounet> sure
2011-05-17 16:45:03 UTC <alpounet> are you working on the library or "just" using it ?
2011-05-17 16:46:50 UTC <luite> just using it
2011-05-17 16:47:22 UTC <luite> I want to use it for interactive web graphics
2011-05-17 16:47:42 UTC <alpounet> how interactive ?
2011-05-17 16:49:48 UTC <luite> basic "local" functionality (with generated javascript), and callbacks to the server for requesting new image data
2011-05-17 16:51:44 UTC <luite> I have a demo here http://jabberwock.xs4all.nl/exp/wolfgang/
2011-05-17 16:52:04 UTC <luite> but I'm hacking on it, and I don't have a separate production version :)
2011-05-17 16:52:23 UTC <alpounet> okay
2011-05-17 16:52:36 UTC <luite> there are a few demo's with a javascript ui and a non-interactive image, and the tic-tac-toe is a basic demonstration of server callbacks
2011-05-17 16:52:44 UTC <luite> oh it doesn't work in IE, use Chrome for best results
2011-05-17 16:53:19 UTC <alpounet> i'm using chrome
2011-05-17 16:53:53 UTC <luite> I hope it works :)
2011-05-17 16:54:05 UTC <alpounet> it seems to yeah
2011-05-17 16:54:22 UTC <luite> note that the "definitions" cell is just a fake, I'm adding real support soon, it already works on the server side
2011-05-17 16:55:28 UTC <luite> oh the highlight3 cell has interaction as well, but that one is much simpler than the tictactoe cell
2011-05-17 20:15:21 UTC <luite> hmm, almost done :)
2011-05-17 20:42:21 UTC <luite> yay module support done, I can now add diagrams examples
2011-05-17 21:12:29 UTC <ezyang> test
2011-05-17 21:14:07 UTC <alpounet> successful
2011-05-17 21:20:49 UTC <ezyang> Oh blah, the last time I tried to play with diagrams I got stuck installing Cairo.
2011-05-17 21:21:02 UTC <luite> on windows?
2011-05-17 21:21:32 UTC <ezyang> Linux.
2011-05-17 21:21:34 UTC <luite> I'm busy making the diagrams tutorial available in your web browser, should be ready in a few hours
2011-05-17 21:22:04 UTC <ezyang> http://hpaste.org/46767/cairo_error
2011-05-17 21:22:24 UTC <luite> cabal install gtk2hs-buildtools
2011-05-17 21:22:41 UTC <luite> that's a dependency of all gtk2hs things, cannot be installed automatically by cabal-install
2011-05-17 21:23:52 UTC <ezyang> srsly
2011-05-17 21:25:24 UTC <alpounet> yup
2011-05-17 21:25:40 UTC <ezyang> Excellent, installed and ready to go.
2011-05-17 22:43:53 UTC <luite> byorgey: http://jabberwock.xs4all.nl/exp/wolfgang/   check this, I stoled your tutorial and put it on a site
2011-05-18 03:07:26 UTC <byorgey> luite: that is super hot
2011-05-18 03:07:49 UTC <byorgey> luite: there seem to be some problems with your rendering though
2011-05-18 03:08:23 UTC <byorgey> anyway, I'm off to bed
2011-05-18 05:23:20 UTC <luite> it just uses cairo, but for some reason the scale is off or something
2011-05-18 08:56:27 UTC <luite> byorgey: but some of it is caused by the code in the tutorial, for example the circle ||| square example uses those elements without extra attributes, they get rendered with no fill and a stroke width of 0.01 here
2011-05-18 11:16:11 UTC <DrSyzygy> Has anyone had any luck getting diagrams-cairo up and running on MacOSX (without MacPorts of Fink or any of that)?
2011-05-18 11:24:52 UTC <alpounet> what problem do you encounter ?
2011-05-18 11:35:20 UTC <luite> byorgey: hmm, it looks like the rendering problems are caused by diagrams or the cairo svg generator. if you just run the tutorial lhs and -o something.svg, it looks the same
2011-05-18 11:53:48 UTC <luite> byorgey: reload http://jabberwock.xs4all.nl/exp/wolfgang/ , I've worked around the issue by generating png instead of svg, for now
2011-05-18 12:40:57 UTC <byorgey> luite: awesome, looks great now!
2011-05-18 12:41:21 UTC <byorgey> I will have to look into why there are problems with SVG generation
2011-05-18 12:52:13 UTC <luite> if you have updates to the tutorial I'd be happy to add them. I only need to add the extra first paragraph and extra import line to the .lhs and then run a small script to publish it :)
2011-05-18 12:55:34 UTC <luite> unfortunately the markdown parser cannot cope with the ~~~(.haskell) syntax highlighting
2011-05-18 13:22:51 UTC <byorgey> luite: ok, and by the way, the tutorial lives in http://patch-tag.com/r/byorgey/diagrams-doc so you can pull changes from there
2011-05-18 13:23:13 UTC <byorgey> luite: I noticed the thing with the ~~~~ syntax.  That's a pandoc-specific extension I think.
2011-05-18 13:24:04 UTC <byorgey> I was using it to get syntax highlighting on code that I don't want to be actually seen by ghc(i).
2011-05-18 13:24:56 UTC <byorgey> luite: if you have any suggestions on how we can make it work I'm all ears. I think Wolfram|Lambda (haha) is super awesome and I'm really excited to have it as a vehicle for the diagrams tutorial!
2011-05-18 13:25:31 UTC <byorgey> DrSyzygy: what problem(s) are you running into specifically?
2011-05-18 13:39:28 UTC <luite> byorgey: yes that's where I pulled the current version from (yesterday). I already have haskell syntax highlighting and markdown in javascript, but it might be tricky to combine them because they are from completely different libraries
2011-05-18 13:39:42 UTC <luite> but the markdown parser does have some intermediate tree representation of the code
2011-05-18 13:39:47 UTC <luite> so it should be possible
2011-05-18 13:40:11 UTC <byorgey> OK. Let me know if you need any help or want to change the tutorial in some way that would make it easier
2011-05-18 13:40:21 UTC <luite> it's (for me) a minor detail though, there are more important things to do first
2011-05-18 13:40:27 UTC <byorgey> yes, I agree
2011-05-18 13:45:46 UTC <luite> but I'll make a note in my todo list :) it should also not try to replace $....$ math things in the haskell code :)
2011-05-18 13:46:57 UTC <byorgey> hehe, indeed =)
2011-05-18 13:53:08 UTC <DrSyzygy> byorgey: pkg-config cairo-pdf yields a build-error
2011-05-18 13:53:35 UTC <DrSyzygy> Configuring cairo-0.12.0...
2011-05-18 13:53:36 UTC <DrSyzygy> setup: The pkg-config package cairo-pdf is required but it could not be found.
2011-05-18 13:53:36 UTC <DrSyzygy> cabal: Error: some packages failed to install:
2011-05-18 13:53:36 UTC <DrSyzygy> cairo-0.12.0 failed during the configure step. The exception was:
2011-05-18 13:53:36 UTC <DrSyzygy> ExitFailure 1
2011-05-18 13:53:38 UTC <DrSyzygy> diagrams-cairo-0.1 depends on cairo-0.12.0 which failed to install.
2011-05-18 13:53:52 UTC <byorgey> ugh
2011-05-18 13:54:31 UTC <byorgey> no idea
2011-05-18 13:54:35 UTC <byorgey> have you googled it?
2011-05-18 13:56:43 UTC <DrSyzygy> Yeah, and all I see is talk about Cairo on linux. :-(
2011-05-18 13:56:53 UTC <byorgey> =(
2011-05-18 13:57:09 UTC <byorgey> I found a couple places of people posting the same error, but no solutions
2011-05-18 13:57:34 UTC <byorgey> well, I will redouble my efforts to get a non-cairo backend working
2011-05-18 13:57:49 UTC <ezyang> What are the other possible backends?
2011-05-18 13:58:56 UTC <byorgey> there are lots.  Natively generating SVG is one possibility.  Along a similar line it may also work to convert diagrams into wumpus-core data structures which can natively generate SVG.
2011-05-18 13:59:27 UTC <ezyang> ah, ok.
2011-05-18 13:59:38 UTC <luite> DrSyzygy: that means that you haven't installed the development libraries for cairo-pdf
2011-05-18 13:59:44 UTC <byorgey> There's also been some work (although stalled at the moment) on OpenGL and on HTML5 canvas.
2011-05-18 13:59:49 UTC <DrSyzygy> luite: Aight. Any idea where I can get that?
2011-05-18 13:59:51 UTC <luite> DrSyzygy: those are an external dependency
2011-05-18 13:59:59 UTC <luite> DrSyzygy: your package manager usually
2011-05-18 14:00:19 UTC <luite> oh which operating system by the way?
2011-05-18 14:00:22 UTC <DrSyzygy> .... which I don't have one, since I'm on MacOSX and both fink and macports have a habit of disintegrating when I use them.
2011-05-18 14:00:27 UTC <luite> oh right
2011-05-18 14:00:51 UTC <luite> hmm, I don't really use OS X, last time I tried, it felt quite messy, compared to linux
2011-05-18 14:01:26 UTC <DrSyzygy> If you try to do linux on OS X, it _is_ messy. For the things it does well, though, it is incredibly comfortable.
2011-05-18 14:01:35 UTC <DrSyzygy> ACTION tries not to get stuck in OS holy wars. ;-)
2011-05-18 14:02:02 UTC <luite> yeah that's what I meant
2011-05-18 14:02:21 UTC <luite> sorry for that :)
2011-05-18 14:02:59 UTC <DrSyzygy> luite: Don't worry: you're nowhere near holy war standards yet. You haven't even suggested I install ubuntu instead of OS X. ;-)
2011-05-18 14:03:52 UTC <byorgey> "oh, getting diagrams to work on MacOSX is easy. First, install Ubuntu..." ;)
2011-05-18 14:44:07 UTC <byorgey> http://byorgey.wordpress.com/2011/05/18/tic-tac-toe-maps-with-diagrams/  =)
2011-05-18 14:47:50 UTC <luite> byorgey: I added syntax highlighting of the ~~~{.haskell} sections
2011-05-18 14:48:23 UTC <byorgey> luite: sweet! I guess this means you must have also gotten a bunch of other higher-priority things done too ;)
2011-05-18 14:49:16 UTC <luite> hehe yes ;p
2011-05-18 14:49:58 UTC <luite> nah I cheated by matching ~~~{.xxxx} things in the output with a regexp instead of properly patching the markdown code
2011-05-18 14:50:44 UTC <byorgey> eh, works for me =)
2011-05-18 14:50:59 UTC <luite> I don't want to touch the library code too much, because this is probably a nonstandard extension, and I'd have to maintain my own branch, I don't want to do that :)
2011-05-18 14:52:57 UTC <luite> oh I guess the highlighter doesn't work if you have empty lines in your haskell code, since those would end up in different p tags
2011-05-18 14:53:50 UTC <luite> hmm, but that can be fixed
2011-05-18 14:54:18 UTC <byorgey> luite: is it possible to create a Wolfgang|Lambda worksheet and then somehow save it/get a link which allows other people to view it?
2011-05-18 14:54:45 UTC <luite> not yet, but that's of course one of the more important things being planned :p
2011-05-18 14:55:00 UTC <byorgey> ok, sounds good =)
2011-05-18 14:55:30 UTC <luite> I don't know how exactly to do it. the easiest would be something like hpaste, you edit a worksheet, click save, and then you get a permanent url
2011-05-18 14:55:53 UTC <byorgey> yeah
2011-05-18 14:55:54 UTC <luite> but you wouldn't be able to edit existing docs, because you'd get a new url every time
2011-05-18 14:56:25 UTC <byorgey> right, I wasn't necessarily meaning that you should be able to collaboratively edit a doc
2011-05-18 14:56:30 UTC <byorgey> that sounds much more complicated
2011-05-18 14:56:54 UTC <byorgey> just that you could save something and then hand it out to other people as a starting point for their explorations
2011-05-18 14:57:24 UTC <byorgey> it might even be sufficient to give people the option to download/upload worksheets
2011-05-18 14:57:25 UTC <luite> collaborative editing could still be based on this
2011-05-18 14:57:33 UTC <luite> using the unique urls as revisions
2011-05-18 14:57:41 UTC <luite> and some other system to linke them to some canonical name
2011-05-18 14:57:45 UTC <byorgey> that way you don't have to worry about storing them on the server
2011-05-18 14:57:50 UTC <byorgey> yes, you could do that
2011-05-18 15:00:11 UTC <byorgey> luite: hmm, it seems that clicking on hyperlinks does not work?
2011-05-18 15:00:16 UTC <luite> nah I think they should be stored on the server, it's easier for the user. although uploading files should be possible of course
2011-05-18 15:00:40 UTC <byorgey> sure, I'm just trying to brainstorm an easy incremental path
2011-05-18 15:00:44 UTC <luite> I have a rudimentary .lhs preprocessor that just adds definitions sections and text sections
2011-05-18 15:01:07 UTC <luite> and for diagrams, I add an expression cell for each line that starts with   > something =
2011-05-18 15:01:36 UTC <byorgey> ah, I was wondering how you did that =)
2011-05-18 15:01:42 UTC <luite> a proper preprocessor might use haskell-src-exts and ghci to infer types :)
2011-05-18 15:02:24 UTC <byorgey> yes, fryguybob has been working on a diagrams-hint project which already does this sort of type inference to find top-level diagrams
2011-05-18 15:02:55 UTC <luite> yeah I already have hint and stuff, and haskell-src-exts, so it shouldn't be too much work to add
2011-05-18 15:03:07 UTC <byorgey> yup, just take a look at the diagrams-hint repo
2011-05-18 15:05:22 UTC <luite> oh I think I already have most of the code in place, since I haskell-src-exts the code to filter allowed imports and language extensions
2011-05-18 15:05:33 UTC <luite> it's a very minor addition to get a list of top-level exprs
2011-05-18 15:05:44 UTC <luite> and I already run hint for all evaluation
2011-05-18 15:06:13 UTC <luite> but I still need to think about how I'd go about mapping types to output functions
2011-05-18 15:06:29 UTC <luite> I manually added renderWebPNG to all diagrams lines
2011-05-18 15:07:16 UTC <luite> but I think that some kind of Showable class would be better
2011-05-18 15:07:27 UTC <luite> with a default display function for each type
2011-05-18 15:07:58 UTC <luite> and that the user can still use explicit render functions for more options
2011-05-18 15:08:32 UTC <byorgey> sounds reasonable
2011-05-18 15:11:43 UTC <luite> ultimately I'd like to make some showcase with worksheets in categories, some might show how to use some haskell module, but there could be categories for various math topics, including high school level with fun things to play with
2011-05-18 15:12:34 UTC <luite> the haskell definitions sections may be collaped in such pages
2011-05-18 15:15:57 UTC <luite> oh don't know about the hyperlinks by the way, I think it's probably some problem with an event handler that captures the click before it reaches the <a/> element
2011-05-18 15:16:06 UTC <luite> I need to fix that
2011-05-18 15:16:28 UTC <byorgey> luite: your ultimate vision sounds fantastic
2011-05-18 15:17:34 UTC <byorgey> luite: I don't think it is possible to convey over IRC how totally sweet I think W|L is.  I hope someday to buy you a beverage (or several) of your choice.
2011-05-18 15:17:43 UTC <luite> aha
2011-05-18 15:17:45 UTC <luite> haha
2011-05-18 15:18:34 UTC <luite> the name isn't final by the way, I'm open to suggestions
2011-05-18 15:18:52 UTC <byorgey> I think the name is pretty funny =)
2011-05-18 15:19:29 UTC <byorgey> as long as Wolfram doesn't send you a cease-and-desist letter
2011-05-18 15:19:32 UTC <luite> hehe, but it might get me in trouble for trademark infringement, Wolfram has more budget for lawyers than me ;p
2011-05-18 15:19:51 UTC <byorgey> well, if they send you a letter, you change the name, oh well.
2011-05-18 15:20:01 UTC <luite> yean that's true
2011-05-18 15:20:36 UTC <byorgey> I think it's probably protected as satire but it's not worth fighting it in court =)
2011-05-18 15:23:20 UTC <luite> apart from the domain name, I need some permament place to run this site. I already have a dedicated server somewhere, but it's relatively slow and outdated... might need to find something else
2011-05-18 15:23:58 UTC <luite> the backend needs lots of ram, and possible a virtual machine for security
2011-05-18 15:28:38 UTC <luite> but I can probably save ram by reworking how new interpreter processes are created. I'd need a single "big" process with lots of commonly used haskell modules preloaded, and use fork to create new instances
2011-05-18 15:28:54 UTC <luite> linux probably uses copy on write, so the new ones wouldn't necessarily consume a lot of extra memory
2011-05-18 15:30:47 UTC <luite> it already minimizes the number of code reloads as much as possible, it has a pool of available workers, and when a request is made, it tries to pick an interpreter with the correct module (L2340928-somelongnumberhere-234234 typically, for pages with user generated code) already loaded
2011-05-18 15:31:17 UTC <luite> and if none of the available workers in the pool has this module, it just picks the least recently used one
2011-05-18 15:53:43 UTC <byorgey> blarg, hakyll won't install =(
2011-05-18 15:54:09 UTC <byorgey> too many dependencies (hakyll), not enough root access (me)
2011-05-18 15:58:21 UTC <byorgey> hah, got it to work by replacing regex-pcre with regex-pcre-builtin =)
2011-05-18 17:34:16 UTC <luite> ok multi-line haskell works as well, and I reimported the tutorial to remove empty lines at the end of each code section
2011-05-18 17:34:50 UTC <luite> and I had to add some ugly hacks to prevent the highlighter (which actually is a read-only editor) from stealing the focus :p
2011-05-18 17:52:40 UTC <byorgey> cool
2011-05-18 18:15:39 UTC <luite> ok error reporting works properly now
2011-05-18 18:16:04 UTC <luite> if you for example comment out the line import Diagrams.Prelude in the tutorial, you'll get lots of lines with multiple errors
2011-05-18 18:16:15 UTC <luite> neatly organized in one tooltip :)
2011-05-18 18:17:15 UTC <luite> unfortunately line numbers aren't accurate, because of the source parsing+prettyprinting combination, which is lossy
2011-05-18 18:17:40 UTC <luite> they're close, but not completely the same
2011-05-18 20:11:34 UTC <byorgey> luite: I just showed W|L to my officemates, and they thought it was one of the coolest things they have ever seen =)
2011-05-18 20:11:53 UTC <byorgey> but don't worry, I'm not going to post it on slashdot yet ;)
2011-05-18 20:12:01 UTC <luite> great, I think I should prepare for an IPO soon ;)
2011-05-18 20:12:14 UTC <byorgey> hehe
2011-05-18 20:12:24 UTC <luite> perhaps some venture capital fundraising first
2011-05-18 20:19:40 UTC <luite> but it's really cool that people like it. I'll try to add the loading/saving feature with permanent url's soon
2011-05-18 20:20:26 UTC <luite> probably with the persistent package, from yesod, which seems relatively nice to use, while still storing data in a standard way, that can be accessed from other, non-haskell, applications
2011-05-18 20:23:15 UTC <luite> byorgey: I already asked Cale not to reddit it :)
2011-05-18 20:23:54 UTC <luite> until I have a somewhat production version that doesn't break so often
2011-05-18 20:24:04 UTC <byorgey> right.
2011-05-18 20:25:06 UTC <luite> and I'm not quite comfortable with the security yet :)
2011-05-18 20:25:17 UTC <byorgey> hehe, fair =)
2011-05-18 20:25:18 UTC <luite> since it does write haskell files to disk and runs them
2011-05-18 20:25:29 UTC <luite> which is quite a bit more than lambdabot does
2011-05-18 20:25:40 UTC <byorgey> so should I not link to it yet from the diagrams website?
2011-05-18 20:26:12 UTC <luite> not yet I think
2011-05-18 20:26:19 UTC <byorgey> ok.
2011-05-18 20:26:25 UTC <byorgey> I will comment that part out
2011-05-18 20:26:30 UTC <luite> hehe ok
2011-05-18 20:27:04 UTC <luite> it's also just my home server, if I download something it will become really slow
2011-05-18 20:27:33 UTC <byorgey> oh, haha
2011-05-18 20:30:23 UTC <luite> it's the only linux server that I have, that's fast enough. I have a dedicated server with an old pentium 4 and 2GB RAM, but that already runs a lot of other things, not much memory is left for this
2011-05-18 20:30:52 UTC <luite> oh I meant colocated
2011-05-18 20:57:14 UTC <luite> but it's probably no problem to replace it with a better one, if the costs aren't much higher
2011-05-18 21:01:49 UTC <alpounet> ok i'm gonna try to get diagrams working on win7
2011-05-18 21:03:16 UTC <luite> ah finally some on-topic discussion ;)
2011-05-18 21:03:32 UTC <alpounet> how's a web version of the tutorial off-topic ? :p
2011-05-18 21:04:18 UTC <luite> it's not just a web version of the tutorial, it's a complete knowledge engine ;)
2011-05-18 21:05:39 UTC <alpounet> yeah yeah
2011-05-18 21:05:41 UTC <byorgey> new website is now up:  http://projects.haskell.org/diagrams
2011-05-18 21:05:42 UTC <luite> although at the moment its knowledge consists of the diagrams tutorial and a hardcoded demo worksheet
2011-05-18 21:06:00 UTC <byorgey> alpounet: cool, let us know how it goes
2011-05-18 21:06:16 UTC <alpounet> yup
2011-05-18 21:10:21 UTC <alpounet> installing gtk atm
2011-05-18 21:18:11 UTC <alpounet> encountered some errors
2011-05-18 21:18:16 UTC <alpounet> found a solution apparently
2011-05-18 21:33:12 UTC <alpounet> hooray! gtk installed
2011-05-18 21:46:46 UTC <byorgey> =D
2011-05-18 21:51:00 UTC <Tyr42> Hello
2011-05-18 21:51:20 UTC <byorgey> hi Tyr42, welcome
2011-05-18 21:52:02 UTC <luite> ooh 11 users, that means that diagrams is now more popular on irc than yesod
2011-05-18 21:52:08 UTC <byorgey> haha
2011-05-18 21:55:31 UTC <Tyr42> So, I was looking, and I would like to help out
2011-05-18 21:55:47 UTC <byorgey> great!
2011-05-18 21:56:30 UTC <byorgey> anything in particular you're interested in working on?
2011-05-18 21:57:28 UTC <Tyr42> Umm
2011-05-18 21:57:56 UTC <Tyr42> I haven't really looked too deeply yet
2011-05-18 21:58:24 UTC <luite> what do you want to use it for?
2011-05-18 21:59:51 UTC <byorgey> Tyr42: you could look at the tickets listed at http://code.google.com/p/diagrams/issues/list
2011-05-18 22:00:25 UTC <byorgey> Tyr42: but probably the best way to get started is just start creating some diagrams and see what's missing that you want
2011-05-18 22:00:27 UTC <alpounet> ok byorgey how would you go for drawing, for example, the successive iterations of the cantor set construction ?
2011-05-18 22:00:32 UTC <byorgey> then do that =)
2011-05-18 22:00:59 UTC <luite> oh there was a sierpinski example in the older diagrams package
2011-05-18 22:01:07 UTC <luite> if you like your cantor sets triangular ;)
2011-05-18 22:01:19 UTC <byorgey> there's a sierpinski example in diagrams-cairo/examples/Fractal.hs
2011-05-18 22:01:36 UTC <alpounet> oh woot
2011-05-18 22:01:41 UTC <luite> oh sorry, it thought it was in the older one :)
2011-05-18 22:01:50 UTC <byorgey> alpounet: just do the natural recursive construction.  make a function cantor :: Int -> Diagram Cairo R2
2011-05-18 22:01:54 UTC <byorgey> the base case is a rectangle
2011-05-18 22:02:22 UTC <byorgey> and in the recursive case you construct two recursive ones and hcat them together with a strut in between
2011-05-18 22:03:08 UTC <byorgey> you can get fancier than that but that's the basic idea
2011-05-18 22:03:20 UTC <alpounet> yeah ok
2011-05-18 22:04:01 UTC <luite> interestingly the file size of the cantor set goes to infinity as its measure goes to zero
2011-05-18 22:04:10 UTC <byorgey> hehe
2011-05-18 22:05:52 UTC <Tyr42> well, I can't seem to get the repo from the google code page using hg
2011-05-18 22:06:16 UTC <byorgey> Tyr42: the repo isn't actually hosted there, we just use google code for the wiki and issue tracker
2011-05-18 22:06:48 UTC <byorgey> under "How to get involved" it lists how to get the darcs repositories
2011-05-18 22:06:51 UTC <alpounet> it's on patch-tag
2011-05-18 22:06:57 UTC <Tyr42> byorgey:  Ah, that explains why it was empty
2011-05-18 22:08:19 UTC <byorgey> luite: a sierpinski example was in the older one too, sierpinski is just the sort of prototypical example that has to be done by every drawing library =)
2011-05-18 22:09:17 UTC <luite> it's like the teapot of 2d drawing
2011-05-18 22:09:23 UTC <byorgey> exactly =)
2011-05-18 22:10:38 UTC <byorgey> OK, I'm off homewards, probably won't be online again until tomorrow morning
2011-05-18 22:10:45 UTC <byorgey> but I'll see any messages left for me here
2011-05-19 14:14:04 UTC <byorgey> hi fryguybob =)
2011-05-19 14:29:41 UTC <luite> someone linked wolfgang on reddit
2011-05-19 14:30:28 UTC <fryguybob> Howdy.  I read the logs good to have a bunch of people here!
2011-05-19 14:39:40 UTC <byorgey> luite: uh oh =(
2011-05-19 14:40:48 UTC <luite> byorgey: hehe it could be worse, but I wanted to add persistent storage, but now I'd feel guilty taking it offline for that ;p
2011-05-19 14:41:32 UTC <luite> people seem to like it though, already some feature suggestions
2011-05-19 14:44:51 UTC <byorgey> nah, don't feel bad taking it offline
2011-05-19 14:45:24 UTC <byorgey> or maybe wait a day or two until it falls off the haskell reddit front page if you really want
2011-05-19 14:45:35 UTC <byorgey> but I wouldn't worry about it too much.
2011-05-19 14:45:36 UTC <fryguybob> luite: With regard to using hint with diagrams, I'm not doing anything special and just sorting through all the top level declarations and checking each to see if they type check as a diagram.
2011-05-19 14:46:14 UTC <byorgey> fryguybob: diagrams-hint is built with gtk, right?
2011-05-19 14:46:18 UTC <luite> fryguybob: yeah that's what I plan to do as well
2011-05-19 14:46:34 UTC <luite> fryguybob: I already parse all the code with haskell-src-exts
2011-05-19 14:46:42 UTC <fryguybob> byorgey: Yeah, I have some CPP for switching backends though.
2011-05-19 14:47:09 UTC <byorgey> fryguybob: ok, so we should modify the cairo backend to return not just IO () but an (IO (), Cairo ()) pair, so to use cairo you don't have to go via the filesystem
2011-05-19 14:47:26 UTC <byorgey> just render it directly to the gtk window
2011-05-19 14:47:43 UTC <byorgey> will probably make it faster too
2011-05-19 14:47:53 UTC <fryguybob> Yeah
2011-05-19 14:48:07 UTC <byorgey> anyway, just a random thought =)
2011-05-19 14:49:27 UTC <luite> fryguybob: have you seen the interactive web tutorial?
2011-05-19 14:51:05 UTC <fryguybob> luite: Yeah it is a lot of fun!
2011-05-19 18:43:03 UTC <luite> byorgey: I'm going to write a thing in javascript to convert between .lhs and worksheets (lhs with some extra markup), that way, the .lhs files can simply be served through gitit or mediawiki
2011-05-19 18:43:29 UTC <byorgey> luite: yes, that sounds like a great idea
2011-05-19 18:43:42 UTC <luite> free versioning stuff and all :)
2011-05-19 18:43:48 UTC <byorgey> yup =)
2011-05-19 19:12:24 UTC <luite> ugh now it's on ycombinator and dons made another reddit
2011-05-19 19:16:25 UTC <mightybyte> Hehe
2011-05-19 22:29:53 UTC <alpounet> luite, awesome heh
2011-05-20 13:46:58 UTC <luite> http://jabberwock.xs4all.nl/exp/wolfgang/wolfgang-logo1.png what do you think of my first wolfgang logo design try?
2011-05-20 13:48:16 UTC <mightybyte> I like it.
2011-05-20 13:48:42 UTC <mightybyte> Did you use diagrams to create it?  :)
2011-05-20 13:48:45 UTC <luite> it's based on the lambda logo cut in half ;p
2011-05-20 13:48:53 UTC <luite> actually yes
2011-05-20 13:49:17 UTC <luite> the diagrams-drawn haskell logo
2011-05-20 13:52:38 UTC <luite> but I edited it too much in photoshop, so it doesn't really look that good anymore at pixel level
2011-05-20 14:02:45 UTC <luite> suggestions for the page design are welcome too :)
2011-05-20 14:27:47 UTC <byorgey> I like it too
2011-05-20 14:41:30 UTC <luite> lol someone reported a bug in the tic-tac-toe engine
2011-05-20 14:42:40 UTC <mightybyte> Haha
2011-05-20 14:43:43 UTC <luite> actually it isn't a bug, because it still plays perfectly, but it doesn't always play in such a way that it wins in the fewest possible moves
2011-05-20 14:44:20 UTC <mightybyte> Ahhh, yes.  I'm familiar with that problem.
2011-05-20 14:46:01 UTC <mightybyte> I usually solve it with something like this at the end of the minimax/alphabeta function: if score > INF-1000 then score-1 else if score < -INF+1000 then score+1 else score
2011-05-20 14:46:34 UTC <luite> yes this one just uses win/lose/tie as evaluations
2011-05-20 15:06:21 UTC <byorgey> I solved that problem too if you look at the tic-tac-toe solver in the examples directory (or in my blog post)
2011-05-20 15:06:59 UTC <byorgey> Along with "win/lose" it keeps track of the number of moves until the win, and sorts results accordingly
2011-05-20 15:07:07 UTC <sordina> Hey. Is there an easy way to create a color? I tried creating a RGBA datatype that is an instance of ColorAlpha, but diagrams complains that it's not using Color.Internal (or something like that). Is there a 'fromRGBA' or something similar?
2011-05-20 15:07:25 UTC <luite> hehe what's the ELO rating of your tic-tac-toe solver? ;)
2011-05-20 15:07:45 UTC <byorgey> sordina: there should be, just a second
2011-05-20 15:07:57 UTC <byorgey> luite: infinity, I suppose =)
2011-05-20 15:08:56 UTC <luite> byorgey: I do like it that someone pointed this out, it's exactly the kind of things you can explain easily with this kind of interface
2011-05-20 15:09:02 UTC <byorgey> sordina: what's the actual error message you get?
2011-05-20 15:09:34 UTC <byorgey> sordina: oh, wait, you made your own color datatype?
2011-05-20 15:09:45 UTC <sordina> Couldn't match expected type `colour-2.3.1:Data.Colour.Internal.Colour
2011-05-20 15:09:47 UTC <sordina>                                     Double'
2011-05-20 15:09:49 UTC <sordina>                 with actual type `ColorData'
2011-05-20 15:10:37 UTC <sordina> I'm using the fc function.
2011-05-20 15:10:52 UTC <byorgey> if you want to use your own color data type you just have to make it an instance of Color from Diagrams.Attributes
2011-05-20 15:10:57 UTC <byorgey> http://hackage.haskell.org/packages/archive/diagrams-lib/0.1.1/doc/html/Diagrams-Attributes.html#t:Color
2011-05-20 15:11:09 UTC <byorgey> although I'm not sure why you would want to use your own color type
2011-05-20 15:11:40 UTC <byorgey> and then use fillColor instead of fc
2011-05-20 15:11:41 UTC <sordina> byorgey: Ah cool. I don't really want to I was just trying that since I couldn't find a function to construct a color from rgba values.
2011-05-20 15:13:45 UTC <sordina> I'm looking at creating a data-oriented EDSL wrapper similar to how gloss works since I love how gloss diagrams are inspectable. Would that be derivable somehow?
2011-05-20 15:14:08 UTC <byorgey> sordina: try using the sRGB function from Data.Colour.SRGB, followed by a call to withOpacity
2011-05-20 15:14:25 UTC <byorgey> perhaps a function like this should be added to diagrams-lib
2011-05-20 15:15:14 UTC <byorgey> sordina: I'm not actually familiar with gloss
2011-05-20 15:15:22 UTC <ezyang> link?
2011-05-20 15:17:13 UTC <sordina> http://hackage.haskell.org/package/gloss
2011-05-20 15:18:15 UTC <byorgey> ah, right, I remember that now
2011-05-20 15:18:31 UTC <byorgey> sordina: so can you explain a bit more what you are trying to achieve?
2011-05-20 15:18:34 UTC <sordina> fillColor worked by the way :)
2011-05-20 15:18:39 UTC <byorgey> great =)
2011-05-20 15:19:59 UTC <byorgey> oh, I see what you mean, you actually build up a Picture AST which you can inspect
2011-05-20 15:20:16 UTC <sordina> Yes!
2011-05-20 15:20:21 UTC <sordina> It's great
2011-05-20 15:20:40 UTC <sordina> Most intuitive image construction I've come across.
2011-05-20 15:21:35 UTC <sordina> Color red (Translate (10,15) (Scale 2 Circle))
2011-05-20 15:21:39 UTC <sordina> something like that
2011-05-20 15:22:29 UTC <byorgey> well, you can still *construct* things like that using diagrams, of course.  But the way things are currently implemented you can't inspect them.
2011-05-20 15:23:06 UTC <sordina> byorgey: yes, it's almost identical in how things are constructed which is why I'm interested in writing an inspectable wrapper.
2011-05-20 15:23:24 UTC <byorgey> But you could certainly make a little AST language which you can "compile" into diagrams
2011-05-20 15:23:28 UTC <byorgey> that would be very easy.
2011-05-20 15:23:30 UTC <byorgey> and cool.
2011-05-20 15:23:32 UTC <sordina> with a runImage function to convert to Diagrams.
2011-05-20 15:23:36 UTC <byorgey> right.
2011-05-20 15:23:55 UTC <sordina> It would enable serialization and such things trivially too.
2011-05-20 15:24:06 UTC <byorgey> yup.
2011-05-20 15:24:34 UTC <sordina> I was just wondering if such a wrapper could be derived somehow, or if it would just be a by-hand affair.
2011-05-20 15:25:09 UTC <byorgey> Yeah, I don't think there would be any way to derive it.
2011-05-20 15:25:59 UTC <byorgey> I'll have to think more about whether there's a fundamental reason diagrams is not internally implemented in terms of an AST.
2011-05-20 15:26:20 UTC <byorgey> Intuitively it seems it would make things less flexible/extensible but I am not sure.
2011-05-20 15:26:21 UTC <sordina> Ah okay. Well it shouldn't be a huge task to create one anyway. I'll give it a go :)
2011-05-20 15:26:26 UTC <byorgey> great!
2011-05-20 15:26:51 UTC <ezyang> Does diagrams have any internal rep, or is it tagless?
2011-05-20 15:27:42 UTC <byorgey> you might even be able to just reuse parts of gloss
2011-05-20 15:28:07 UTC <byorgey> ezyang: I'm not sure I understand your question.
2011-05-20 15:28:28 UTC <sordina> Probably, although I think Diagrams is much more feature rich for static images.
2011-05-20 15:30:54 UTC <sordina> The AST datatypes have no tricks involved at all as far as I can tell, so I'm not sure there would be much to gain by using the existing gloss definitions.
2011-05-20 15:32:13 UTC <byorgey> yes, I guess you're right.
2011-05-20 15:33:31 UTC <sordina> Anyway, I'm got to drive home now. Thanks for the awesome package guys. I'd been waiting for something like diagrams to come along for a while now :)
2011-05-20 15:33:53 UTC <byorgey> sordina: thanks, glad you like it =)
2011-05-20 15:34:41 UTC <byorgey> I'm off as well, to walk to school
2011-05-20 15:34:58 UTC <byorgey> ezyang: if you explain your question a bit more I will try to answer when I get to school
2011-05-20 15:35:31 UTC <ezyang> Ah, it's not particularly important.
2011-05-21 10:37:44 UTC <luite> byorgey: does the diagrams lambda logo example render properly for you, when you use svg output?
2011-05-21 10:38:16 UTC <luite> it did work here with an older version of diagrams, but not with the latest
2011-05-21 10:38:25 UTC <luite> png is ok
2011-05-21 10:40:05 UTC <luite> it might be some problem with my cairo lib (I use the standard cairo lib from ubuntu 10.04)
2011-05-21 22:19:49 UTC <byorgey> luite: generating SVG from hslogo works fine for me
2011-05-21 23:27:40 UTC <alpounet> hey byorgey
2011-05-21 23:27:44 UTC <alpounet> are you around ?
2011-05-22 00:00:26 UTC <luite> byorgey: hmm, interesting...
2011-05-22 01:19:08 UTC <luite> byorgey: made a start with integrating the wiki, it now loads this page from the wiki: http://jabberwock.xs4all.nl/wiki/Diagrams%20Tutorial
2011-05-22 01:19:43 UTC <luite> you can edit it if you register, but only if you edit the raw data directly
2011-05-22 01:20:08 UTC <luite> oh and most of the user interface doesn't work :)
2011-05-22 11:11:13 UTC <luite> also added the demo: http://jabberwock.xs4all.nl/wiki/Demo
2011-05-22 13:52:38 UTC <luite> byorgey: there's a few things I want to add, apart from getting the user interface working properly. pages in /Paste (or /Scratch or something like that) should be free to add without logging in (this should be what the "save" button defaults to if not logged in), other pages are editable with login
2011-05-22 13:53:16 UTC <luite> but authors can set their own page to read-only and specify a list of users that can edit them
2011-05-22 13:54:12 UTC <luite> and the lhs code for for example /wiki/Demo should be available as the module Wolfgang.Demo, so other pages can import it and use the code
2011-05-22 13:58:07 UTC <luite> other ideas or suggestions are welcome :)
2011-05-22 13:59:14 UTC <ezyang> Hmm... with Repa, I don't seem to be able to actually draw individual pixels. Is this intentional?
2011-05-22 13:59:55 UTC <ezyang> Ah! mix :-(
2011-05-22 14:08:45 UTC <luite> does repa have a safe mode where all operations are bounds checked?
2011-05-22 16:12:05 UTC <byorgey> luite: very cool!  I don't have any other suggestions at the moment...
2011-05-22 16:23:23 UTC <luite> byorgey: ok, I'm going to do the easy bits first (exporting modules when they are saved can be done with a PreCommit plugin for gitit), the more difficult parts will come later (authentication and file ownership and permissions will probably require some gitit patching)
2011-05-22 16:24:59 UTC <byorgey> sure, sounds good
2011-05-22 16:25:23 UTC <byorgey> and I will get back to actually hacking on the actual diagrams library =)
2011-05-22 16:27:07 UTC <luite> hehe there have been some users asking for the wolfgang source coude and I've been trying to gently push them towards contributing to diagrams... but I guess most of them just want to see how it's done
2011-05-22 16:31:47 UTC <byorgey> hehe
2011-05-22 16:32:25 UTC <byorgey> luite: just a random thought, I think it would be cool to eventually integrate the 'Gallery' portion of the diagrams website with Wolfgang
2011-05-22 16:32:44 UTC <byorgey> so you could be looking at an example and just click a button to load it up in Wolfgang
2011-05-22 16:33:00 UTC <byorgey> or maybe just have Wolfgang be embedded directly
2011-05-22 16:36:37 UTC <luite> hmm, are there some extra features required for that? I'd be difficult to integrate it in another site without having the whole page in an iframe or something, because of security restrictions for cross-domain javascript requests
2011-05-22 16:37:11 UTC <byorgey> oh, ok, well forget the direct embedding then
2011-05-22 16:37:11 UTC <luite> there's a way to get around it, but it would require a few changes...
2011-05-22 16:37:25 UTC <byorgey> you're right, I guess it's just up to me to create the links =)
2011-05-22 16:42:30 UTC <luite> where is this diagrams gallery by the way?
2011-05-22 16:43:21 UTC <byorgey> http://projects.haskell.org/diagrams/gallery.html
2011-05-22 16:43:43 UTC <luite> oh that's the server-that-never-works
2011-05-22 16:43:54 UTC <byorgey> hmm?  seems to be working fine
2011-05-22 16:44:12 UTC <luite> really, it's never worked here
2011-05-22 16:44:29 UTC <byorgey> really? strange
2011-05-22 16:45:37 UTC <byorgey> well, if you have hakyll and hint installed you can build yourself a local version from diagrams-doc/web
2011-05-22 16:45:55 UTC <byorgey> and perhaps I should look into better hosting solutions
2011-05-22 16:46:09 UTC <byorgey> but projects.h.o seemed easiest for the moment
2011-05-22 16:48:58 UTC <luite> oh lol
2011-05-22 16:49:03 UTC <luite> it was my fault
2011-05-22 16:49:17 UTC <byorgey> haha, how?
2011-05-22 16:50:10 UTC <luite> when the haskell.org domain was offline there was a list of items to add to your hosts file. and I still had a backup of that in my /etc, probably copied the wrong backup over the real file some time ago...
2011-05-22 16:50:49 UTC <luite> the other haskell servers apparently still have the same IP address :)
2011-05-22 16:52:18 UTC <byorgey> ah, haha
2011-05-22 16:53:55 UTC <luite> 2001-05-21 huh?
2011-05-22 16:56:28 UTC <luite> hadn't seen the gray code one before, nice
2011-05-22 17:30:09 UTC <luite> do you know who hosts projects.haskell.org?
2011-05-22 17:32:16 UTC <luite> "This server is run by a mysterious group of Haskell hackers who do not wish to be known as a Cabal, and is funded from money earned by haskell.org mentors in the Google Summer-of-Code programme."
2011-05-22 17:32:20 UTC <luite> hehe
2011-05-22 17:40:33 UTC <luite> probably not very suitable for wolfgang anyway
2011-05-22 17:47:18 UTC <luite> hmm their hosting provider is quite cheap, 49 euro per month for a quad core i7 920 server with 8GB RAM
2011-05-22 17:47:25 UTC <luite> 149 setup
2011-05-22 17:48:55 UTC <byorgey> luite: 2001, haha whoops =)
2011-05-22 17:49:45 UTC <byorgey> luite: I don't really know exactly who runs projects.h.o
2011-05-22 17:50:34 UTC <luite> hmm, I'll ask in #haskell
2011-05-22 17:57:06 UTC <luite> the identity of the admins seems to be a closely guarded secret
2011-05-23 01:07:47 UTC <byorgey> alpounet: sorry I missed you
2011-05-23 01:08:43 UTC <byorgey> FYI, if I am not around you can always just leave questions etc. here and I will read them later
2011-05-23 07:03:37 UTC <alpounet> byorgey, any idea why http://hpaste.org/46955/diagrams__cantor only yields one of the iterations of the cantor set, whereas what i want is draw the first 5 iterations, on the same diagram, at different heights
2011-05-23 10:33:07 UTC <byorgey> alpounet: struts and hrules have height 0, so combining them with === just puts them on top of each other
2011-05-23 10:33:40 UTC <byorgey> alpounet: try using rectangles (i.e. scaled squares) in place of the hrules.
2011-05-23 10:39:36 UTC <byorgey> alpounet: you'll also want to scale the iterations so they are all the same width
2011-05-23 10:40:01 UTC <byorgey> using something like  scaleTo w d = d # scaleX (w / width d)
2011-05-23 19:21:34 UTC <alpounet> oh ok, thanks byorgey
2011-05-23 19:21:41 UTC <alpounet> will try this soon
2011-05-23 20:42:08 UTC <tromp> what would be the shortest program to draw a path of 3 lines in U shape
2011-05-23 20:43:11 UTC <tromp> or the most straightforward program
2011-05-23 21:15:22 UTC <byorgey> tromp: well, you could do something like   stroke $ fromSegments [(0,-1),(1,0),(0,1)]
2011-05-23 21:30:59 UTC <tromp> thx; i'll try that
2011-05-23 21:41:43 UTC <tromp> @pl \(x, y) -> (f y, f x)
2011-05-23 21:44:40 UTC <byorgey> (f &&& f) . swap
2011-05-23 22:17:46 UTC <tromp> does Diagrams work with Complex to represent the plane?
2011-05-23 22:19:39 UTC <byorgey> tromp: interesting question!
2011-05-23 22:20:00 UTC <byorgey> tromp: are you asking about how it is implemented, or whether it could be made to work with Complex?
2011-05-23 22:20:21 UTC <byorgey> it is not implemented in terms of Complex
2011-05-23 22:21:36 UTC <byorgey> but since complex numbers form a vector space you could easily construct diagrams over (Complex Double)
2011-05-23 22:23:41 UTC <tromp> so i could do pathFromVectors [-i,1,i] ?
2011-05-23 22:25:40 UTC <byorgey> you could do  fromOffsets [-i,1,i] :: Path (Complex Double)
2011-05-23 22:25:52 UTC <byorgey> or fromVertices (map P [-i,1,i])
2011-05-23 22:26:15 UTC <byorgey> tromp: by the way, I just realized I said fromSegments before when I should have said fromOffsets, sorry about that
2011-05-23 22:26:26 UTC <byorgey> maybe you already figured that out
2011-05-23 22:28:49 UTC <tromp> yeah, fromSegments didnt look right
2011-05-23 22:29:56 UTC <tromp> but hen what's difference between pathFromVectors and fromOffsets?
2011-05-23 22:30:40 UTC <byorgey> hmm, which module is pathFromVectors in?
2011-05-23 22:31:55 UTC <byorgey> fromOffsets constructs either a Path or a Trail from a list of vectors
2011-05-23 22:32:50 UTC <tromp> i see it used in http://en.wikipedia.org/wiki/Hilbert_curve#Haskell_Implementation
2011-05-23 22:33:32 UTC <byorgey> oh, that is from the old version of diagrams
2011-05-23 22:34:15 UTC <tromp> that explains
2011-05-23 22:34:25 UTC <byorgey> ok, so fromOffsets is essentially a much more general version of what pathFromVectors used to be
2011-05-23 22:36:26 UTC <byorgey> tromp: there are more up-to-date examples here: http://projects.haskell.org/diagrams/gallery.html
2011-05-23 22:36:39 UTC <byorgey> although now that I think about it none of those examples uses paths in a very interesting way
2011-05-23 22:37:13 UTC <byorgey> tromp: if there's a particular sort of example you'd like to see let me know and I could probably work something up
2011-05-23 22:38:45 UTC <tromp> oh, a working hilbert curve would be nice
2011-05-23 22:41:12 UTC <byorgey> ok, sure
2011-05-23 22:56:34 UTC <byorgey> tromp: http://hpaste.org/46985/hilbert_curve_with_diagrams
2011-05-23 22:57:57 UTC <byorgey> this is one way to do it.  It's a bit longer than the previous one but I think it's a little nicer since it builds up the path directly by gluing the sections together, rather than dealing with coordinates
2011-05-23 22:58:18 UTC <byorgey> also, while doing this I realized I wanted a function to reverse trails, so I wrote it, but I will add it to the standard library
2011-05-23 23:06:00 UTC <tromp> you could even try to compose the diagrams instead of the trails
2011-05-23 23:07:01 UTC <tromp> you start with a diagram t, then put a unitY diagram below and a rotated t below that
2011-05-23 23:07:20 UTC <tromp> then call that diagram y
2011-05-23 23:07:37 UTC <tromp> put y beside a unitX diagram beside a reflected y
2011-05-23 23:07:59 UTC <tromp> then re-assign the origin to be in bottom left
2011-05-23 23:08:46 UTC <tromp> funny that you can compse at so many levels: vectors, trails, diagrams
2011-05-24 01:13:53 UTC <byorgey> tromp: yes, you could do it that way too
2011-05-24 01:14:05 UTC <byorgey> tromp: but you would have to do some annoying fiddling to get things to line up properly
2011-05-24 01:14:53 UTC <byorgey> tromp: personally I find the ability to compose at so many levels quite useful, since the different sorts of composition have different semantics
2011-05-24 01:15:01 UTC <byorgey> then again, I am obviously biased =)
2011-05-24 01:15:37 UTC <tromp> yes, it's a nice feature for sure
2011-05-24 01:16:19 UTC <tromp> to align properly, i need the origin in the lower left, and the vertical composition should keep the origin of the top object
2011-05-24 01:16:53 UTC <tromp> i believe that's not too much fiddling:)
2011-05-24 01:16:59 UTC <byorgey> I guess not =)
2011-05-24 01:17:29 UTC <byorgey> if you want vertical composition that preserves the top object's origin you can use  append (negateV unitY)
2011-05-24 01:18:21 UTC <byorgey> append v d1 d2  places d1 and d2 next to each other with v pointing from d1 to d2, and preserves d1's origin
2011-05-24 01:22:21 UTC <tromp> doesn't vcat do something similar on a list?
2011-05-24 01:23:25 UTC <byorgey> yes
2011-05-24 01:23:40 UTC <byorgey> so I guess you could also do  vcat [d1,d2]  in this particular case
2011-05-24 01:24:00 UTC <byorgey> s/I guess//  =)
2011-05-24 01:25:01 UTC <tromp> i'll try when i get home
2011-05-24 16:29:18 UTC <luite> ugh I feel a bit guilty about not giving tg_ the latest wolfgang sources he asked for, suggesting that he'd better improve diagrams instead if he really wanted to help
2011-05-24 18:00:44 UTC <byorgey> luite: hehe, I wouldn't =)
2011-05-24 18:01:44 UTC <byorgey> luite: I'm all for open source, but "open source" doesn't preclude keeping the source private for a while at first
2011-05-24 18:03:04 UTC <hpc> "eventually open source" :Q
2011-05-24 18:03:10 UTC <hpc> *:P
2011-05-24 18:30:47 UTC <luite> byorgey: hehe he's been bugging me all week about "our" project and how the things he's going to write are totally going to supersede wolfgang :)
2011-05-24 18:41:34 UTC <hpc> heh
2011-05-24 19:24:13 UTC <byorgey> hah, yikes
2011-05-24 19:25:19 UTC <tg_> what do you know
2011-05-24 19:25:36 UTC <tg_> byorgey: curiously enough, all of the work I'll end up doing in haskell is to support physics research
2011-05-24 19:26:01 UTC <tg_> i'm interested in testing the validity of a (really the, there's only one) circle fractal
2011-05-24 19:26:37 UTC <tg_> as a geometric spacetime.
2011-05-24 19:26:50 UTC <tg_> (I'm a physicist, a computer scientist 2nd)
2011-05-24 19:27:03 UTC <tg_> anyway, one thing that might throw me for a loop
2011-05-24 19:27:11 UTC <tg_> is that the circle fractal is strongly Integer addressed
2011-05-24 19:27:55 UTC <tg_> So R2 isn't the most natural place to work
2011-05-24 19:28:33 UTC <tg_> how much work do you see extending diagrams to work in some arbitrary space?
2011-05-24 19:28:55 UTC <byorgey> diagrams already supports arbitrary vector spaces.
2011-05-24 19:29:07 UTC <tg_> through VectorSpace?
2011-05-24 19:29:12 UTC <byorgey> yes
2011-05-24 19:29:35 UTC <tg_> hm
2011-05-24 19:29:52 UTC <tg_> so I need a new HasBasis
2011-05-24 19:30:18 UTC <byorgey> tg_: what vector space do you want?
2011-05-24 19:30:47 UTC <tg_> byorgey: that's the question I have to answer
2011-05-24 19:31:13 UTC <tg_> it's probably 28 dimensional
2011-05-24 19:31:16 UTC <tg_> whatever it is
2011-05-24 19:31:28 UTC <tg_> (there is lots of literature about the fractal, inclding some recent PhD paper discoveries)
2011-05-24 19:31:31 UTC <byorgey> ok
2011-05-24 19:31:33 UTC <tg_> one thing that's interesting/nice
2011-05-24 19:31:47 UTC <tg_> is that you can essentially make two modifications to the normal equations for circles:
2011-05-24 19:32:09 UTC <byorgey> so you want to produce some sort of concrete visualizations of this 28-dimensional fractal?
2011-05-24 19:32:13 UTC <tg_> one, [2,3] aren't prime, and there is an explicit division algebra on 0
2011-05-24 19:32:42 UTC <tg_> two, there are 28 "almost prime" 4-vectors that serve as a basis
2011-05-24 19:33:04 UTC <tg_> although they are probably not 4-vectors, they are probably 4-vectors (quaternions) embedded in a octonion basis
2011-05-24 19:33:12 UTC <tg_> oh, third rule
2011-05-24 19:33:15 UTC <tg_> leave pi out
2011-05-24 19:33:26 UTC <byorgey> um, I will take your word for it.
2011-05-24 19:33:58 UTC <tg_> well I need to figure out how to get it to work, but I have done about 1.5 years of research into studying the mathematics of the fractal, its group
2011-05-24 19:34:33 UTC <tg_> anyway, you clarified the point - since you use an abstract vector space
2011-05-24 19:34:37 UTC <tg_> i don't need to worry about that
2011-05-24 19:35:15 UTC <byorgey> this sounds cool though, I was hoping someone would try to draw things in funny vector spaces =)
2011-05-24 19:35:27 UTC <tg_> byorgey: well, what I really hope to prove
2011-05-24 19:35:37 UTC <byorgey> you would also have to create your own backend that knows how to render 28-dimensional diagrams or whatever
2011-05-24 19:35:40 UTC <tg_> is that if you use the circle fractal as the lowest basis
2011-05-24 19:35:49 UTC <tg_> well, it's 3-dimensional
2011-05-24 19:35:50 UTC <tg_> in terms of rendering
2011-05-24 19:37:26 UTC <tg_> you can view it as a coupling of a set of 8, 3-dimensional vector spaces
2011-05-24 19:37:28 UTC <tg_> but it's recursively defined
2011-05-24 19:37:45 UTC <tg_> have you even encountered the apollonian fractal before?
2011-05-24 19:37:46 UTC <tg_> for some reason it's not very well known
2011-05-24 19:38:17 UTC <byorgey> yes, I have
2011-05-24 19:38:37 UTC <tg_> well, a very bright PhD student used a technique called an 'affine sieve' to prove properties
2011-05-24 19:38:40 UTC <tg_> about the fractal
2011-05-24 19:38:49 UTC <tg_> though lots has been discovered generally in the last 10 years
2011-05-24 19:39:01 UTC <luite> ah that's a fun thing to draw
2011-05-24 19:39:10 UTC <tg_> but the PhD student (Elena Fuchs) got her PhD for proving that, in the context of the fractal
2011-05-24 19:39:15 UTC <tg_> 2 and 3 are not numbers
2011-05-24 19:39:21 UTC <tg_> (rather, they aren't prime "curvatures"
2011-05-24 19:39:23 UTC <tg_> )
2011-05-24 19:39:41 UTC <tg_> and that the smallest reprsentation group is something very much like D_28h
2011-05-24 19:39:58 UTC <tg_> though she proved it using mappings in and out of the complex numbers
2011-05-24 19:40:26 UTC <tg_> but the group has all kinds of weird properties
2011-05-24 19:40:38 UTC <byorgey> luite: yeah, I had a version of it drawn with the old version of diagrams, someone ought to recreate it
2011-05-24 19:41:02 UTC <tg_> one of which is that the joint spectral radius of the generators is equal to the golden ratio
2011-05-24 19:41:41 UTC <tg_> byorgey: yeah that'll probably be me
2011-05-24 19:41:44 UTC <tg_> i'm just getting running
2011-05-24 19:41:50 UTC <byorgey> great =)
2011-05-24 19:41:58 UTC <luite> oh that would be a good exercise
2011-05-24 19:42:02 UTC <tg_> i have spent two years struggling with mathematica
2011-05-24 19:42:05 UTC <luite> only 26 more dimenstions to go afterwards ;p
2011-05-24 19:42:15 UTC <tg_> luite: like I said, it's not "really" 28 dimensional
2011-05-24 19:42:20 UTC <tg_> the fractal is strictly 3 dimensional
2011-05-24 19:42:30 UTC <tg_> there is a fourth dimension, but it's an inner product dimension
2011-05-24 19:43:29 UTC <tg_> after four, the fractal is degenerate - whereas you started addressing evertyhing (the (center * curvature), the depth, the area, and the volume) of the objects with Integers
2011-05-24 19:43:45 UTC <tg_> you start getting n-spheres which are no longer Integers
2011-05-24 19:44:21 UTC <luite> hmm, I'm getting type errors in my head, expected type Integer, actual type n-sphere
2011-05-24 19:44:31 UTC <tg_> luite: right, it doesn't make sense intuitively
2011-05-24 19:44:39 UTC <tg_> but the circles are *addressed* *uniquely* by integers
2011-05-24 19:45:13 UTC <tg_> which surprisngly implies that n-spheres
2011-05-24 19:45:19 UTC <tg_> are addressed by products of integers
2011-05-24 19:45:25 UTC <tg_> which are still integers :O
2011-05-24 19:45:54 UTC <tg_> i realize it sounds crazy, but it was proved about 10 years ago
2011-05-24 19:46:09 UTC <tg_> I have about 1200 pages of material I've digested about the fractal
2011-05-24 19:46:18 UTC <tg_> most of it was done by Jeffery Lagarias at AT&T Labs
2011-05-24 19:46:31 UTC <tg_> some by Ron Graham
2011-05-24 19:47:16 UTC <tg_> byorgey: i love how most of the answers to even the most absurdly strange ideas from you guys have been "yeah, that should be doable."
2011-05-24 19:47:22 UTC <tg_> this community is awesome
2011-05-24 19:47:25 UTC <byorgey> =)
2011-05-24 19:48:26 UTC <byorgey> "Haskell: making difficult things easy and easy things into zygohistomorphic prepromorphisms since 1987"
2011-05-24 19:49:04 UTC <tg_> hahaha
2011-05-24 19:49:11 UTC <tg_> that's wonderful
2011-05-24 19:49:42 UTC <tg_> incedentally, I had already "decided" to use ||| as a geometric operator
2011-05-24 19:49:46 UTC <tg_> and you beat me to that one
2011-05-24 19:51:01 UTC <luite> tg_: yeah that happens quite often. actually I worked out non-euclidean geometry some 30 years before Gauss did, but I didn't publish it because I thought the results wouldn't be interesting to others ;)
2011-05-24 19:51:15 UTC <tg_> luite: hey now
2011-05-24 19:51:41 UTC <tg_> I think that's the role of mathemiticians in the universe
2011-05-24 19:52:03 UTC <tg_> to invent useless things for no reason, ironically
2011-05-24 19:52:11 UTC <tg_> and then for them to to turn out to be useful
2011-05-24 19:53:17 UTC <tg_> the ones that really confound me are those like Ramajuran who were better calculators than I am, with a quad core processor
2011-05-24 19:55:11 UTC <tg_> byorgey: how many years have you been studying this-and-that-morphisms?
2011-05-24 19:55:44 UTC <byorgey> tg_: category theory?  I think I first started learning it 3 or 4 years ago
2011-05-24 19:56:08 UTC <byorgey> not that I have been studying it intensively ever since.
2011-05-24 19:56:10 UTC <tg_> how long have you been in a PhD program? do you consider yourself an expert (on that)?
2011-05-24 19:57:07 UTC <byorgey> I've been in my PhD program 3 years, and as far as category theory goes, I consider myself comfortably conversant but far from expert.
2011-05-24 19:57:27 UTC <byorgey> then again, "expert" is a relative term.
2011-05-24 19:57:33 UTC <tg_> yeah
2011-05-24 19:57:49 UTC <tg_> what areas "underneath" (more abstract) have you studied, if any?
2011-05-24 19:58:08 UTC <byorgey> I don't understand the question.
2011-05-24 19:58:15 UTC <tg_> like, have you studied model theory?
2011-05-24 19:58:20 UTC <byorgey> yes, a bit
2011-05-24 19:58:22 UTC <tg_> or any of the even more abstract ideas
2011-05-24 19:58:37 UTC <tg_> is it incorrect to think of that as "more abstract" than category theory?
2011-05-24 19:59:41 UTC <byorgey> I don't know.
2011-05-24 20:02:50 UTC <luite> hmm, I don't know too much model theory, compactness theorem is about as much as I can actively recall, but I wouldn't really say that, it just seems to focus on a different aspect
2011-05-24 20:06:04 UTC <tg_> luite: well, to even hint that a circle fractal could be interpreted as a real, physical possibility is so far outside the comfort zone of physicists
2011-05-24 20:06:38 UTC <tg_> so I'm used to pretty much everything I deal with is so far removed from typical quantum physics calculations that I used to do all the time
2011-05-24 20:07:30 UTC <tg_> ironically, the first place I thought such an idea was worth investigating was after going through all of the modern physical theory (QM -> QFT -> Gauge Theory -> Yang-Mills theories -> String theories)
2011-05-24 20:07:35 UTC <tg_> was all the way at the end
2011-05-24 20:13:34 UTC <luite> what idea? sorry for not following you
2011-05-24 20:14:04 UTC <tg_> the idea of propsing a fractal theory of quantum physics
2011-05-24 20:14:20 UTC <tg_> it's "wrong" in physics circles for two reasons
2011-05-24 20:14:37 UTC <tg_> outside of the subfields of [string theory, quantum loop gravity], it's considered completely absurd
2011-05-24 20:14:54 UTC <tg_> inside the field of string theory, spherical solutions are currently though to be ruled out
2011-05-24 20:15:47 UTC <tg_> and QLG is one of the least explored areas in theory
2011-05-24 20:21:35 UTC <luite> do you think the regular non-fractal string theories are wrong?
2011-05-24 20:23:54 UTC <tg_> no, I think (as do many physicists) think that string theory is a mathematical, not a physical, framework
2011-05-24 20:25:14 UTC <tg_> As Leonard Susskind (one of the "fathers" of string theory) says, "When one wants to sit down and do a calculation, one immediately discovers that you are off by at least 22 dimensions."
2011-05-24 20:26:35 UTC <tg_> string theory is (in my view) a mathematical framework to the quanta of spacetime by solving 26 seperate (no cross-product terms) electrostatics problems
2011-05-24 20:26:41 UTC <luite> hehe I like leonard susskinds lectures (the ones on itunes), but that immediately shows how little I know about this
2011-05-24 20:26:53 UTC <tg_> how many did you watch?
2011-05-24 20:27:13 UTC <tg_> the best ones, really, are the string theory ones
2011-05-24 20:27:16 UTC <tg_> and the m-theory ones
2011-05-24 20:27:25 UTC <luite> not too many, classical and quantum mechanics I think, still need to do the modern physics ones, one day
2011-05-24 20:27:25 UTC <tg_> (which don't cover m-theory at all, but that's the title of them)
2011-05-24 20:27:47 UTC <tg_> string theory basically lets you reduce physics to electrostatic problems over conformal spaces
2011-05-24 20:27:57 UTC <tg_> where you have 26 different types of charges
2011-05-24 20:29:37 UTC <tg_> the equations for string theory really are pretty simple (at least the canonical integral is)
2011-05-24 20:30:53 UTC <tg_> the main problem I suppose
2011-05-24 20:31:00 UTC <tg_> is that in order to not have cross products
2011-05-24 20:31:16 UTC <tg_> all of the "dimensions" have to satisfy the cauchy-riemann equations
2011-05-24 20:32:15 UTC <luite> hehe one day I'll watch them. perhaps this summer when I'm on holiday in the alps, camping, it's been raining for a few days, nothing better to do ;)
2011-05-24 20:32:30 UTC <tg_> susskind in the alps
2011-05-24 20:32:34 UTC <tg_> sounds like a good time to me
2011-05-25 00:29:15 UTC <hpc> susskind gave a ted talk about feynmann
2011-05-25 00:29:29 UTC <hpc> that's three awesome things in one tiny .mp4
2011-05-25 00:44:24 UTC <luite> hmm
2011-05-25 15:33:16 UTC <tromp> i have to say there was a certain artistic quality to the hrule/vrule mixup:-)
2011-05-25 15:34:27 UTC <byorgey> hehe, indeed =)
2011-05-25 15:35:12 UTC <byorgey> sometimes I like just running a diagram in looped-compile mode (with the -l option) and then fiddling around with the source and seeing what comes out =)
2011-05-25 15:35:55 UTC <byorgey> http://projects.haskell.org/diagrams/gallery/Hilbert.html
2011-05-25 15:37:15 UTC <tromp> oh, you only need to import the Prelude. i'
2011-05-25 15:37:23 UTC <tromp> i'll update the wikipedia accordingly
2011-05-25 15:37:27 UTC <byorgey> no
2011-05-25 15:37:39 UTC <byorgey> if you want to compile it with the Cairo backend you have to import that
2011-05-25 15:38:13 UTC <byorgey> I just have things set up in the gallery so that it looks for something named "example" and renders it using the Cairo backend
2011-05-25 15:38:23 UTC <tromp> ic
2011-05-25 15:38:27 UTC <byorgey> just to make the examples less backend-specific
2011-05-25 15:48:50 UTC <tromp> I included a link to Diagrams in the wikipedia version
2011-05-25 15:49:58 UTC <byorgey> good idea
2011-05-25 16:02:25 UTC <Lemmih> http://mirror.seize.it/outlines.svg
2011-05-25 16:03:24 UTC <Lemmih> Add printer + arts&crafts to get a 3D sin wave.
2011-05-25 16:03:46 UTC <luite> hehe
2011-05-25 16:05:48 UTC <Lemmih> I am gonna make a matric ton of these.
2011-05-25 16:06:31 UTC <luite> add a HPGL2 backend to automate production on a cutting table :p
2011-05-25 16:09:21 UTC <Lemmih> ACTION considers plotting two optimization parameters for GHC and making a cutout.
2011-05-25 16:11:06 UTC <luite> do you have a sine cutter? ;)
2011-05-25 16:47:00 UTC <byorgey> Lemmih: did you make those outlines with diagrams too?
2011-05-25 18:51:04 UTC <luite> whoah it uses ipv6 :O)
2011-05-25 19:39:45 UTC <sjoerd_visscher> hi!
2011-05-25 19:39:55 UTC <byorgey> hi sjoerd_visscher!
2011-05-25 19:39:55 UTC <sjoerd_visscher> who knows something about the UDTree?
2011-05-25 19:40:15 UTC <byorgey> I pretend to ;)
2011-05-25 19:40:28 UTC <sjoerd_visscher> I'm confused by the branch having a list of d's instead of just one
2011-05-25 19:40:54 UTC <sjoerd_visscher> it looks like that was originally the case even
2011-05-25 19:41:18 UTC <byorgey> sjoerd_visscher: it's sort of a hack
2011-05-25 19:41:53 UTC <sjoerd_visscher> what do you need it for?
2011-05-25 19:41:55 UTC <byorgey> sjoerd_visscher: the basic idea is that by delaying composition of the d's we move a Monoid constraint from some creation function to some elimination function
2011-05-25 19:42:09 UTC <byorgey> and there was some reason why I wanted that but I couldn't tell you now.
2011-05-25 19:43:26 UTC <sjoerd_visscher> I want to make a version using Fix from http://hackage.haskell.org/packages/archive/recursion-schemes/0.4.3/doc/html/Data-Functor-Foldable.html
2011-05-25 19:43:34 UTC <byorgey> cool.
2011-05-25 19:44:07 UTC <sjoerd_visscher> But I'll stick to one d then for now.
2011-05-25 19:44:22 UTC <byorgey> yes, that makes sense.
2011-05-25 19:45:17 UTC <sjoerd_visscher> If the u's would have been a list I would understand, as u doesn't need to be a Monoid for Actions to be defined on it
2011-05-25 19:45:52 UTC <byorgey> yeah
2011-05-25 19:46:03 UTC <sjoerd_visscher> wait
2011-05-25 19:46:18 UTC <sjoerd_visscher> still confused
2011-05-25 19:46:23 UTC <byorgey> I probably need to go back at some point and rethink/clean up UDTree, at the time I just really wanted to get it to work so I could get on with making diagrams =)
2011-05-25 19:47:42 UTC <sjoerd_visscher> you should move the repo to github if you want more people to send patches I think
2011-05-25 19:47:59 UTC <byorgey> but then I would have to use git, right?
2011-05-25 19:48:16 UTC <byorgey> or can I mirror it somehow?
2011-05-25 19:48:31 UTC <sjoerd_visscher> how did they do it with GHC?
2011-05-25 19:48:39 UTC <byorgey> I don't really know.
2011-05-25 19:49:42 UTC <sjoerd_visscher> Google says there are ways to mirror darcs to git
2011-05-25 19:51:54 UTC <byorgey> sjoerd_visscher: thanks, I will look into it
2011-05-25 19:52:11 UTC <byorgey> I love github but I can't say I am a big fan of git
2011-05-25 19:52:45 UTC <sjoerd_visscher> I'm not a fan of command-line tools
2011-05-25 19:53:06 UTC <luite> what do you use instead, for git? git gui?
2011-05-25 19:53:11 UTC <sjoerd_visscher> GitX
2011-05-25 19:53:39 UTC <luite> hmm, havent seen that one yet
2011-05-25 19:53:48 UTC <sjoerd_visscher> it's for MacOS
2011-05-25 19:54:21 UTC <luite> oh right, I use UbuntuOS
2011-05-25 19:54:56 UTC <byorgey> what do you know, https://github.com/purcell/darcs-to-git
2011-05-25 19:59:19 UTC <Lemmih> byorgey: Yes, I made the outlines with disgrams.
2011-05-25 19:59:43 UTC <Lemmih> It's amazing what you can do in a few lines of Haskell.
2011-05-25 19:59:51 UTC <byorgey> Lemmih: impressive, did you use beziers, or just lots of tiny straight lines?
2011-05-25 20:00:11 UTC <Lemmih> byorgey: Lots of straight lines.
2011-05-25 20:00:44 UTC <byorgey> I mean eventually I hope someone will write an extension module to let you plot function curves, but I didn't expect it would be that easy to do it from scratch =)
2011-05-25 20:01:02 UTC <byorgey> yes, having Haskell at your disposal is rather powerful.
2011-05-25 20:02:45 UTC <Lemmih> The entire code (both for rendering outlines and generating top-down color views) is less than 60 lines.
2011-05-25 20:03:06 UTC <byorgey> nice
2011-05-25 20:03:48 UTC <byorgey> Lemmih: while writing it, were there any things you wished were in the standard library, but weren't?
2011-05-25 20:06:04 UTC <Lemmih> Not really. The hardest part was figuring out how to draw lines.
2011-05-25 20:07:29 UTC <byorgey> ok.
2011-05-25 20:07:33 UTC <luite> I think the hard parts of plotting are in all the extra details, choosing a proper range, the right number of ticks, labels, placing the legend somewhere
2011-05-25 20:16:55 UTC <tromp> that's why the plot script i maintain at work is over 3000 lines of perl:(
2011-05-25 20:18:41 UTC <tromp> just parsing all the options is over 300 lines:(
2011-05-25 20:20:35 UTC <byorgey> yikes!
2011-05-25 20:21:49 UTC <luite> tromp: did you have to do tricky things? like reading font metrics for determining the size and placement of a label or legend box?
2011-05-25 20:22:18 UTC <tromp> it queries pgplot routines for that
2011-05-25 20:22:42 UTC <luite> hehe so doing everything in haskell would be even more work :)
2011-05-25 20:23:28 UTC <tromp> also, it's not self contained, but uses other perl modules for manipulating time series
2011-05-25 20:23:53 UTC <tromp> rewriting in haskell is not even a consideration:(
2011-05-25 20:24:15 UTC <luite> aw ;p
2011-05-25 20:24:39 UTC <tromp> i'm one of the few ppl in my company who has even heard of haskell
2011-05-25 20:25:29 UTC <luite> show them diagrams and they'll see how awesome it is (just don't mention that there's no text support yet)
2011-05-25 20:47:30 UTC <byorgey> so we currently have both rotate (which takes an angle in radians) and rotateBy (which takes a fraction of a circle)
2011-05-25 20:48:01 UTC <byorgey> should we keep both? or drop the radians one? or make one function that takes an argument in some Angle class with instances for both?
2011-05-25 20:48:58 UTC <byorgey> I'm kind of leaning towards the type class approach but could be talked out of it
2011-05-25 20:50:07 UTC <tromp> it's hard to imagine why you'd need to rotate by an angle that's not a fraction of pi
2011-05-25 20:50:45 UTC <alpounet> agreed
2011-05-25 20:50:56 UTC <byorgey> what if you wanted a particular slope?
2011-05-25 20:51:06 UTC <byorgey> then you would compute the angle with atan2 or something like that
2011-05-25 20:52:00 UTC <tromp> yes, then you might need to divide by 2*pi  to get the fraction:(
2011-05-25 20:52:44 UTC <tromp> is there a way now to use 360 degree type angles?
2011-05-25 20:53:01 UTC <byorgey> sure, divide by 360 and multiply by 2*pi  ;)
2011-05-25 20:53:12 UTC <tromp> but not direct?
2011-05-25 20:53:16 UTC <byorgey> but there are no functions that specifically take angles in degrees
2011-05-25 20:53:16 UTC <byorgey> right
2011-05-25 20:54:03 UTC <tromp> it's not clear that fractions like 1/4 are an improvement over degrees like 90
2011-05-25 20:54:19 UTC <tromp> which many other frameworks use
2011-05-25 20:54:35 UTC <byorgey> but degrees are arbitrary and dumb.
2011-05-25 20:54:47 UTC <byorgey> anyway, I am envisioning something like the ability to say   rotate (1/3)   or  rotate (Rad (2*pi/3))   or  rotate (Deg 120)
2011-05-25 20:54:49 UTC <tromp> arbitrary, dumb, and familiar:(
2011-05-25 20:54:56 UTC <byorgey> sadly, yes
2011-05-25 20:55:17 UTC <sjoerd_visscher> the default unit is tau?
2011-05-25 20:55:27 UTC <tromp> shouldn't the 1/3 be a proper Data.Ratio 1%3 ?
2011-05-25 20:55:28 UTC <byorgey> yes
2011-05-25 20:55:34 UTC <sjoerd_visscher> cool
2011-05-25 20:56:16 UTC <byorgey> tromp: perhaps, but (1/3 :: Rational) == 1%3
2011-05-25 20:56:38 UTC <byorgey> ok, off to bridge club
2011-05-25 20:56:51 UTC <tromp> happy bidding
2011-05-25 20:56:56 UTC <byorgey> thanks
2011-05-25 21:12:12 UTC <Lemmih> http://mirror.seize.it/spiral.png http://mirror.seize.it/spiral.svg
2011-05-25 21:13:14 UTC <luite> cool, but it's discontinuous :(
2011-05-25 21:24:22 UTC <Lemmih> Discontinuous?
2011-05-25 21:25:40 UTC <luite> yes at the horizontal line from the center to the right
2011-05-25 21:26:03 UTC <Lemmih> Ah, yeah.
2011-05-25 21:43:25 UTC <Lemmih> ACTION doesn't know how to fix that /-:
2011-05-25 21:44:42 UTC <sjoerd_visscher> multiply by pi somewhere
2011-05-25 21:45:24 UTC <sjoerd_visscher> pi/3
2011-05-26 13:13:29 UTC <hpc> :( the wolfgang site is down
2011-05-26 13:13:40 UTC <hpc> or rather, it's no longer up
2011-05-26 13:44:08 UTC <luite> sorry :p
2011-05-26 13:44:48 UTC <luite> there were some hanging interpreter processes yesterday, the autokiller doesn't work properly in all situations
2011-05-26 13:45:43 UTC <luite> and I've added some other things that might decrease security (loading code from one worksheet in another, uploading your own data files)
2011-05-26 13:45:55 UTC <luite> so I want to fix that first, before making it public again
2011-05-26 13:46:18 UTC <hpc> ah, makes sense
2011-05-26 13:55:29 UTC <hpc> can someone review my svg package and give thoughts?
2011-05-26 13:55:30 UTC <hpc> https://code.google.com/p/hs-svg/
2011-05-26 13:56:01 UTC <hpc> i could use some input before i start adding more functionality
2011-05-26 14:06:21 UTC <byorgey> hpc: looks nice!
2011-05-26 14:06:26 UTC <byorgey> needs moar comments ;)
2011-05-26 14:07:20 UTC <byorgey> also I think there is a lot of repeated stuff in Out.hs that can be factored into some common routines
2011-05-26 14:07:58 UTC <luite> using Show to do the output might not be ideal
2011-05-26 14:08:48 UTC <byorgey> oh, good point.  just derive the Show instance and make another class for serializing SVG stuff
2011-05-26 14:09:20 UTC <byorgey> then all the functions like showPoint, showElem, etc. can just be instances of that class
2011-05-26 14:12:44 UTC <luite> and SVGTree may not be the ideal data type for this: SVG is often just a flat list of elements, drawn from top to bottom (painter's algorithm), you  may want to have some (Monoidal) operation to combine two lists of drawing instructions, without adding extra root elements
2011-05-26 14:13:35 UTC <luite> so even though the XML is always a tree, having a forest for intermediate operation could make sense. I haven't thought about it too much, so I might be wrong :)
2011-05-26 14:13:57 UTC <hpc> i already have a forest, [SVGTree]
2011-05-26 14:13:58 UTC <hpc> i think
2011-05-26 14:14:43 UTC <luite> yes that could work
2011-05-26 14:15:07 UTC <hpc> i thought about making SVGTree a monoid, then got hung up on mempty
2011-05-26 14:15:10 UTC <luite> maybe there's already enough
2011-05-26 14:15:21 UTC <luite> with the g function and a list of trees
2011-05-26 14:16:44 UTC <hpc> also, i want to keep the types deliberately simple
2011-05-26 14:16:48 UTC <hpc> strut :: (Backend b v, InnerSpace v, OrderedField (Scalar v), Monoid m) => v -> AnnDiagram b v m -- yuck
2011-05-26 14:16:53 UTC <luite> haha
2011-05-26 14:17:24 UTC <hpc> g :: [SVGTree] -> SVGTree -- win
2011-05-26 14:17:26 UTC <luite> you're supposed to say "how wonderfully polymorphic" ;p
2011-05-26 14:17:32 UTC <hpc> haha
2011-05-26 14:18:27 UTC <hpc> (on a side note, the culture of making libs with complex types might be contributing to the perception that there aren't good libs for haskell)
2011-05-26 14:18:47 UTC <hpc> (because everything looks like ghc internals or whatever, and not like something meant to be used by programmers)
2011-05-26 14:19:05 UTC <hpc> anyhoo
2011-05-26 14:19:13 UTC <byorgey> hehe, I have worried about this.
2011-05-26 14:19:14 UTC <luite> either that, or there should be some syntax for context synonyms :p
2011-05-26 14:19:33 UTC <byorgey> there is a big tension between making things as useful and general as possible, and making the types comprehensible.
2011-05-26 14:19:52 UTC <hpc> yeah
2011-05-26 14:20:09 UTC <byorgey> I have even wondered about making a "beginner version" of diagrams that re-exports all the basic functions but with monomorphic types.
2011-05-26 14:20:15 UTC <byorgey> or nearly monomorphic.
2011-05-26 14:20:27 UTC <byorgey> it could be a pain to maintain though.
2011-05-26 14:20:29 UTC <hpc> i come from the bizarro half-world between java and perl, so i am mostly content with using concrete types as glue
2011-05-26 14:20:44 UTC <byorgey> perhaps it could be done with some sort of automated tool though.
2011-05-26 14:21:19 UTC <hpc> i think the big issue is that the class constraints don't separate concerns
2011-05-26 14:21:20 UTC <byorgey> luite: I already do use some constraint synonyms!
2011-05-26 14:21:34 UTC <hpc> your backend 'b' leaks through types and goes everywhere
2011-05-26 14:21:50 UTC <hpc> judging from what 'strut' has to do with the backend (nothing) at least
2011-05-26 14:22:28 UTC <luite> byorgey: how do you make them? I've used some before, but I think that required some (for me at least) less desirable language pragma's
2011-05-26 14:22:43 UTC <byorgey> hpc: you can only use a strut in vector space v with backends that work with that vector space.
2011-05-26 14:23:06 UTC <hpc> oh
2011-05-26 14:23:27 UTC <byorgey> luite: it's kind of a hack, you make a class with no methods  class (Some, Constraints, Here) => Synonym
2011-05-26 14:23:36 UTC <luite> ah yes, that's the same method
2011-05-26 14:23:42 UTC <byorgey> luite: and then a trivial instance   instance (Some, Constraints, Here) => Synonym a
2011-05-26 14:23:46 UTC <hpc> isn't that a bit beyond the scope of "an EDSL for diagrams"?
2011-05-26 14:24:10 UTC <byorgey> hpc: um... no? =)
2011-05-26 14:24:22 UTC <luite> but that requires OverlappingInstances or UndecidableInstances right?
2011-05-26 14:24:37 UTC <byorgey> luite: I don't remember.
2011-05-26 14:24:59 UTC <byorgey> luite: I do need those extensions though, but I don't know if it's for that or for other things
2011-05-26 14:25:04 UTC <luite> hehe after a while all your .hs files start with a few kilobyte of extensions :p
2011-05-26 14:25:14 UTC <byorgey> yeah =P
2011-05-26 14:25:46 UTC <hpc> ACTION can happily say he has never used an extension in code that does anything productive
2011-05-26 14:29:29 UTC <hpc> so, review of your review:
2011-05-26 14:29:49 UTC <hpc> make stuff derive Show, and make my own class for prettyprinting the elements and trees
2011-05-26 14:30:23 UTC <hpc> and see how appending trees works, and what i can do to make it easier
2011-05-26 14:33:52 UTC <luite> yes, and something you may want to keep in mind: it will be useful to store elements and reference them in other locations (defs/symbol + use)
2011-05-26 14:34:03 UTC <hpc> yeah, that i already have on my todo list
2011-05-26 14:34:06 UTC <hpc> for textpath
2011-05-26 14:34:33 UTC <luite> it's also useful for other things, like clipping paths, and groups that you just want to render a lot of times
2011-05-26 14:34:44 UTC <hpc> indeed
2011-05-26 14:35:18 UTC <luite> have you thought about how to make that in some way safe? no duplicate symbols, and that you can only refer to an existing symbol?
2011-05-26 14:36:50 UTC <hpc> that would be intractable
2011-05-26 14:36:54 UTC <hpc> you can reference lower ids
2011-05-26 14:36:57 UTC <luite> maybe you can just use Eq to combine equal trees
2011-05-26 14:37:06 UTC <luite> and generate id's when you write the svg
2011-05-26 14:37:27 UTC <hpc> so <foo href=bar>...[oodles of complex stuff]...<def id=bar>
2011-05-26 14:37:47 UTC <luite> some hashing of trees could make the Eq comparisons efficient
2011-05-26 14:38:37 UTC <hpc> i think ill start out just with a mostly 1:1 mapping of svg <-> haskell
2011-05-26 14:38:42 UTC <hpc> and add more safety later
2011-05-26 14:38:50 UTC <hpc> in the rewrite, perhaps
2011-05-26 14:39:35 UTC <luite> xlink :: SVGTree -> SVGTree -> SVGTree, where you store the references SVGTree in some attribute of the tree
2011-05-26 14:39:44 UTC <luite> the referenced SVGTree
2011-05-26 14:40:30 UTC <luite> and when you write the SVG file, you just collect all xlink attributes
2011-05-26 14:40:37 UTC <luite> and give them some id
2011-05-26 14:40:48 UTC <luite> combining identical trees
2011-05-26 14:41:14 UTC <luite> but maybe not ;p
2011-05-26 14:41:26 UTC <hpc> data SVG = SVG Context SVGTree?
2011-05-26 14:41:50 UTC <hpc> if anything in C can be solved with a deeper pointer, anything in haskell can be solved with another data structure
2011-05-26 14:42:30 UTC <luite> hehe, there's a difference though, in C you can use pointer comparison to check whether things refer to the same other thing
2011-05-26 14:42:45 UTC <hpc> heh
2011-05-26 14:42:48 UTC <luite> in haskell not really, unless you want to do things that look scary ;)
2011-05-26 14:43:34 UTC <luite> and with C you can have some global counter to generate your id's
2011-05-26 14:44:11 UTC <luite> whereas in haskell it's difficult to make unique things in a pure context
2011-05-26 14:52:11 UTC <tromp> you need to run in a State monad then
2011-05-26 14:53:29 UTC <luite> there are more specialized monads for that, MonadSupply in particular... but I think it's not ideal to make everything monadic
2011-05-26 14:54:32 UTC <luite> but maybe the pure alternatives are even worse
2011-05-26 14:54:33 UTC <tromp> better that than giving up purity, no?
2011-05-26 14:55:15 UTC <tromp> or passing the state around explicitly
2011-05-26 14:55:28 UTC <hpc> it's not purity i am worried about, so much as the extra pointless polymorphism
2011-05-26 14:55:53 UTC <hpc> because the 'a' in your State s a is only ever going to be SVGTree
2011-05-26 14:56:18 UTC <tromp> how does the polymorphism hurt you?
2011-05-26 14:56:36 UTC <hpc> it's just annoying is all
2011-05-26 14:56:50 UTC <hpc> it implies useful types that aren't actually there
2011-05-26 15:03:46 UTC <hpc> hmm, appendTree l@Leaf{} t = g [l,t]
2011-05-26 15:04:11 UTC <hpc> appendTree t t' = -- crap, can't even make mappend that way
2011-05-26 15:29:42 UTC <byorgey> hey there fryguybob
2011-05-26 15:29:46 UTC <fryguybob> Howdy
2011-05-26 15:30:37 UTC <byorgey> are you traveling or something? I forget
2011-05-26 15:31:00 UTC <fryguybob> Yeah, finishing up at my job.
2011-05-26 15:31:11 UTC <byorgey> ah, cool
2011-05-26 15:31:22 UTC <fryguybob> Then a conference
2011-05-26 15:31:34 UTC <byorgey> right, fun
2011-05-26 15:31:51 UTC <fryguybob> The gallery is coming along nicely.
2011-05-26 15:32:24 UTC <byorgey> thanks! I had fun coding it up with hakyll
2011-05-26 15:33:12 UTC <byorgey> now you just add a single .lhs file and it auto-generates the diagram, the gallery itself, the page for the example with syntax-highlighted code, the download link... =D
2011-05-26 15:41:21 UTC <tg_> byorgey: how do you see animated diagrams working in the future?
2011-05-26 15:41:29 UTC <tg_> byorgey: or interactive ones, or...
2011-05-26 15:42:12 UTC <byorgey> animated and interactive are two very different things =)
2011-05-26 15:43:02 UTC <byorgey> in theory, making animations should work very nicely: in place of diagrams over some vector space v we look at diagrams over  time -> v  (which also form a vector space).
2011-05-26 15:43:27 UTC <byorgey> however there are a lot of interesting practical details to be worked out.  at some point I need to sit down and think through it carefull again.
2011-05-26 15:43:42 UTC <tg_> byorgey: have you surveyed the field?
2011-05-26 15:43:53 UTC <tg_> byorgey: I mention: protovis, prototype(.js), raphael
2011-05-26 15:44:02 UTC <tg_> et al
2011-05-26 15:44:23 UTC <byorgey> yes, thanks for the reminder, I should look into those.
2011-05-26 15:44:26 UTC <tg_> protovis, to me, is the closest to being haskell-friendly because it's (1) declarative, and has (2) discrete time functions
2011-05-26 15:44:36 UTC <tg_> it's also exceedingly small
2011-05-26 15:44:43 UTC <tg_> (800 KB)
2011-05-26 15:44:52 UTC <tg_> prototype.js is very big, very slow
2011-05-26 15:45:01 UTC <tg_> raphael is *tiny* (55 KB)
2011-05-26 15:45:41 UTC <hpc> those are javascript libraries?
2011-05-26 15:46:13 UTC <tg_> yep
2011-05-26 15:46:22 UTC <byorgey> I really don't understand what the protovis people mean when they say it is "declarative"
2011-05-26 15:46:33 UTC <tg_> byorgey: you can't write loops in it
2011-05-26 15:46:39 UTC <byorgey> looking at the code examples it looks quite imperative to me.
2011-05-26 15:46:50 UTC <byorgey> northbound.forEach(function(stop) stop.bound = "N");
2011-05-26 15:46:53 UTC <byorgey> what do you call that?
2011-05-26 15:47:00 UTC <tg_> an iterator
2011-05-26 15:47:20 UTC <byorgey> what's the difference?  it's looping over a list of things and mutating them.
2011-05-26 15:47:28 UTC <tg_> you can't (or shouldn/'t?) write a *drawing* loop
2011-05-26 15:47:37 UTC <tg_> which is one step back (toward) your correct abstraction
2011-05-26 15:47:45 UTC <tg_> of describing what it should be, not how to draw it
2011-05-26 15:47:48 UTC <byorgey> ok, fair enough.
2011-05-26 15:48:01 UTC <tg_> whereas prototype explicity requires drawing loops
2011-05-26 15:49:25 UTC <tg_> byorgey: I was (ignorantly) considering trying to connect protovis as a backend to diagrams as a stopgap
2011-05-26 15:49:57 UTC <tg_> a key thing with my work (in haskell, and in general) is that I *always* want animated (& sometimes interactive) diagrams
2011-05-26 15:50:12 UTC <byorgey> yes, the interactivity yk (toward) your correct abstraction
2011-05-26 15:50:22 UTC <byorgey> er, sorry,
2011-05-26 15:50:41 UTC <byorgey> the interactivity you get with protovis et al is extremely nice
2011-05-26 15:51:05 UTC <tg_> byorgey: yes, some processing examples *really* shine
2011-05-26 15:51:09 UTC <tg_> and the raphael ones are nice enough
2011-05-26 15:51:27 UTC <tg_> byorgey: there's also ExtJS, which is made by the Sencha people (who pay the salary of the person who wrote raphael)
2011-05-26 15:51:27 UTC <byorgey> I think this sort of thing will eventually be possible with diagrams.
2011-05-26 15:51:36 UTC <tg_> I hope so, I hope I can have a hand in it
2011-05-26 15:52:00 UTC <tg_> but I have been clamoring for what I'm terming a "visual" or "visceral" isomorphism between haskell code and diagrams
2011-05-26 15:52:07 UTC <byorgey> however it's important to note that data visualization was not one of the primary drivers behind the design
2011-05-26 15:52:29 UTC <tg_> which is to say, I want something like a: deriving (Show2D)
2011-05-26 15:52:44 UTC <tg_> and/or even visual representations of type declerations, classes, signatures
2011-05-26 15:52:57 UTC <hpc> hmm, text seems to have forced me to redo my output code
2011-05-26 15:53:17 UTC <tg_> byorgey: one area that I think you might take particular inspiration
2011-05-26 15:53:21 UTC <hpc> i can't express text as an element with my current code, because it is "shaped" like a block
2011-05-26 15:53:29 UTC <tg_> byorgey: is the handling of textual information in protovis
2011-05-26 15:53:38 UTC <byorgey> tg_: ok, I'll take a look at it
2011-05-26 15:53:39 UTC <tg_> byorgey: where they are integrated using "anchors"
2011-05-26 15:53:53 UTC <byorgey> tg_: thanks for the tip
2011-05-26 15:54:04 UTC <hpc> ill work on this tomorrow, perhaps
2011-05-26 15:54:13 UTC <tg_> byorgey: I know I've heard a few people complain about the lack of annotation in Diagrams
2011-05-26 15:54:19 UTC <tg_> byorgey: not that they have a right to :O
2011-05-26 15:54:29 UTC <tg_> byorgey: http://vis.stanford.edu/protovis/docs/anchor.html
2011-05-26 15:55:45 UTC <byorgey> tg_: the lack of annotation? you mean text?
2011-05-26 15:56:00 UTC <tg_> byorgey: yes
2011-05-26 15:56:37 UTC <tg_> byorgey: it may be reasonable to think of "lifting" the TwoD space into a strictly augmented ThreeD space, where the third D only contains "anchors" (points) which serve as reference for text
2011-05-26 15:57:06 UTC <tg_> so the ThreeD space isn't really ThreeD, it's TwoD ++ text only
2011-05-26 15:57:25 UTC <byorgey> tg_: that doesn't really make sense to me
2011-05-26 15:57:27 UTC <tg_> where I use "lift" not in the monad sense, I think
2011-05-26 15:57:33 UTC <byorgey> tg_: anyway, diagrams has something like anchors already
2011-05-26 15:57:39 UTC <byorgey> now that I know what they are
2011-05-26 15:58:15 UTC <byorgey> you can always find out where the "boundary" of a diagram is in any direction
2011-05-26 15:58:26 UTC <byorgey> and it also supports having named points that you can refer to later
2011-05-26 15:58:38 UTC <tg_> byorgey: btw, even though I haven't exhaustively read it, the documentation in Diagrams is first class, so cheers for that
2011-05-26 15:58:42 UTC <byorgey> although the API for using this capability is not very well-developed yet
2011-05-26 15:58:49 UTC <byorgey> tg_: thanks =)
2011-05-26 15:58:56 UTC <byorgey> I care a lot about documentation.
2011-05-26 15:59:01 UTC <tg_> byorgey: i get *very* angry at packages without documentation in haskell
2011-05-26 15:59:04 UTC <tg_> it's just asking for trouble
2011-05-26 15:59:06 UTC <byorgey> me too.
2011-05-26 15:59:23 UTC <tg_> and you're essentially dooming your users to perpetual ignorance unless they write the code themselves
2011-05-26 16:00:00 UTC <tg_> I've begun to think that there is no other language in which it's more important to *understand* the tools (modules) you're working with than in haskell.
2011-05-26 16:00:11 UTC <tg_> In many other languages, you are encouraged to get by wtih using the tools without fully understanding them
2011-05-26 16:00:21 UTC <tg_> I think that's always a mistake in haskell, and I think conal would agree :)
2011-05-26 16:00:56 UTC <byorgey> =)
2011-05-26 16:00:58 UTC <tg_> it reminds me of the very wise words of Richard Feynman: "What I cannot create, I do not understand."
2011-05-26 16:02:16 UTC <tg_> that was the phrase at the top of his blackboard in his office, when he died
2011-05-26 16:02:24 UTC <tg_> in fact, it was probably there for at least several years before that
2011-05-26 16:03:44 UTC <tg_> anyway, to work!
2011-05-26 17:53:14 UTC <ClaudiusMaximus> i want to align my diagrams in a regular grid - what's the best way?
2011-05-26 17:54:36 UTC <byorgey> ClaudiusMaximus: probably the easiest is to use some combination of phantom and/or withBounds to make their bounding regions square, then compose them with hcat and vcat
2011-05-26 17:55:44 UTC <byorgey> ClaudiusMaximus: longer term, I'd like to have a 'grid' combinator in Diagrams.TwoD.Combinators, so if you come up with something nice we could incorporate your code
2011-05-26 17:56:32 UTC <hpc> i think you could do it as two folds
2011-05-26 17:57:02 UTC <hpc> fold the inner lists with (|||) and mempty (because those things are monoids, yes?)
2011-05-26 17:57:14 UTC <hpc> then fold the resulting list with (===)
2011-05-26 17:57:29 UTC <ClaudiusMaximus> i already used   vcat . map hcat  or similar
2011-05-26 17:57:35 UTC <hpc> or that
2011-05-26 17:57:59 UTC <ClaudiusMaximus> i think i'd want to get the extents of the largest diagram in the grid first, then expand it a bit for separation purposes, then withBounds . centerXY or something along those lines
2011-05-26 17:59:31 UTC <byorgey> hpc: vcat and hcat are essentially synonyms for folds with (===) and (|||)
2011-05-26 17:59:54 UTC <hpc> yeah, i figured
2011-05-26 18:00:23 UTC <byorgey> ClaudiusMaximus: yes, that sounds good
2011-05-26 18:01:14 UTC <byorgey> ClaudiusMaximus: withBounds (rect maxX maxY) . centerXY
2011-05-26 18:01:34 UTC <byorgey> where (rect x y) = square # scaleX x # scaleY y  -- this ought to be added to the std lib...
2011-05-26 18:08:10 UTC <ClaudiusMaximus> wow, got something working :)
2011-05-26 18:10:15 UTC <ClaudiusMaximus> http://claudiusmaximus.goto10.org/g/tilings/ammann-a3-grid.png http://hpaste.org/47097/diagram_grid
2011-05-26 18:12:38 UTC <byorgey> sweet!!
2011-05-26 18:13:59 UTC <byorgey> ClaudiusMaximus: by the way, taking the mconcat of all the bounds like that is probably less efficient than finding the maximum width/height and doing withBounds with a rectangle
2011-05-26 18:14:20 UTC <byorgey> although it is a bit more general if you wanted to put things in some arrangement other than a square grid
2011-05-26 18:14:29 UTC <luite> ClaudiusMaximus: nice
2011-05-26 18:14:38 UTC <luite> infinite tangram puzzles
2011-05-26 18:15:53 UTC <ClaudiusMaximus> :)
2011-05-26 18:15:54 UTC <luite> ClaudiusMaximus: can your program find all ways to tile the pieces?
2011-05-26 18:16:35 UTC <ClaudiusMaximus> it's deterministic, based on substitution rules (the top row are the seed prototiles, and the row below is after the first substitution
2011-05-26 18:16:53 UTC <byorgey> ClaudiusMaximus: and it's aperiodic, right?
2011-05-26 18:17:28 UTC <ClaudiusMaximus> i think this one is, http://tilings.math.uni-bielefeld.de/substitution_rules/ammann_a3
2011-05-26 18:18:36 UTC <byorgey> awesome
2011-05-26 18:18:55 UTC <byorgey> just out of curiosity, how long is the code to generate those?
2011-05-26 18:19:18 UTC <ClaudiusMaximus> is there a nice way to check if bounds intersect?  doesn't have to be perfectly accurate, but knowing if something is outside the viewport could save time subdividing that further...
2011-05-26 18:19:36 UTC <ClaudiusMaximus> i guess i can convert to rectangles and compare them
2011-05-26 18:20:20 UTC <byorgey> hmm, an intersection test for bounds is a nice idea
2011-05-26 18:20:39 UTC <byorgey> I will add it, although there's nothing to do it nicely at the moment
2011-05-26 18:20:50 UTC <ClaudiusMaximus> i saw there was an (eventually) for testing if paths intersect
2011-05-26 18:21:19 UTC <byorgey> yes, that would be much more accurate for path-based things
2011-05-26 18:21:29 UTC <byorgey> testing the bounds will always be an overapproximation
2011-05-26 18:21:44 UTC <byorgey> but testing paths for intersection is much more difficult
2011-05-26 18:22:07 UTC <luite> is there a non-approximate way to test intersection of bezier curves?
2011-05-26 18:22:13 UTC <hpc> yes
2011-05-26 18:22:41 UTC <hpc> not sure if there's an exact way that always terminates
2011-05-26 18:22:53 UTC <hpc> :P
2011-05-26 18:24:05 UTC <luite> termination might be useful in some code ;)
2011-05-26 18:25:18 UTC <hpc> http://www.truetex.com/bezint.htm
2011-05-26 18:25:26 UTC <hpc> ^ finding the intersections themselves
2011-05-26 18:26:21 UTC <hpc> ...which doesn't give an algorithm
2011-05-26 18:26:44 UTC <byorgey> "I am not going to reveal that unpublished algorithm here..."  =P
2011-05-26 18:28:22 UTC <luite> there's De Casteljau's algorithm on wikipedia
2011-05-26 18:28:34 UTC <luite> which recursively splits the curves
2011-05-26 18:29:20 UTC <luite> and then you can use bounding boxes for the halves or something like that
2011-05-26 18:30:20 UTC <hpc> and then you know the lines intersect when...?
2011-05-26 18:30:39 UTC <hpc> well, you know they don't intersect if you can get the bounding boxes to span the whole curve and not touch
2011-05-26 18:31:29 UTC <byorgey> I know de Casteljau but I've never heard of it being used to test intersection of two Bezier curves... then again, there's quite a lot I don't know =)
2011-05-26 18:32:14 UTC <luite> byorgey: oh I just found that on stackoverflow, apparently that's the method asymptote uses
2011-05-26 18:32:32 UTC <byorgey> oh, interesting! link?
2011-05-26 18:33:13 UTC <luite> http://stackoverflow.com/questions/4039229/checking-if-two-cubic-bezier-curves-intersect
2011-05-26 18:33:34 UTC <luite> but that algorithm doesn't really check intersection, step 2
2011-05-26 18:33:41 UTC <luite> I have the feeling that it must be possible to do better
2011-05-26 18:35:53 UTC <hpc> that top answer is awesome
2011-05-26 18:38:11 UTC <luite> if you can somehow make a bounding box of parts of the two curves, and the intersection points of the curves with the box alternate when you walk around the box clockwise, then they must intersect
2011-05-26 18:39:18 UTC <hpc> not even that!
2011-05-26 18:39:30 UTC <hpc> or rather, you can get more general
2011-05-26 18:39:49 UTC <luite> probably, show me :)
2011-05-26 18:39:58 UTC <hpc> crap, i need pictures
2011-05-26 18:39:59 UTC <hpc> sec
2011-05-26 18:41:13 UTC <hpc> so
2011-05-26 18:41:14 UTC <hpc> http://dl.dropbox.com/u/37707/1.png
2011-05-26 18:41:32 UTC <hpc> suppose you have a blue curve and a red curve, as pictured
2011-05-26 18:42:15 UTC <luite> haha
2011-05-26 18:42:27 UTC <luite> what order are those? ;)
2011-05-26 18:42:43 UTC <hpc> who cares, so long as they hit their respective corners
2011-05-26 18:42:44 UTC <hpc> anyhoo
2011-05-26 18:42:49 UTC <hpc> http://dl.dropbox.com/u/37707/2.png
2011-05-26 18:42:55 UTC <hpc> the bounding boxes intersect like that
2011-05-26 18:43:00 UTC <luite> but you're right, if you just take the union of the bounding boxes
2011-05-26 18:43:16 UTC <luite> of any compact region :p
2011-05-26 18:44:09 UTC <hpc> yes, but not what i meant to say, and god i suck at explaining things
2011-05-26 18:44:15 UTC <luite> oh
2011-05-26 18:44:18 UTC <hpc> lol
2011-05-26 18:44:21 UTC <luite> well at least you have nice pictures
2011-05-26 18:44:34 UTC <hpc> lemme try again...
2011-05-26 18:45:04 UTC <luite> ooh
2011-05-26 18:45:08 UTC <luite> I think I see what you mean
2011-05-26 18:45:34 UTC <luite> oh no I don't
2011-05-26 18:45:36 UTC <luite> I was wrong
2011-05-26 18:45:39 UTC <luite> :p
2011-05-26 18:45:57 UTC <hpc> http://dl.dropbox.com/u/37707/1.png
2011-05-26 18:46:00 UTC <hpc> THERE we go
2011-05-26 18:46:09 UTC <luite> yes
2011-05-26 18:46:25 UTC <luite> so I was right after all ;p
2011-05-26 18:46:28 UTC <luite> :D
2011-05-26 18:46:45 UTC <luite> that's what I thought you meant
2011-05-26 18:46:49 UTC <byorgey> we need to have a diabot
2011-05-26 18:46:52 UTC <hpc> yeah, you can take advantage of the fact that there exists a point on the bezier curve for all x
2011-05-26 18:46:57 UTC <hpc> and blahblah for all y
2011-05-26 18:47:10 UTC <byorgey> you type diagrams code in the IRC channel and it posts the output to some image hosting site somewhere
2011-05-26 18:47:15 UTC <hpc> so if you can construct a pair of BB like that, you can say there MUST be an intersection
2011-05-26 18:47:16 UTC <luite> hpc: yeah but that only works if the bounding boxes have some guaranteed approximation accuracy
2011-05-26 18:47:50 UTC <hpc> ah right, good point
2011-05-26 18:48:10 UTC <hpc> and you can't compare two arbitrary precision numbers for > or <
2011-05-26 18:48:18 UTC <hpc> not in guaranteed finite time
2011-05-26 18:49:14 UTC <luite> but you could just run the check for finite time, if it doesn't return, you recurse with smaller boxes
2011-05-26 18:49:28 UTC <hpc> or translated boxes
2011-05-26 18:49:42 UTC <hpc> just pick different points until they are different enough
2011-05-26 18:50:02 UTC <luite> it doesn't seem terribly practical to build an algorithm out of this though
2011-05-26 18:50:12 UTC <hpc> not really
2011-05-26 18:50:38 UTC <hpc> i like your idea better
2011-05-26 18:50:59 UTC <hpc> build a BB out of points from the curves, and check what order the points go in
2011-05-26 18:51:07 UTC <luite> we could reddit both and see who gets the most upvotes ;)
2011-05-26 18:51:21 UTC <hpc> ACTION doesn't reddit
2011-05-26 18:51:55 UTC <hpc> wait, problem
2011-05-26 18:52:29 UTC <hpc> http://dl.dropbox.com/u/37707/Untitled.png
2011-05-26 18:52:40 UTC <hpc> that bounding box meets the condition, but the curves don't intersect
2011-05-26 18:52:46 UTC <luite> not exactly a bounding box right?
2011-05-26 18:52:49 UTC <hpc> er
2011-05-26 18:52:52 UTC <hpc> oh, derp
2011-05-26 18:54:42 UTC <hpc> this is so strange
2011-05-26 18:54:57 UTC <hpc> i just finished math 446, which covers bezier curves
2011-05-26 18:55:02 UTC <hpc> and now they are everywhere
2011-05-26 18:55:53 UTC <byorgey> haha, that always happens to me too
2011-05-26 18:56:07 UTC <hpc> i think i see what this algorithm would be now, i think
2011-05-26 18:56:38 UTC <hpc> subdivide each bezier curve so the axis-aligned bounding box at all points intersects the curve at opposite corners
2011-05-26 18:56:49 UTC <hpc> (aka, split where slope is 0 or infinity)
2011-05-26 18:58:10 UTC <hpc> then do your thing, recursively shrinking the bounding boxes until they either don't intersect, or until there exists a bounding box that the two curves have in common
2011-05-26 18:59:09 UTC <luite> bah I've never had bezier math :(
2011-05-26 18:59:51 UTC <hpc> it's a hard class
2011-05-26 19:45:01 UTC <luite> who's going to come to CamHac? :)
2011-05-26 19:46:00 UTC <alpounet> wish i could
2011-05-26 19:46:03 UTC <alpounet> :/
2011-05-26 19:46:38 UTC <luite> at least it's closer than HacPhi
2011-05-26 19:46:51 UTC <luite> for me :p
2011-05-26 19:48:08 UTC <byorgey> luite: I wish I could come to CamHac too, but had already planned to go on vacation with my family during that time
2011-05-26 19:48:32 UTC <luite> aw :(
2011-05-26 19:48:50 UTC <luite> don't they enjoy haskell hacking? ;)
2011-05-26 19:48:51 UTC <byorgey> also my wife might not want me traveling across the ocean when she is eight months pregnant ;)
2011-05-26 19:49:16 UTC <byorgey> luite: my brother-in-law does, but not really any of the rest of them =)
2011-05-26 19:49:19 UTC <luite> oh cool. first child?
2011-05-26 19:49:22 UTC <byorgey> yes =D
2011-05-26 19:49:47 UTC <luite> for some reason that reminds me of the DOM manipulation API
2011-05-26 19:50:02 UTC <byorgey> ...?
2011-05-26 19:50:05 UTC <byorgey> which part?
2011-05-26 19:50:32 UTC <luite> node.firstChild
2011-05-26 19:50:35 UTC <luite> .nextSibling :p
2011-05-26 19:51:43 UTC <byorgey> hehe
2011-05-26 19:52:45 UTC <byorgey> hmm, should I have commit messages sent to the diagrams-discuss mailing list?  Or maybe I should make a separate diagrams-devel list for that sort of thing?
2011-05-26 19:54:28 UTC <alpounet> wait what
2011-05-26 19:54:33 UTC <alpounet> congrats byorgey!
2011-05-26 19:54:45 UTC <byorgey> thanks alpounet =)
2011-05-26 19:55:05 UTC <alpounet> i guess you're gonna be the 'cool' kind of father
2011-05-26 19:55:12 UTC <alpounet> heh
2011-05-26 19:55:34 UTC <byorgey> hehe, thanks
2011-05-26 19:55:57 UTC <alpounet> soooo
2011-05-26 19:56:03 UTC <alpounet> once i'll be done with my undergrad thesis
2011-05-26 19:56:08 UTC <alpounet> i'll play with diagrams more seriously
2011-05-26 19:56:27 UTC <alpounet> what's up since the pre-release ?
2011-05-26 19:58:09 UTC <byorgey> alpounet: we have a nice-ish website now with a gallery of examples, hpc is working on an SVG package that could form the basis of a native SVG backend, I've added various bits of functionality here and there...
2011-05-26 19:58:32 UTC <byorgey> and several people have already done some cool things with it
2011-05-26 20:00:00 UTC <alpounet> cool
2011-05-26 20:09:13 UTC <byorgey> alpounet: what's your thesis about?
2011-05-26 20:10:40 UTC <alpounet> a link between continued fractions and hyperbolic geometry
2011-05-26 20:10:52 UTC <byorgey> ooh, very cool
2011-05-26 20:11:13 UTC <byorgey> I studied a bit about both those subjects in undergrad
2011-05-26 20:11:30 UTC <byorgey> although I don't remember if I learned about any links between the two
2011-05-26 20:12:04 UTC <alpounet> well
2011-05-26 20:13:30 UTC <alpounet> to sum up, both ends of some geodesics related to isometries of the upper-half hyperbolic plane have specific continued fraction developments
2011-05-26 20:14:17 UTC <byorgey> ok, that makes sense on a high level
2011-05-26 20:14:58 UTC <byorgey> you'll have to send me a copy of your thesis once you're done =)
2011-05-26 20:15:32 UTC <alpounet> sure
2011-05-26 20:15:36 UTC <alpounet> as long as you read French :]
2011-05-26 20:16:21 UTC <byorgey> oh, haha, I don't, sadly
2011-05-26 20:16:43 UTC <byorgey> if you have pretty pictures I could just look at those ;)
2011-05-26 20:16:47 UTC <luite> hmm, how difficult is the french?
2011-05-26 20:17:33 UTC <luite> lots of difficult arguments, or is it easy to follow from the equations?
2011-05-26 20:17:50 UTC <alpounet> well
2011-05-26 20:17:52 UTC <alpounet> for now
2011-05-26 20:17:56 UTC <alpounet> nothing really complicated
2011-05-26 20:18:04 UTC <alpounet> i'm writing about infinite continued fractions right now
2011-05-26 20:18:19 UTC <luite> hmm, probably still too complicated for me :)
2011-05-26 20:18:30 UTC <alpounet> thus i don't know yet how easy it'll be to guess what i'm telling about hyperbolic geometry :P
2011-05-26 20:20:38 UTC <luite> are french math terms often similar to the english ones?
2011-05-26 20:21:14 UTC <alpounet> yeah, a lot of similarities
2011-05-26 20:24:21 UTC <luite> hmm, at least I can understand most of the french wikipedia article about continued fractions, but that's fairly basic material of course :)
2011-05-26 20:26:21 UTC <alpounet> well, continued fractions are quite simple anyway
2011-05-26 20:41:59 UTC <tg_> alpounet: what kind of hyperbolic geometry are you working with>?
2011-05-26 20:42:50 UTC <alpounet> PoincarÃ©'s upper half plane
2011-05-26 20:43:08 UTC <tg_> H3 hyperbolid model?
2011-05-26 20:43:14 UTC <alpounet> studying the action of PSL(2,Z) on the fundamental domain of PoincarÃ©'s upper half plane
2011-05-26 20:43:20 UTC <alpounet> (among other things)
2011-05-26 20:43:28 UTC <tg_> you working with a fractal?
2011-05-26 20:43:29 UTC <tg_> or?
2011-05-26 20:43:32 UTC <alpounet> nope :P
2011-05-26 20:43:38 UTC <alpounet> seems like you're a lot into fractals
2011-05-26 20:44:03 UTC <tg_> well a lot of interesting congruences in PSL2,Z are fractal
2011-05-26 20:44:23 UTC <tg_> someone recently proved a general statement about zariski density in that space
2011-05-26 20:44:43 UTC <tg_> can't think of his name
2011-05-26 20:46:59 UTC <tg_> http://imrn.oxfordjournals.org/content/2010/19/3649.abstract
2011-05-26 20:48:06 UTC <alpounet> don't have the level to understand this yet :P
2011-05-26 21:16:41 UTC <byorgey> haha, I went to find the function to look up a named point in a diagram, and I couldn't find it
2011-05-26 21:16:49 UTC <byorgey> I was pretty sure I had added one...
2011-05-26 21:17:08 UTC <byorgey> then I found withName :: HasLinearMap v => Name -> (Point v -> AnnDiagram b v m -> AnnDiagram b v m) -> AnnDiagram b v m -> AnnDiagram b v m
2011-05-26 21:17:40 UTC <byorgey> I don't remember adding it but it's pretty cool =D
2011-05-26 21:18:14 UTC <byorgey> and way better than the function I thought I had added
2011-05-26 21:22:02 UTC <byorgey> check it out: http://hpaste.org/47104/referring_to_named_points_in_a  http://www.cis.upenn.edu/~byorgey/Connect.png
2011-05-26 22:05:23 UTC <tg_> luite: any progress to report, good sir?
2011-05-26 22:10:13 UTC <luite> tg_: not much to see since I still need to redo security before I online it again
2011-05-26 22:13:12 UTC <luite> tg_: but the basic customization of gitit is almost done (that is, you can import a page for example /wiki/Diagrams/Tutorial as Wolfgang.Diagrams.Tutorial in other pages, you can upload png images etc, /wiki/Spj.png would be available as spj in Wolfgang.Spj, ByteString, every user has a home dir /Users/Username where only that user and admins can create and edit pages
2011-05-26 22:13:31 UTC <luite> a public dir /Scratch where everyone can create pages without logging in, and the rest are regular dirs
2011-05-26 22:15:32 UTC <luite> but I'm a bit unhappy that .lhs doesn't work nicely together with markdown
2011-05-26 22:16:12 UTC <tg_> luite: i thought that was the whole damn point of the markdown work in gitit?
2011-05-26 22:16:35 UTC <luite> well, markdown syntax just clashes with .lhs
2011-05-26 22:16:57 UTC <luite> you can't start a line in a .lhs with ## for example, while that's used for headings in markdown
2011-05-26 22:17:14 UTC <luite> and blockquotes with > obviously aren't going to work
2011-05-26 22:19:44 UTC <luite> if all goes well, I only to patch a few lines of gitit source
2011-05-26 22:20:01 UTC <luite> for the modifications mentioned above
2011-05-26 22:20:07 UTC <tg_> what about <code> html tags?
2011-05-26 22:20:12 UTC <tg_> and no >
2011-05-26 22:20:28 UTC <tg_> i'm sure you've thought of everything
2011-05-26 22:20:39 UTC <luite> hehe not at all :p
2011-05-26 22:20:51 UTC <tg_> luite: well, I'm sure you've thought of all of the simple solutions
2011-05-26 22:21:27 UTC <tg_> I read somewhere that when using .lhs syntax, you need spaces before and after birdbeaks ">" anyway
2011-05-26 22:21:45 UTC <luite> only after I think
2011-05-26 22:22:08 UTC <tg_> "In Bird-style you have to leave a blank before the code."
2011-05-26 22:22:11 UTC <tg_> at
2011-05-26 22:22:21 UTC <luite> yeah that's after the > :)
2011-05-26 22:22:35 UTC <tg_> And you have to leave a blank line after the code as well.
2011-05-26 22:22:40 UTC <luite> yes I know
2011-05-26 22:22:46 UTC <tg_> isn't that "before and after"?
2011-05-26 22:22:53 UTC <tg_> i am quoting from
2011-05-26 22:22:55 UTC <luite> oh I use before and after
2011-05-26 22:22:57 UTC <tg_> http://www.haskell.org/haskellwiki/Literate_programming
2011-05-26 22:24:14 UTC <luite> anyway I can work around the ### issue by preprocessing the files, don't know about the blockquote thing though, you can also make a blockquote in markdown by indenting 4 spaces
2011-05-26 22:24:26 UTC <tg_> :/
2011-05-26 22:24:39 UTC <tg_> i always get weary of things like that, even though I want to impose similar kinds of things on my own code standsards
2011-05-26 22:24:42 UTC <luite> yes, especially for multiple levels of quoting
2011-05-26 22:24:44 UTC <tg_> s/standsards/standards/
2011-05-26 22:24:56 UTC <luite> I really want to support full markdown in the text cells
2011-05-26 22:25:06 UTC <tg_> I don't see what the big fuss about markdown is, though
2011-05-26 22:25:29 UTC <luite> what else? it's simpler than the alternatives
2011-05-26 22:25:54 UTC <tg_> it is, but strictly in the you're-already-using-ascii sense
2011-05-26 22:26:06 UTC <tg_> is pandoc fast? any idea?
2011-05-26 22:26:27 UTC <luite> dunno fast enough for saving pages probably :)
2011-05-26 22:27:12 UTC <tg_> i may drop out here... tornados and thunderstorms galore around here
2011-05-26 22:27:32 UTC <tg_> wish me well! :o
2011-05-26 22:29:00 UTC <tg_> gonna go ahead nd shutdown
2011-05-27 01:11:50 UTC <hpc> hpc's CMS template postulate: unambiguous, easy to use, powerful: pick any two
2011-05-27 01:13:04 UTC <byorgey> heh, that makes a lot of sense
2011-05-27 01:13:17 UTC <byorgey> with diagrams I have tried to go with "easy to use" and "powerful"
2011-05-27 01:13:30 UTC <byorgey> and I am literally struggling with "ambiguous type" errors =P
2011-05-27 01:13:40 UTC <hpc> i think i hit unambiguous + easy
2011-05-27 01:13:55 UTC <hpc> you can always make things more powerful after the fact
2011-05-27 01:14:21 UTC <byorgey> I don't think that's true
2011-05-27 01:14:22 UTC <hpc> but it's very hard to recover from ambiguity, or superfluous complexity
2011-05-27 01:14:38 UTC <hpc> well, you can do it more easily
2011-05-27 01:15:04 UTC <byorgey> "making things more powerful after the fact" usually leads to horrible complex design with stuff bolted on all over the place
2011-05-27 01:15:40 UTC <hpc> it's still easier to do, in small amounts
2011-05-27 01:15:42 UTC <tg_> ACTION casts a one-third valued vote for byorgey in this disagreement
2011-05-27 01:16:15 UTC <hpc> to recover from ambiguity is very hard, even for minor things
2011-05-27 01:16:30 UTC <tg_> hm. the source code for lambdabot has an embarrasingly frequent number of references to blowjobs
2011-05-27 01:16:43 UTC <byorgey> what
2011-05-27 01:16:43 UTC <hpc> :D
2011-05-27 01:16:53 UTC <tg_> https://github.com/seliopou/lambdabot/blob/master/State/vixen
2011-05-27 01:17:08 UTC <hpc> oh god the line endings
2011-05-27 01:17:15 UTC <tg_> yeah i don't know what's up with that
2011-05-27 01:18:29 UTC <tg_> i also don't understand why the contents of "quote" are so messed up
2011-05-27 01:20:16 UTC <tg_> byorgey: yeah, but as I said, embarassingly many
2011-05-27 01:22:19 UTC <luite> ah you survived the storm, good :)
2011-05-27 01:22:30 UTC <tg_> luite: indeed, though several people did not :(
2011-05-27 01:22:37 UTC <luite> :(
2011-05-27 01:22:42 UTC <tg_> at least 4 more dead today in my state
2011-05-27 01:22:42 UTC <hpc> :(
2011-05-27 01:22:53 UTC <tg_> these strings of tornados have been brutal
2011-05-27 01:23:10 UTC <tg_> and many of them are all-time record holders - 200+ mph winds (for several of them)
2011-05-27 01:23:17 UTC <tg_> some of them have been more than 2 miles in diameter
2011-05-27 01:23:24 UTC <hpc> 2 MILES?
2011-05-27 01:23:26 UTC <tg_> yeah
2011-05-27 01:23:28 UTC <tg_> i know
2011-05-27 01:23:33 UTC <tg_> it sounds wrong, but it's not
2011-05-27 01:23:34 UTC <hpc> how the fuck wide can a tornado get?
2011-05-27 01:23:40 UTC <tg_> that's about it, as far as we know
2011-05-27 01:23:46 UTC <hpc> wow
2011-05-27 01:23:50 UTC <hpc> class over, bbl
2011-05-27 13:26:56 UTC <manju_> .
2011-05-27 13:27:11 UTC <luite> byorgey: http://hpaste.org/47137/type_error
2011-05-27 13:27:19 UTC <byorgey> cabal install GLUT is doing its magic...
2011-05-27 13:27:40 UTC <manju_> byorgey, yes...that would work too
2011-05-27 13:28:28 UTC <byorgey> luite: ah, yes, I added some stuff to the cairo backend for manju_
2011-05-27 13:28:41 UTC <byorgey> so I think you have to use the darcs version
2011-05-27 13:28:45 UTC <luite> oh ok
2011-05-27 13:29:53 UTC <byorgey> compile compile compile
2011-05-27 13:30:10 UTC <luite> oh that means that I also need the darcs from -core and -lib
2011-05-27 13:30:14 UTC <byorgey> yeah
2011-05-27 13:31:15 UTC <luite> keeps my cpu busy :)
2011-05-27 13:31:33 UTC <luite> whoah
2011-05-27 13:31:34 UTC <luite> err
2011-05-27 13:31:38 UTC <byorgey> ?
2011-05-27 13:31:40 UTC <luite> that looks like a snowflake
2011-05-27 13:31:43 UTC <luite> not a sierpinski
2011-05-27 13:31:43 UTC <manju_> my first opengl program in years
2011-05-27 13:31:53 UTC <manju_> luite, I changed it from 5 to 6 :-)
2011-05-27 13:32:05 UTC <manju_> pentaflake' is actuall hxaflake'
2011-05-27 13:32:10 UTC <manju_> hexaflake'
2011-05-27 13:32:13 UTC <manju_> heh
2011-05-27 13:32:17 UTC <byorgey> manju_: haha, awesome!
2011-05-27 13:32:21 UTC <luite> but it works, very nice :)
2011-05-27 13:32:27 UTC <luite> (on windows even)
2011-05-27 13:32:28 UTC <byorgey> I just got it to run too
2011-05-27 13:32:32 UTC <manju_> was trying to show my wife that programming was :-)
2011-05-27 13:32:39 UTC <manju_> s/that/what
2011-05-27 13:32:40 UTC <luite> the frame rate is low, is that due to diagrams, or do you limit it?
2011-05-27 13:33:05 UTC <manju_> luite, I am not limiting it
2011-05-27 13:33:22 UTC <luite> oh I'd estimate it only runs at 10fps here
2011-05-27 13:33:38 UTC <byorgey> I'm not surprised, diagrams isn't really designed for doing real-time animations
2011-05-27 13:33:52 UTC <byorgey> although there is almost certainly a lot of room for optimization.
2011-05-27 13:34:17 UTC <luite> lots of specialize and inline pragma's ;)
2011-05-27 13:34:28 UTC <byorgey> hehe
2011-05-27 13:35:08 UTC <manju_> 30 fps ought to be enough for anyone :-)
2011-05-27 13:35:55 UTC <luite> does it run faster on your system?
2011-05-27 13:36:50 UTC <manju_> luite, I don't know the FPS, mine is a ATI 5870, but it still seems kinda jerky
2011-05-27 13:37:09 UTC <luite> yeah my card is old, ati x1900
2011-05-27 13:37:11 UTC <manju_> luite, it maybe due to me changing the angle by a huge amount (1/6) * 360
2011-05-27 13:37:17 UTC <luite> oh right
2011-05-27 13:37:46 UTC <luite> but it still uses 100% cpu on a single core
2011-05-27 13:37:48 UTC <byorgey> mine runs at about 2 fps
2011-05-27 13:37:49 UTC <manju_> luite, maybe if I modified it to move a lesser angle it might probably look better
2011-05-27 13:37:56 UTC <manju_> byorgey, heh
2011-05-27 13:38:13 UTC <luite> hehe how do you time that?
2011-05-27 13:38:14 UTC <manju_> wow
2011-05-27 13:38:28 UTC <byorgey> uh, I just counted =)
2011-05-27 13:38:34 UTC <luite> hehe
2011-05-27 13:38:42 UTC <luite> ok, it runs slightly too fast for that here
2011-05-27 13:39:04 UTC <manju_> yeah, mine is not slow enough to count manually
2011-05-27 13:39:24 UTC <luite> put I guess it's just cpu limited
2011-05-27 13:39:46 UTC <luite> any old gfx card should be able to render a few triangles with a single texture faster than this
2011-05-27 13:40:22 UTC <byorgey> manju_: so is diagrams actually rendering the pentaflake for each frame?
2011-05-27 13:40:29 UTC <manju_> byorgey, yes
2011-05-27 13:40:56 UTC <manju_> luite, surely, gears runs at like 20000+ fps on my box, this is definitely slow
2011-05-27 13:41:22 UTC <byorgey> it would be a lot faster to generate the pentaflake once, then set up a 3d object with this as a texture and rotate the object
2011-05-27 13:41:31 UTC <manju_> rather that should 2000 not 20000
2011-05-27 13:41:34 UTC <manju_> 2223.800 FPS
2011-05-27 13:41:54 UTC <manju_> byorgey, but my target was to do some sort of traffic simulator
2011-05-27 13:42:20 UTC <manju_> byorgey, I can't do this for that
2011-05-27 13:42:58 UTC <luite> hmm, there was some traffic simulator demo in one of the hackage packages
2011-05-27 13:43:08 UTC <luite> don't remember which one
2011-05-27 13:43:14 UTC <luite> or if it even was hackage :)
2011-05-27 13:43:36 UTC <manju_> luite, traffic as in real vehicle traffic
2011-05-27 13:43:52 UTC <manju_> luite, not network packet traffic
2011-05-27 13:43:53 UTC <luite> yeah that one was just a toy example to demonstrate a gui
2011-05-27 13:43:59 UTC <manju_> luite, ah...ok
2011-05-27 13:44:02 UTC <luite> oh yes I meant vehicle traffic
2011-05-27 13:44:14 UTC <manju_> luite, I would be interested in it
2011-05-27 13:44:17 UTC <luite> "cars" were driving around in circles and you could slow some of them down
2011-05-27 13:44:28 UTC <manju_> but byorgey can use this to optimize :-)
2011-05-27 13:44:36 UTC <manju_> luite, hmm...interesting
2011-05-27 13:45:32 UTC <byorgey> manju_: sounds cool
2011-05-27 13:45:55 UTC <manju_> byorgey, yeah I am stuck in the traffic 3 hours a day
2011-05-27 13:46:07 UTC <byorgey> haha, ouch
2011-05-27 13:46:09 UTC <manju_> byorgey, I want to see if I can model how to make it better
2011-05-27 13:46:19 UTC <manju_> byorgey, yeah...I know
2011-05-27 13:46:20 UTC <luite> haha
2011-05-27 13:46:27 UTC <manju_> haha
2011-05-27 13:46:33 UTC <byorgey> if you can model how the actions of a single car can make it better?
2011-05-27 13:46:46 UTC <luite> you should teach all other drivers how to react
2011-05-27 13:47:13 UTC <manju_> byorgey, not really I see that traffic pretty much follows a pattern of cars being connected by springs (mass spring model)
2011-05-27 13:47:14 UTC <byorgey> I am imagining manju_ driving with his traffic simulator running on a laptop in the passenger seat
2011-05-27 13:47:21 UTC <manju_> byorgey, haha
2011-05-27 13:47:42 UTC <byorgey> the laptop says, "calculating... calculating... TURN HARD LEFT RIGHT NOW"
2011-05-27 13:47:48 UTC <luite> manju_: hmm, I thought it was in gloss, but I can't find it
2011-05-27 13:47:55 UTC <manju_> ...and then I hit a tree
2011-05-27 13:48:15 UTC <byorgey> well, there are a few bugs to be worked out of the simulator
2011-05-27 13:48:20 UTC <manju_> luite, that is ok, if you stumble upon it, I can pick it up on the channel
2011-05-27 13:48:24 UTC <manju_> byorgey, hehe...
2011-05-27 13:48:43 UTC <luite> your process doesn't exit if I close the window by the way
2011-05-27 13:48:44 UTC <manju_> this was my first program in years...
2011-05-27 13:48:53 UTC <manju_> luite, that is a bug
2011-05-27 13:48:55 UTC <luite> althoguh that might be a problem with the version of freeglut I use
2011-05-27 13:48:57 UTC <luite> oh ok
2011-05-27 13:49:20 UTC <manju_> hmmm...it exits in mine though
2011-05-27 13:49:42 UTC <luite> do you use windows?
2011-05-27 13:49:53 UTC <manju_> luite, no ubuntu
2011-05-27 13:51:37 UTC <manju_> ok I am off for now, got to take my kid and wife out
2011-05-27 13:51:46 UTC <manju_> talk to you guys later
2011-05-27 13:52:02 UTC <byorgey> ok, bye manju_
2011-05-27 13:52:12 UTC <manju_> byorgey, thanks again
2011-05-27 13:52:23 UTC <byorgey> sure
2011-05-27 13:52:50 UTC <d13724> hi diagraming people
2011-05-27 13:53:00 UTC <byorgey> hi d13724
2011-05-27 13:53:44 UTC <d13724> byorgey, I have another question but on diagrams this time
2011-05-27 13:53:46 UTC <byorgey> trying to produce images from your geometry lib? =)
2011-05-27 13:54:06 UTC <byorgey> sure, ask away
2011-05-27 13:54:41 UTC <d13724> yeah one day when I manage to chose a design and start coding it'd be nice if it could draw
2011-05-27 13:55:43 UTC <d13724> my question is about the scope of diagrams (haven't really tried it yet), does it 'only' draw or is there some geometry functions ?
2011-05-27 13:56:32 UTC <byorgey> d13724: there is a bit of geometry, but it depends what you are looking for.
2011-05-27 13:58:19 UTC <d13724> basically I'm thinking of Asymptote + it's geometry module, for example: take a line, make a perpendicular trough a point, then draw both lines and their intersection
2011-05-27 13:58:19 UTC <byorgey> d13724: what sorts of functions are you interested in?
2011-05-27 13:58:32 UTC <byorgey> ok, I see
2011-05-27 13:59:15 UTC <byorgey> It should be pretty easy to add that kind of stuff, and I hope to add it eventually
2011-05-27 13:59:44 UTC <byorgey> but it doesn't have that sort of thing at the moment
2011-05-27 14:07:14 UTC <d13724> ok
2011-05-27 14:29:48 UTC <d13724> byorgey, thanks for the answer, I'll try diagrams and maybe come back here with more questions
2011-05-27 14:30:04 UTC <byorgey> ok.
2011-05-27 14:30:05 UTC <d13724> answerS, even
2011-05-27 15:18:15 UTC <ClaudiusMaximus> still trying to figure out how to test if two diagrams are disjoint - if i could find the vector between the two local origins then i could check whether the Bounds overlap in that direction...
2011-05-27 15:24:03 UTC <byorgey> ClaudiusMaximus: hmm, so these are two diagrams that you have already composed into one diagram somehow?
2011-05-27 15:24:15 UTC <byorgey> and now you want to find whether the subpieces are disjoint?
2011-05-27 15:25:38 UTC <byorgey> or is it just two separate diagrams you have?
2011-05-27 15:25:40 UTC <ClaudiusMaximus> byorgey: ah, i suppose so (i guess it doesn't make sense to think of it without that composition)
2011-05-27 15:26:08 UTC <byorgey> right, otherwise there is no particular relationship between the two local origins
2011-05-27 15:26:09 UTC <ClaudiusMaximus> byorgey: they are separate, but will be composed with atop
2011-05-27 15:26:22 UTC <byorgey> oh, ok, that makes it easier
2011-05-27 15:27:03 UTC <byorgey> hmm, let me think
2011-05-27 15:27:05 UTC <ClaudiusMaximus> and i guess atop will force the local origins to be identical?
2011-05-27 15:27:21 UTC <byorgey> right
2011-05-27 15:28:20 UTC <byorgey> hmm, actually, perhaps it is not quite as easy as I thought
2011-05-27 15:28:31 UTC <ClaudiusMaximus> which doesn't exactly help because the 0 vector has no direction
2011-05-27 15:28:36 UTC <byorgey> right
2011-05-27 15:29:01 UTC <byorgey> so presumably these two diagrams have been translated in some way so that "atop" won't necessarily put them directly on top of each other
2011-05-27 15:29:05 UTC <ClaudiusMaximus> yes
2011-05-27 15:29:15 UTC <byorgey> so do you know where the "used to" be?
2011-05-27 15:29:19 UTC <byorgey> where *they
2011-05-27 15:30:07 UTC <byorgey> ah, wait
2011-05-27 15:30:08 UTC <ClaudiusMaximus> sort of - i have the initial position and a Transformation
2011-05-27 15:30:30 UTC <byorgey> would it be sufficient to construct a bounding box for each and test for intersection of those?
2011-05-27 15:30:34 UTC <byorgey> because that is not difficult
2011-05-27 15:31:39 UTC <ClaudiusMaximus> yeah that would be fine in this case
2011-05-27 15:31:52 UTC <byorgey> use boundary unitX, boundary (negateV unitX), boundary unitY, etc. on each to get the coordinates of the boxes
2011-05-27 15:32:12 UTC <ClaudiusMaximus> cool
2011-05-27 15:32:54 UTC <byorgey> that's something else that should be added to the standard library, but not too hard to do it manually for now
2011-05-27 15:32:57 UTC <ClaudiusMaximus> is there a way to clip diagrams?
2011-05-27 15:33:07 UTC <byorgey> no, not currently.
2011-05-27 15:33:27 UTC <byorgey> wouldn't be too hard to add for backends that support clipping though.
2011-05-27 15:33:37 UTC <ClaudiusMaximus> ah.  clipping to a rectangle is what i'll need at the final stage to avoid ragged edges...
2011-05-27 15:33:52 UTC <byorgey> ok. I will add it for you =)
2011-05-27 15:35:15 UTC <byorgey> ClaudiusMaximus: would it be sufficient to just have a single "clipping path" as an attribute?
2011-05-27 15:35:37 UTC <byorgey> if it's just a rectangle I guess that should be fine.
2011-05-27 15:36:31 UTC <ClaudiusMaximus> byorgey: well, i can imagine things like wanting to have a textured background covering everything, then clipped to show through arbitrary shapes
2011-05-27 15:37:53 UTC <byorgey> ok. I'll have to look into what, say, cairo can do with clipping, and figure out the best API for supporting it
2011-05-27 15:38:13 UTC <byorgey> but it should be very easy (probably about 15 minutes of hacking) to get something simple working
2011-05-27 15:39:19 UTC <fryguybob> Is this clipping going to change the bounds for a diagram?
2011-05-27 15:42:19 UTC <ClaudiusMaximus> i guess (bounds $ x `clippedBy` y) should be (bounds y), as i don't know if pointwise minimum would work
2011-05-27 15:44:37 UTC <ClaudiusMaximus> could make it a choice - you could always do  withBounds x (x `clippedBy` y) if you didn't like it?
2011-05-27 15:45:57 UTC <ClaudiusMaximus> maybe pointwise minimum would work but it breaks my head thinking about it
2011-05-27 15:50:15 UTC <byorgey> ClaudiusMaximus: why wouldn't pointwise minimum work?
2011-05-27 15:50:40 UTC <byorgey> fryguybob: I hadn't thought about it.  I suppose you should be able to choose?
2011-05-27 15:51:00 UTC <byorgey> kind of depends what you are using the clipping for I guess
2011-05-27 15:51:44 UTC <ClaudiusMaximus> byorgey: i suppose all bounds are convex, then the intersection of two convex regions is always convex (needs a proof maybe?)
2011-05-27 15:51:45 UTC <fryguybob> Yeah.
2011-05-27 15:52:43 UTC <ClaudiusMaximus> maybe have two names, perhaps clippedBy and clippedTo
2011-05-27 15:53:24 UTC <ClaudiusMaximus> where bounds (x`clippedBy`y) = bounds x, bounds (x`clippedTo`y) = bounds y ?
2011-05-27 15:53:42 UTC <byorgey> well, those two names in particular give me no intuition as to which does which, but yes, having two different clipping functions could work
2011-05-27 15:54:06 UTC <byorgey> hmm, actually, maybe they do
2011-05-27 15:57:32 UTC <ClaudiusMaximus> i need a better name for   data TreeFilterThing = Discard | Keep | KeepAllRecursive   (or maybe i should just use Maybe Bool ..)
2011-05-27 15:59:42 UTC <byorgey> anything but Maybe Bool
2011-05-27 16:00:54 UTC <fryguybob> Maybe (Either () ())
2011-05-27 16:02:41 UTC <byorgey> Either () (Either [Void] (Int -> ()))
2011-05-27 16:03:48 UTC <fryguybob> Wait, which one is FileNotFound?
2011-05-27 16:06:20 UTC <byorgey> Right (Left [undefined])
2011-05-27 16:07:17 UTC <byorgey> if the file is found, you get a continuation which takes a byte offset and then computes ()
2011-05-27 16:09:05 UTC <luite> that looks risky for large files on 32 bit systems
2011-05-27 16:09:41 UTC <fryguybob> better do (Double -> ())
2011-05-27 16:10:46 UTC <luite> f :: Double -> (),  f 1 = (), f 2 = (), f 1.5 = )(
2011-05-27 16:10:53 UTC <luite> obviously
2011-05-27 16:11:01 UTC <fryguybob> ha!
2011-05-27 16:12:06 UTC <byorgey> hehehe
2011-05-27 17:43:25 UTC <tg_> byorgey: here?
2011-05-27 17:50:23 UTC <luite> tg_: I want to rely less on the type system for security, so I'm adding some things
2011-05-27 17:51:23 UTC <tg_> luite: "security" here means "safe execution of arbitrary code", yes?
2011-05-27 17:51:32 UTC <luite> yes
2011-05-27 17:51:42 UTC <tg_> ok, the document I sent you has little to do with that
2011-05-27 17:51:56 UTC <tg_> but it does have examples on very smartly handling resource limits, time limits, execution pruning
2011-05-27 17:52:09 UTC <tg_> and handling killing of processes with cleanup
2011-05-27 17:53:58 UTC <tg_> luite: in particular, the sections on asynchronous exceptions, timeouts, and the STM versions of those
2011-05-27 17:56:48 UTC <luite> http://hpaste.org/47141/how_to_be_eval <- perhaps anyone here knows how to do this?
2011-05-27 18:13:31 UTC <luite> (I accept hacky solutions, as long as they work ;p )
2011-05-27 18:19:45 UTC <byorgey> luite: you probably need to call  runInterpreter on the call to eval before passing it to forkProcess
2011-05-27 18:19:50 UTC <byorgey> I guess
2011-05-27 18:20:02 UTC <byorgey> I don't have much experience with hint but the types work out =)
2011-05-27 18:20:15 UTC <byorgey> hi tg_
2011-05-27 18:20:15 UTC <luite> yeah I was afraid of that, because that's exactly the thing I wanted to avoid in the forked process
2011-05-27 18:20:19 UTC <byorgey> ah
2011-05-27 18:20:44 UTC <luite> runInterpreter and loadModules need to construct the complete hint environment, parsing the haskell files, loading interfaces etc
2011-05-27 18:23:17 UTC <tg_> fork seperate processes for eval and runInterpreter
2011-05-27 18:23:54 UTC <tg_> and then just only call eval on things whose runInterpreter doesn't error out
2011-05-27 18:23:58 UTC <luite> euh...
2011-05-27 18:24:08 UTC <tg_> luite: I'm guessing, mang :o
2011-05-27 18:24:41 UTC <luite> tg_: the point is that I want to run runInterpreter in one process, and then do eval, without runInterpreter in a child, the problem is getting the interpreter state into the child
2011-05-27 18:27:20 UTC <tg_> luite: this sounds like exactly what that PDF I sent you is desribing how to do, but I can't be sure of that
2011-05-27 18:27:29 UTC <tg_> he's talking about using concurrent parers and passing the results along
2011-05-27 18:27:51 UTC <luite> nah the problem really is with this specific module
2011-05-27 18:28:06 UTC <tg_> luite: hint, you mean?
2011-05-27 18:29:04 UTC <luite> yes, the InterpreterT type is opaque, you cannot see into it, extract its state or something
2011-05-27 18:34:17 UTC <tg_> byorgey: I am planning on writing documention for mpppc as exercise today - does anyone even use it?
2011-05-27 18:35:04 UTC <byorgey> I didn't even know what that was, so I went to the Hackage page to see -- and was surprised to see myself listed as an author
2011-05-27 18:35:11 UTC <tg_> byorgey: lol
2011-05-27 18:35:35 UTC <tg_> it has no documentation, and I need practice understanding other's modules and writing documentation
2011-05-27 18:35:38 UTC <tg_> so I figured I'd do both
2011-05-27 18:35:43 UTC <byorgey> tg_: I think I am listed as an author because they based it on some code I wrote, probably http://hackage.haskell.org/package/boxes
2011-05-27 18:35:51 UTC <byorgey> but I don't know anything about it really
2011-05-27 18:35:57 UTC <tg_> i figured it might be
2011-05-27 18:36:10 UTC <tg_> oh well, hopefully it actually does something
2011-05-27 18:36:12 UTC <tg_> and works, etc
2011-05-27 18:38:06 UTC <byorgey> hehe
2011-05-27 18:39:19 UTC <ClaudiusMaximus> does this look like a reasonable API for bounding boxes?  http://hpaste.org/47142/bounding_boxes
2011-05-27 18:39:41 UTC <byorgey> tg_: looks like they just uploaded a new version about a week ago, so at least it's current
2011-05-27 18:39:51 UTC <luite> ClaudiusMaximus: lol
2011-05-27 18:40:25 UTC <ClaudiusMaximus> luite: the type signatures are a bit messy..
2011-05-27 18:40:43 UTC <luite> yes, give me a few hours to read them all and I'll get back to you ;)
2011-05-27 18:42:11 UTC <byorgey> ah,  Ord (Basis v), I see
2011-05-27 18:42:30 UTC <luite> ClaudiusMaximus: what's the difference between the primed and unprimed versions?
2011-05-27 18:42:41 UTC <byorgey> ClaudiusMaximus: yes, looks nice, although I might give inside' and outside' better names
2011-05-27 18:42:47 UTC <ClaudiusMaximus> luite: a bit of a pun, inside uses <= and inside' uses <
2011-05-27 18:43:08 UTC <byorgey> oh, wait, I see
2011-05-27 18:43:21 UTC <ClaudiusMaximus> so non-strict vs strict comparison - i could call them inside and strictlyInside, etc
2011-05-27 18:43:22 UTC <byorgey> oh, I was confused, I thought one was for testing points and the other for testing boxes
2011-05-27 18:43:35 UTC <byorgey> no, if that's the difference I think the prime is OK
2011-05-27 18:44:00 UTC <byorgey> ClaudiusMaximus: but it would probably be useful to also have a function for testing whether a point is inside a BB
2011-05-27 18:44:19 UTC <ClaudiusMaximus> byorgey: good point
2011-05-27 18:44:25 UTC <byorgey> hehe
2011-05-27 18:44:37 UTC <tg_> i gotta convince people to stop using "points" :O
2011-05-27 18:44:40 UTC <tg_> one day :o
2011-05-27 18:45:24 UTC <byorgey> what's wrong with points?
2011-05-27 18:45:36 UTC <tg_> byorgey: nothing's wrong, but there is a more powerful abstraction
2011-05-27 18:45:45 UTC <tg_> byorgey: let me try and run through it with you real quickly:
2011-05-27 18:45:52 UTC <ClaudiusMaximus> so i'll add   contains, contains' :: (spam) => BoundingBox v -> v -> Bool
2011-05-27 18:46:03 UTC <byorgey> haha (spam) =>  =)
2011-05-27 18:46:17 UTC <tg_> byorgey: don't worry about right or wrong answers, just answer :o
2011-05-27 18:46:20 UTC <byorgey> ClaudiusMaximus: should be  BoundingBox v -> Point v -> Bool
2011-05-27 18:46:23 UTC <tg_> draw 1 dimensional line
2011-05-27 18:46:47 UTC <tg_> -----\
2011-05-27 18:46:49 UTC <tg_> minus the \
2011-05-27 18:46:52 UTC <byorgey> ok
2011-05-27 18:46:57 UTC <tg_> draw a 2D line:
2011-05-27 18:47:00 UTC <tg_> |
2011-05-27 18:47:01 UTC <tg_> |
2011-05-27 18:47:02 UTC <tg_> ---
2011-05-27 18:47:27 UTC <byorgey> o.... k
2011-05-27 18:47:28 UTC <tg_> a 3d line will look the same, but with another axis
2011-05-27 18:47:35 UTC <byorgey> sure
2011-05-27 18:47:45 UTC <tg_> so lines are the basis vectors for a n-d euclidian space
2011-05-27 18:48:01 UTC <tg_> so what is a 0-dimensional line?
2011-05-27 18:48:07 UTC <tg_> .
2011-05-27 18:48:11 UTC <luite> ClaudiusMaximus: but does a `inside` b mean that a is completely inside b, every point in a is in b?
2011-05-27 18:48:26 UTC <luite> or that there are points of a in b?
2011-05-27 18:48:26 UTC <tg_> a 0-dimensional line is a thing without a basis
2011-05-27 18:48:49 UTC <byorgey> tg_: got it
2011-05-27 18:49:07 UTC <tg_> ok, so now let's talk about volumes instead of lines (skipping over areas)
2011-05-27 18:49:48 UTC <tg_> a 3-cube is a normal cube
2011-05-27 18:49:52 UTC <tg_> a 2-cube is a square
2011-05-27 18:49:57 UTC <tg_> a 1-cube is a line
2011-05-27 18:50:01 UTC <tg_> a 0-cube is...?
2011-05-27 18:50:25 UTC <byorgey> a point, of course
2011-05-27 18:50:42 UTC <tg_> ok, not, let's do the same, but for spheres and balls
2011-05-27 18:50:54 UTC <tg_> the weird thing
2011-05-27 18:51:01 UTC <tg_> is that the "cube" is a 3-cube
2011-05-27 18:51:07 UTC <tg_> but a "sphere" is a 2-sphere
2011-05-27 18:51:25 UTC <tg_> going downward, a 1-sphere is a circle
2011-05-27 18:51:33 UTC <ClaudiusMaximus> luite: the first interpretation
2011-05-27 18:51:34 UTC <tg_> a 0-sphere is a line *segment*
2011-05-27 18:51:48 UTC <byorgey> tg_: what? why is it a line segment?
2011-05-27 18:51:53 UTC <byorgey> that makes no sense
2011-05-27 18:51:59 UTC <tg_> byorgey: because a 1-sphere is orientable
2011-05-27 18:52:11 UTC <luite> ClaudiusMaximus: and a `outside` b? does that mean that intersection a b == Nothing, or that b `inside` a?
2011-05-27 18:52:12 UTC <byorgey> tg_: what is your definition of sphere?
2011-05-27 18:52:20 UTC <tg_> if you have a circle, you don't automatically know if you're talking about the area inside of the inside or the outside
2011-05-27 18:52:40 UTC <byorgey> tg_: sure
2011-05-27 18:52:57 UTC <ClaudiusMaximus> a `intersection` b = Nothing ==> a `outside'` b
2011-05-27 18:53:11 UTC <tg_> byorgey: is there an analogy for the same fact (orientability) with a line?
2011-05-27 18:53:54 UTC <luite> ClaudiusMaximus: hmm, perhaps non-class function overlaps would be better than outside?
2011-05-27 18:53:57 UTC <tg_> it's kind of tricky
2011-05-27 18:54:04 UTC <tg_> there is, but it only shows up in the complex numbers
2011-05-27 18:54:52 UTC <tg_> the orientability is the freedom of choice in which direction is (i) or (-i)
2011-05-27 18:55:21 UTC <tg_> make sense?
2011-05-27 18:55:38 UTC <byorgey> tg_: no. what is the definition of 'sphere' you are using?
2011-05-27 18:55:51 UTC <tg_> byorgey: the one that you derivce from the apollonian group fractal
2011-05-27 18:55:59 UTC <tg_> s/derivce/derive/
2011-05-27 18:56:05 UTC <byorgey> haha, I should have known =P
2011-05-27 18:56:23 UTC <tg_> byorgey: it's similar in every way to the Riemannian definition
2011-05-27 18:56:24 UTC <byorgey> anyway, I don't see why all of this means that we should "stop using points"
2011-05-27 18:56:31 UTC <tg_> byorgey: because, there's a -1-sphere
2011-05-27 18:56:38 UTC <tg_> which is a point
2011-05-27 18:56:47 UTC <ClaudiusMaximus> luite: a`overlaps`b = not (a`outside'`b) ; a`overlaps'`b  is something i need to think about a bit harder (does it mean that the box has >0 size in every dimension?)
2011-05-27 18:56:48 UTC <tg_> for any-sphere
2011-05-27 18:57:06 UTC <tg_> you are *guaranteed* that you can take those two points, and invert them about their center
2011-05-27 18:57:06 UTC <byorgey> so we should talk about -1-spheres instead of points?
2011-05-27 18:57:17 UTC <tg_> no, but once you have this concept
2011-05-27 18:57:33 UTC <tg_> then the smallest geometric concept that one can rigoriously talk about is areas
2011-05-27 18:58:27 UTC <tg_> because if you mention points, you don't know if it's the point on an arc, or if it's center of a circle, or if it's an affine point
2011-05-27 18:58:43 UTC <tg_> but if you talk about only areas the whole time, then you can still discuss points, but *only* as sets
2011-05-27 18:59:15 UTC <tg_> if you did electromagnetism, this analogy is very close to that of gauge symmetry
2011-05-27 18:59:26 UTC <tg_> where only differences in energy are meaningful
2011-05-27 18:59:42 UTC <tg_> in this geometry, only differences in areas (or equivalently, differences in sets of points) are meaningful
2011-05-27 18:59:55 UTC <tg_> I didn't invent this concept, several others did, I'm just characterizing it
2011-05-27 19:00:08 UTC <byorgey> ok, you have lost me now, but it sounds interesting =)
2011-05-27 19:00:20 UTC <tg_> byorgey: another way to look at it, if you want to not talk about spheres at all
2011-05-27 19:00:48 UTC <tg_> imagine dividing up some part of your screen into squares
2011-05-27 19:00:57 UTC <luite> ClaudiusMaximus: hmm, good point...
2011-05-27 19:01:11 UTC <tg_> the smallest thing you can possibly get is a pixel
2011-05-27 19:01:41 UTC <tg_> so, I ask the question, what is the smallest thing you can get which has an area?
2011-05-27 19:01:53 UTC <tg_> in terms of the display itself (and the pixel pitch that it has), it's a single pixel
2011-05-27 19:02:04 UTC <tg_> but in terms of something which is invariant relative to the screen
2011-05-27 19:02:09 UTC <tg_> it's a box of 9 pixels:
2011-05-27 19:02:11 UTC <tg_> . . .
2011-05-27 19:02:12 UTC <tg_> . . .
2011-05-27 19:02:13 UTC <tg_> . . .
2011-05-27 19:02:35 UTC <tg_> it's a square, all of the sides have the same length, and it encloses at least 1 "unit" of area (a pixel)
2011-05-27 19:02:47 UTC <tg_> however, this:
2011-05-27 19:02:48 UTC <tg_> . .
2011-05-27 19:02:48 UTC <tg_> . .
2011-05-27 19:02:59 UTC <tg_> is not similarly invariant over different monitors, screens, or pixel pitches
2011-05-27 19:03:09 UTC <tg_> its area changes when the pixel pitch changes
2011-05-27 19:04:08 UTC <tg_> so if you imagine changing the pixel pitch, then you will get different areas with the four-point-square formulation
2011-05-27 19:04:24 UTC <tg_> but with the nine-point-square formulation, you can absorb the new pixel pitch in the definition of unit length
2011-05-27 19:04:32 UTC <tg_> does *that* make more sense?
2011-05-27 19:05:46 UTC <tg_> if not, then I will have to cede defeat for now :o
2011-05-27 19:08:02 UTC <luite> why can you change the unit length in one case, but not in the other?
2011-05-27 19:08:24 UTC <tg_> luite: because there's no single point which can act as a reference for the change
2011-05-27 19:09:04 UTC <tg_> . .
2011-05-27 19:09:06 UTC <tg_> . .*
2011-05-27 19:09:10 UTC <tg_> you can choose to fix that point
2011-05-27 19:09:14 UTC <tg_> and then change the area
2011-05-27 19:09:19 UTC <tg_> .  .
2011-05-27 19:09:21 UTC <tg_> .  .*
2011-05-27 19:09:47 UTC <tg_> but none of them are guaranteed to be cubes
2011-05-27 19:10:07 UTC <tg_> in the 9-point-case, there is a point which is equidistant from all of the others (the centeroid point)
2011-05-27 19:10:11 UTC <tg_> so you can:
2011-05-27 19:10:20 UTC <luite> err...
2011-05-27 19:10:20 UTC <tg_> .  .  .
2011-05-27 19:10:23 UTC <tg_> .  .  .
2011-05-27 19:10:25 UTC <tg_> .  .
2011-05-27 19:10:32 UTC <tg_> .   .   .
2011-05-27 19:10:35 UTC <tg_> .   .   .
2011-05-27 19:10:39 UTC <tg_> .   .   .
2011-05-27 19:11:07 UTC <tg_> all of the outer 8 points are invertable through the centroid point
2011-05-27 19:11:55 UTC <luite> how are those point equidistant, wouldn't they have to lie on a circle?
2011-05-27 19:12:18 UTC <tg_> luite: no, but there is a transform which can draw them using triangles with a single length
2011-05-27 19:12:34 UTC <tg_> l = sqrt (h^2 - (1/4)a^2)
2011-05-27 19:13:02 UTC <tg_> a = (1/2) a h
2011-05-27 19:13:10 UTC <tg_> big A
2011-05-27 19:13:11 UTC <tg_> for that one
2011-05-27 19:13:13 UTC <tg_> A = (1/2) a h
2011-05-27 19:13:37 UTC <tg_> A = (1/2) a sqrt (h^2 - (1/4)a^2)
2011-05-27 19:13:56 UTC <tg_> A = (1/2) a^2 sqrt[ b^2 / a^2 - (1/4)]
2011-05-27 19:14:00 UTC <tg_> that last step
2011-05-27 19:14:14 UTC <tg_> is the important one
2011-05-27 19:14:15 UTC <luite> I have no idea what you're even using the triangles for, sorry
2011-05-27 19:14:24 UTC <tg_> luite: because that's how you draw everything
2011-05-27 19:14:39 UTC <luite> still no idea ;p
2011-05-27 19:14:46 UTC <tg_> you can't draw a unit square without triangles
2011-05-27 19:15:02 UTC <byorgey> ClaudiusMaximus: so do you want to incorporate this bounding box API as a module in diagrams-lib?
2011-05-27 19:15:27 UTC <tg_> luite: anyway, it doesn't have anything to do with triangles
2011-05-27 19:15:32 UTC <luite> lol
2011-05-27 19:15:34 UTC <tg_> the last equation is lorentz-invariant
2011-05-27 19:15:50 UTC <tg_> it takes areas to areas
2011-05-27 19:16:45 UTC <tg_> luite: I should change: you can't draw a unit square or a unit circle using a [countable] number system
2011-05-27 19:16:58 UTC <ClaudiusMaximus> byorgey: yes, but i'm having major doubts and getting confused about Points, Vectors, etc
2011-05-27 19:17:15 UTC <byorgey> hehe
2011-05-27 19:17:17 UTC <tg_> ClaudiusMaximus: by all means ignore me :O
2011-05-27 19:17:51 UTC <byorgey> tg_: I think ClaudiusMaximus was referring to the diagrams types, not to you =)
2011-05-27 19:18:02 UTC <tg_> byorgey: yeah, but I don't want to confuse anymore more
2011-05-27 19:18:07 UTC <ClaudiusMaximus> tg_: hehe
2011-05-27 19:18:07 UTC <luite> tg_: hmm, why? the algebraic numbers, or even algebraic integers are countable
2011-05-27 19:18:08 UTC <tg_> byorgey: this is certainly confusing enough as is
2011-05-27 19:18:48 UTC <tg_> byorgey: the definition of sphere I'm using, as you asked earlier, is a quadruple cover of the Poincare half-sphere model
2011-05-27 19:19:18 UTC <byorgey> ClaudiusMaximus: a vector is a direction with a magnitude
2011-05-27 19:19:26 UTC <luite> tg_: or do you mean that any collection of points on a line is uncountable?
2011-05-27 19:19:32 UTC <luite> err
2011-05-27 19:19:46 UTC <luite> meh
2011-05-27 19:19:52 UTC <luite> forget that
2011-05-27 19:19:54 UTC <tg_> luite: the definitions of lines we typically use in euclidian (Reals) space
2011-05-27 19:19:59 UTC <tg_> are typicall uncountable by definition
2011-05-27 19:20:05 UTC <ClaudiusMaximus> byorgey: yep, and a point only makes sense in relation to an origin
2011-05-27 19:21:03 UTC <tg_> luite: I'll try to convince you with the tools we make, instead of tying to do it over IRC
2011-05-27 19:21:15 UTC <tg_> luite: but I am rather serious about it, even if I can't explain it simply with the tools at hand
2011-05-27 19:21:20 UTC <byorgey> ClaudiusMaximus: right.  and vectors are unaffected by translations, whereas points are.
2011-05-27 19:21:36 UTC <ClaudiusMaximus> so, i've been using vectors when i think i should have been using points
2011-05-27 19:22:00 UTC <luite> tg_: k
2011-05-27 19:22:16 UTC <byorgey> ClaudiusMaximus: it's quite possible, I did that for quite a while when I started developing diagrams
2011-05-27 19:22:33 UTC <byorgey> ClaudiusMaximus: and then I ran into some serious bugs that boiled down to a failure to distinguish between them =)
2011-05-27 19:23:23 UTC <tg_> luite: the amazing thing about this construction, when you follow it all the way through, is that it allows you to compute something like the area of some circles, and turn them into the area of some triangles, and then into the area of some squares - **without** using irrational (or worse) numbers
2011-05-27 19:23:53 UTC <tg_> which is to say, one can convert between one fractal geometry (the sierpinski gasket) and another (the apollonian gasket) at will
2011-05-27 19:23:57 UTC <byorgey> ClaudiusMaximus: anyway, converting from a point to a vector can be done with  \p -> p .-. origin
2011-05-27 19:24:02 UTC <tg_> which is to say, there is an invariant which exists outside of those constructions
2011-05-27 19:24:20 UTC <byorgey> and converting the other way is  \v -> origin .+^ v
2011-05-27 19:24:30 UTC <tg_> which is really very surprisg, but it seems to be true
2011-05-27 19:25:27 UTC <tg_> luite: I always find it somewhat funny how the "cube" model is sort of the "trivial" fractal, but we don't see it as such
2011-05-27 19:25:32 UTC <ClaudiusMaximus> byorgey: is origin defined somewhere?  i keep seeing references to it, like moveOriginTo (origin .^+ v) === translate (negateV v)
2011-05-27 19:25:46 UTC <tg_> luite: in the dimension-counting sense
2011-05-27 19:25:50 UTC <byorgey> ClaudiusMaximus: yes, I forget where off the top of my head
2011-05-27 19:25:57 UTC <ClaudiusMaximus> byorgey: .. but i assumed that mean forall origin
2011-05-27 19:26:18 UTC <byorgey> forall origin?
2011-05-27 19:26:31 UTC <byorgey> ClaudiusMaximus: it is defined in Graphics.Rendering.Diagrams.Points, from diagrams-core
2011-05-27 19:26:34 UTC <ClaudiusMaximus> like i said, bit confused :)
2011-05-27 19:26:48 UTC <ClaudiusMaximus> aha, cool
2011-05-27 19:27:17 UTC <byorgey> origin is just the local origin of whatever vector space you are working in at the time
2011-05-27 19:27:24 UTC <byorgey> of course it is just defined as  P (0,0)
2011-05-27 19:27:33 UTC <byorgey> err, P zeroV
2011-05-27 19:28:29 UTC <byorgey> ClaudiusMaximus: this is useful for getting a sense of what needs to be explained better when I go to write more documentation/tutorial =)
2011-05-27 19:28:44 UTC <ClaudiusMaximus> cool
2011-05-27 19:28:53 UTC <byorgey> at some point in the not-too-distant future I plan to write a user guide
2011-05-27 19:29:32 UTC <byorgey> putting good explanations in the Haddock is good but it's not helpful if you don't even know what you're looking for =)
2011-05-27 19:30:04 UTC <luite> tg_: hmm, sorry not really following you, I'm still struggling with the fork problem. I'm starting te believe that it's just impossible to do
2011-05-27 19:30:15 UTC <luite> which is annoying since it's so trivial in C
2011-05-27 19:31:46 UTC <tg_> luite: i hope not impossible
2011-05-27 19:31:59 UTC <tg_> luite: explain it to me (so I can learn it) and I'll switch to tryign to help
2011-05-27 19:32:08 UTC <tg_> what do you mean that you can't see what's inside InterperterT?
2011-05-27 19:32:13 UTC <byorgey> luite: maybe ask about it in #haskell?
2011-05-27 19:32:19 UTC <tg_> byorgey: he did, to no avail
2011-05-27 19:32:22 UTC <byorgey> oh =(
2011-05-27 19:32:24 UTC <tg_> byorgey: though it might be time to ask again
2011-05-27 19:32:55 UTC <tg_> luite: I would have thought InterpeterT and eval would ultiamtely do the same thing - run the code and produce a result
2011-05-27 19:32:58 UTC <luite> byorgey: people usually get suspiciouly quiet when something is actually tricky :p
2011-05-27 19:33:03 UTC <byorgey> haha
2011-05-27 19:33:08 UTC <tg_> luite: so perhaps you want a Parser and then an Interpeter?
2011-05-27 19:33:15 UTC <tg_> or am i totally off base?
2011-05-27 19:33:44 UTC <luite> tg_: InterpreterT is something completely different, it's a monad transformer for an interpreter state
2011-05-27 19:34:16 UTC <luite> that state contains the parsed code
2011-05-27 19:34:33 UTC <luite> byorgey: perhaps #ghc, since it's rather low-level
2011-05-27 19:34:55 UTC <byorgey> it's not really about ghc though
2011-05-27 19:35:10 UTC <luite> true, though indirectly it's about the ghc api :)
2011-05-27 19:35:23 UTC <byorgey> luite: oh, well, actually, that's true =)
2011-05-27 19:35:35 UTC <byorgey> cairo_copy_clip_rectangle_list (): Gets the current clip region as a list of rectangles in user coordinates.  -- whaaaat
2011-05-27 19:35:52 UTC <luite> the problem I have at the moment, after some minor patches to hint, is that GhcT is not a MonadPeelIO
2011-05-27 19:40:12 UTC <byorgey> hmm, can you make it on?
2011-05-27 19:40:15 UTC <byorgey> *one
2011-05-27 19:40:57 UTC <luite> not with standalone deriving instance :)
2011-05-27 19:41:22 UTC <luite> I'm still trying to figure out what exactly it does
2011-05-27 19:42:09 UTC <byorgey> looks like you're supposed to just put  peelIO = liftPeel peelIO  and implement MonadTransPeel
2011-05-27 19:42:33 UTC <byorgey> for that you would have to implement
2011-05-27 19:42:55 UTC <byorgey> peel :: (Monad m, Monad n, Monad o) => GhcT n (GhcT m a -> m (GhcT o a))
2011-05-27 19:44:56 UTC <byorgey> peel has to capture the current state of the GhcT computation and then return a function which runs the GhcT m a computation using the captured state
2011-05-27 19:45:26 UTC <byorgey> I don't quite understand what the GhcT o a  is supposed to be
2011-05-27 19:45:31 UTC <byorgey> an example would be nice =P
2011-05-27 19:45:39 UTC <tg_> looks like a mnmeonic to remember something
2011-05-27 19:45:57 UTC <tg_> soh-coh-toa
2011-05-27 19:46:31 UTC <byorgey> hehe
2011-05-27 19:46:56 UTC <byorgey> luite: GhcT is from the GHC API?
2011-05-27 19:47:24 UTC <luite> byorgey: it's some wrapper http://hackage.haskell.org/packages/archive/ghc-mtl/1.0.1.0/doc/html/src/Control-Monad-Ghc.html
2011-05-27 19:47:57 UTC <tg_> it's time for some good news from our favorite Professor: http://www.youtube.com/watch?v=1D1cap6yETA
2011-05-27 19:48:40 UTC <byorgey> luite: oh =(
2011-05-27 19:49:57 UTC <luite> but the other one is also called GhcT
2011-05-27 19:50:01 UTC <byorgey> luite: I don't think you can implement MonadTransPeel for that without access to its internals
2011-05-27 19:50:17 UTC <byorgey> because otherwise you have no idea what sort of state it is carrying around
2011-05-27 19:50:37 UTC <tg_> is MonadTransPeel supposed to "peel" something off?
2011-05-27 19:51:11 UTC <byorgey> I think the idea is that it lets you "peel off" layers of monad transformers
2011-05-27 19:51:13 UTC <luite> it's more for doing something under the peel without actually taking the whole peel off :)
2011-05-27 19:51:21 UTC <byorgey> but I am not sure in what exact sense that is true
2011-05-27 19:51:40 UTC <tg_> so like, you peel off the skin of an apple, inject some posion, and then glue it back? :o
2011-05-27 19:51:57 UTC <byorgey> exactly!
2011-05-27 19:52:08 UTC <tg_> Alan Turing would be proud!
2011-05-27 19:52:11 UTC <tg_> [too soon?]
2011-05-27 19:52:53 UTC <tg_> there's a guy whos time on this Earth was cut *far* too short
2011-05-27 19:53:04 UTC <byorgey> indeed
2011-05-27 19:53:06 UTC <luite> byorgey: that's why I thought some lower level hack might be appropriate here, something that looks more like the C fork() call, but that doesn't destroy the RTS
2011-05-27 19:53:14 UTC <tg_> he was just getting started, too
2011-05-27 19:53:15 UTC <tg_> :(
2011-05-27 19:53:40 UTC <byorgey> luite: maybe post it as a stack overflow question
2011-05-27 19:59:15 UTC <luite> that might be a good idea
2011-05-27 20:05:11 UTC <luite> I'll try to find out some more about the GhcT type first
2011-05-27 20:05:17 UTC <luite> and bug a few more irc channels ;p
2011-05-27 20:05:25 UTC <byorgey> =)
2011-05-27 20:06:04 UTC <byorgey> I'm going to go finish adding clipping
2011-05-27 20:20:43 UTC <tg_> byorgey: can you tell me how I should change the "import Prelude" line to get rid of the compiler warning
2011-05-27 20:20:57 UTC <tg_> https://github.com/technogeeky/mpppc/blob/master/src/Text/PrettyPrint/MPPPC/OneDim/Combinators/Tok.hs
2011-05-27 20:21:54 UTC <tg_> Warning: The import of prelude is redundant except perhaps to import instances from 'Prelude'
2011-05-27 20:23:03 UTC <tg_> i'll ask in #haskell with hpaste
2011-05-27 20:23:05 UTC <ClaudiusMaximus> tg_: import Prelude() ;maybe?
2011-05-27 20:23:15 UTC <tg_> ClaudiusMaximus: nope, that's an error
2011-05-27 20:25:04 UTC <ClaudiusMaximus> tg_: omit the line completely?
2011-05-27 20:25:20 UTC <tg_> ClaudiusMaximus: i'm afraid to do that because he actually uses a function replicate()
2011-05-27 20:25:30 UTC <tg_> it does get rid of the error, though
2011-05-27 20:26:31 UTC <ClaudiusMaximus> i think you can have multiple definitions of the same name in scope, but it's only an error when you try to use it unqualified
2011-05-27 20:34:22 UTC <tg_> ClaudiusMaximus: I think he's intends to do that, but I haven't a clue yet
2011-05-27 20:34:32 UTC <tg_> ClaudiusMaximus: #haskell told me to get rid it using a pragma
2011-05-27 20:35:11 UTC <ClaudiusMaximus> pasted my bounding box implementation here http://hpaste.org/paste/47142/bounding_boxes_annotation#p47145
2011-05-27 21:01:54 UTC <ClaudiusMaximus> what's the best way to layer diagrams with transparency?
2011-05-27 21:27:46 UTC <tg_> ClaudiusMaximus: I think byorgey is working on that now? that's alpha stuff, right?
2011-05-27 21:36:37 UTC <ClaudiusMaximus> i guess so
2011-05-27 21:53:17 UTC <luite> hmm, I think I almost have a MonadtransPeel instance now, but the GhcT type has some restrictions on the underlying monad that I need to get into it
2011-05-27 21:55:43 UTC <tg_> luite: fight through it, I need yoU! :o
2011-05-27 21:55:59 UTC <luite> hehe ;p
2011-05-27 21:56:10 UTC <luite> insert rocky music
2011-05-27 21:57:04 UTC <tg_> indeed
2011-05-27 21:57:22 UTC <byorgey> ClaudiusMaximus: well, you can draw diagrams with transparent colors using lcA and fcA
2011-05-27 21:57:38 UTC <tg_> (but ...)
2011-05-27 21:57:39 UTC <byorgey> something like    foo # fcA (blue `withOpacity` 0.3)
2011-05-27 21:57:44 UTC <tg_> oh, no but
2011-05-27 21:57:51 UTC <byorgey> there is a but
2011-05-27 21:58:52 UTC <byorgey> the but is that if you want to take a diagram that you have already given colors to, there's (currently) no way to say "now make this whole diagram transparent"
2011-05-27 21:59:09 UTC <byorgey> but if that's something people want I could think about how to add that
2011-05-27 21:59:56 UTC <byorgey> actually, I was just working on generalizing style combination to use arbitrary semigroup instances for attributes
2011-05-27 22:00:01 UTC <byorgey> which should make it easier
2011-05-27 22:01:03 UTC <byorgey> ClaudiusMaximus: thanks for the bounding box implementation
2011-05-27 22:01:13 UTC <tg_> byorgey: this time, I get to say: I'll take your word for it
2011-05-27 22:01:22 UTC <byorgey> tg_: haha =)
2011-05-27 22:01:37 UTC <byorgey> ClaudiusMaximus: do you want to stick it in a module in diagrams-lib and send me a darcs patch? or would you like me to do it?
2011-05-27 22:02:40 UTC <tg_> byorgey: ok, can you walk me through a troubleshooting step? I'm trying to do:
2011-05-27 22:02:41 UTC <luite> tg_: this is what I have, but it's not correct (last annotation), because of the constraints on the underlying monads http://hpaste.org/paste/47141/how_to_be_eval_annotation#p47148
2011-05-27 22:02:47 UTC <tg_> cabal install darcs
2011-05-27 22:02:50 UTC <tg_> but first, I did:
2011-05-27 22:02:58 UTC <tg_> cabal install --only-deps darcs
2011-05-27 22:03:05 UTC <tg_> which worked all the way through hashed-storage
2011-05-27 22:03:17 UTC <tg_> that fails to link with ExitError 9
2011-05-27 22:03:18 UTC <tg_> http://hackage.haskell.org/packages/archive/hashed-storage/0.5.7/hashed-storage.cabal
2011-05-27 22:03:23 UTC <tg_> that is the link to its cabal file
2011-05-27 22:03:26 UTC <byorgey> tg_: no idea, sorry
2011-05-27 22:03:34 UTC <tg_> what in there tells me where I should look for C libs and whatnot
2011-05-27 22:03:43 UTC <tg_> things outside of haskell
2011-05-27 22:04:46 UTC <tg_> kk
2011-05-27 22:09:48 UTC <ClaudiusMaximus> byorgey: i'm not too familiar with darcs, but if you want to clean it up and put it in diagrams-lib, would be handy i think
2011-05-27 22:12:21 UTC <luite> tg_: it doesn't use external C dependencies as far as I can see
2011-05-27 22:12:36 UTC <luite> tg_: but it does have a C source file
2011-05-27 22:14:31 UTC <ClaudiusMaximus> gnarg.  adjustDia in diagrams-cairo defeats my attempt to clip my diagram
2011-05-27 22:17:15 UTC <tg_> luite: I gave up and used the distro version
2011-05-27 22:17:31 UTC <tg_> luite: since it's the same version
2011-05-27 22:28:37 UTC <luite> tg_: I'm going to try to use the GHC API directly instead of going through hint
2011-05-27 22:30:42 UTC <tg_> luite: ok
2011-05-27 22:31:15 UTC <tg_> hint is "a huge subset of the GHCI api" "wrapped in a simpler API"
2011-05-27 22:31:18 UTC <tg_> hmmmmm
2011-05-27 22:31:45 UTC <luite> yes, the main problem is that the GHC API changes often
2011-05-27 22:32:29 UTC <tg_> luite: so hint "wraps" that up in an API that is less likely to change?
2011-05-27 22:33:52 UTC <luite> yes, and is easier to use, it re-throws exceptions and stuff
2011-05-27 22:33:56 UTC <luite> and probably much more :)
2011-05-27 22:35:10 UTC <tg_> at this point then
2011-05-27 22:35:16 UTC <tg_> I would go ahead and post a general question on stackexchange
2011-05-27 22:35:24 UTC <tg_> and see if there might be another angle of attack
2011-05-27 22:35:34 UTC <tg_> and then, try moving up to the ghc lib
2011-05-27 22:35:50 UTC <tg_> that way if in 10 hours or so you haven't gotten it going, maybe someone else will point you in another direction
2011-05-27 22:46:52 UTC <ClaudiusMaximus> oops, not cairo backend to blame, it's withBounds that is -- XXX this isn't quite right!  Need to think about this a bit more...
2011-05-27 22:58:50 UTC <tg_> holy crap
2011-05-27 22:58:59 UTC <tg_> compiling just locked up my vm!
2011-05-27 23:01:59 UTC <luite> did you have swap space enabled?
2011-05-27 23:02:07 UTC <tg_> yep
2011-05-27 23:02:15 UTC <tg_> i rebooted it, building
2011-05-27 23:02:17 UTC <tg_> i am getting a GHC panic
2011-05-27 23:02:34 UTC <tg_> loading package ghc-7.0.2 ... ghc: This ELF file contains no symtab
2011-05-27 23:02:46 UTC <tg_> ghc: panic! the ('impossible' happened)
2011-05-27 23:04:10 UTC <tg_> In the meantime, the workaround is to not strip it.
2011-05-27 23:04:45 UTC <luite> what did you strip, and why?
2011-05-27 23:04:49 UTC <tg_> I didn't
2011-05-27 23:04:50 UTC <tg_> it's a known bug
2011-05-27 23:04:54 UTC <tg_> http://hackage.haskell.org/trac/ghc/ticket/5004
2011-05-27 23:06:33 UTC <tg_> ok i'm tired of messing with this
2011-05-27 23:06:36 UTC <tg_> i'm gonna go workout, bbl
2011-05-27 23:29:59 UTC <ClaudiusMaximus> some layers of substitutions superimposed http://claudiusmaximus.goto10.org/g/tilings/ammann-a3-patch-alpha-enhanced.png  (cropped and colour-enhanced in gimp)
2011-05-27 23:32:14 UTC <luite> oooh
2011-05-27 23:35:46 UTC <ClaudiusMaximus> my roadmap (such as there is one..) for this messing around is to make zooming animations where larger layers fade out and smaller layers fade in
2011-05-27 23:36:18 UTC <luite> your next task is to optimize diagrams to make that possible ;)
2011-05-27 23:37:00 UTC <ClaudiusMaximus> i don't mind the waiting (that image took around 30 seconds for the svg)
2011-05-27 23:37:13 UTC <luite> whoah
2011-05-27 23:37:23 UTC <ClaudiusMaximus> but i was running in ghci uncompiled
2011-05-27 23:38:25 UTC <ClaudiusMaximus> last 7 levels of a tree 12 levels deep, with an average of 3 subtiles per tile
2011-05-28 00:09:47 UTC <byorgey> ClaudiusMaximus: woah, cool!!
2011-05-28 00:10:02 UTC <byorgey> ClaudiusMaximus: the withBounds thing is fixed in darcs
2011-05-28 00:16:19 UTC <byorgey> ClaudiusMaximus: also, clipping turns out to be slightly more difficult than I thought
2011-05-28 00:16:37 UTC <byorgey> it is still quite possible, I just have to think for a bit about the right way to refactor things to allow it cleanly
2011-05-28 00:22:15 UTC <ClaudiusMaximus> i'm currently trying to figure out how to modify the style of a diagram
2011-05-28 00:23:20 UTC <ClaudiusMaximus> http://hpaste.org/47154/modify_style is how far i've got, which is not very
2011-05-28 00:36:27 UTC <byorgey> hmmm
2011-05-28 00:37:25 UTC <byorgey> you're not really supposed to be able to directly 'modify' attributes
2011-05-28 00:37:39 UTC <ClaudiusMaximus> ok
2011-05-28 00:37:48 UTC <byorgey> but in the darcs version every attribute forms a Semigroup (i.e. Monoid without identity element)
2011-05-28 00:38:17 UTC <byorgey> so we need to come up with an appropriate semigroup for combining colors
2011-05-28 00:38:33 UTC <byorgey> oh! I've got it
2011-05-28 00:38:43 UTC <byorgey> what if opacity is a separate attribute from color
2011-05-28 00:39:03 UTC <byorgey> that forms a monoid under multiplication
2011-05-28 00:39:16 UTC <byorgey> er, semigroup
2011-05-28 00:39:28 UTC <byorgey> so you would be able to say "make this diagram 25% more transparent" or whatever
2011-05-28 00:39:36 UTC <ClaudiusMaximus> yeah that'd be cool
2011-05-28 00:40:07 UTC <byorgey> ok that's not actually that hard to implement (famous last words)
2011-05-28 00:40:49 UTC <ClaudiusMaximus> but then you might want to do funky stuff like "rotate this diagram's colours 37.4 degrees clockwise in YUV colour space" - would that be possible too?  or am i thinking about this in the wrong way...
2011-05-28 00:41:01 UTC <byorgey> haha, woah
2011-05-28 00:42:06 UTC <byorgey> I'll have to think about it more
2011-05-28 00:42:21 UTC <byorgey> I'm definitely not convinced we have exactly the right design for attributes yet
2011-05-28 00:42:46 UTC <ClaudiusMaximus> i guess there comes a point where you have to decide what the scope of the library is, and the name makes it fairly clear
2011-05-28 00:43:48 UTC <ClaudiusMaximus> at the moment i have colours etc hardcoded in my diagrams - i think i'd be better off "naming" them
2011-05-28 00:43:58 UTC <byorgey> yeah, I think if you wanted to do something like that color rotation thing, then you should just parametrize your diagram creation functions by a YUV colour space rotation in the first place
2011-05-28 00:44:09 UTC <byorgey> yeah
2011-05-28 00:44:26 UTC <byorgey> of course you can do the opacity like that too -- make the opacity a parameter to your diagrams
2011-05-28 00:44:58 UTC <byorgey> but opacity is common enough and it seems easy enough to add it as a separate attribute
2011-05-28 00:45:24 UTC <ClaudiusMaximus> then using something like CSS - say, every tile with a name "L-shaped tile" has this colour, every tile in level "n" has opacity 1 - 1/n, or something like that
2011-05-28 00:46:14 UTC <byorgey> yeah, I wanted to avoid a complicated system like that for specifying properties after the fact
2011-05-28 00:46:31 UTC <byorgey> although I certainly am sympathetic to the idea of separating styling from "content"
2011-05-28 00:47:00 UTC <ClaudiusMaximus> ok
2011-05-28 00:47:15 UTC <byorgey> but since a function to construct a diagram can just take a Style as an argument and use it, it's not that bad
2011-05-28 00:47:44 UTC <byorgey> you don't have to think of everything you might want to customize beforehand and make a separate argument for each thing
2011-05-28 00:48:12 UTC <ClaudiusMaximus> hm
2011-05-28 00:50:11 UTC <ClaudiusMaximus> do you mean something like in my case i could make a    Map (TileID, ZoomLevel) Style   and pass that to my tiling generator?
2011-05-28 00:51:04 UTC <luite> ugh I'm getting frustrated... I tried making my own forkProcess ghc primitive from the original rts sources, but it's difficult to compile because you need way too many rts internals...
2011-05-28 00:51:41 UTC <byorgey> ClaudiusMaximus: sure, or just a function  TileID -> ZoomLevel -> Style
2011-05-28 00:52:30 UTC <byorgey> ClaudiusMaximus: then your tiling generator uses it to compute a style and apply it
2011-05-28 00:53:11 UTC <byorgey> ClaudiusMaximus: and if there are some attributes that will always be the same you can just apply those directly -- and they can be overridden by the Style depending on which you apply first
2011-05-28 00:54:21 UTC <ClaudiusMaximus> maybe actually using CSS would be the best in my case - can cairo svg backend include embedded CSS?
2011-05-28 00:54:41 UTC <byorgey> I don't know
2011-05-28 00:54:59 UTC <byorgey> probably not, I don't remember seeing anything about CSS in the cairo docs
2011-05-28 00:55:05 UTC <ClaudiusMaximus> ok
2011-05-28 00:55:11 UTC <ClaudiusMaximus> ainly i just want to tweak the opacity of a few layers without having to render the whole thing again :)
2011-05-28 00:56:23 UTC <byorgey> makes sense =)
2011-05-28 00:59:27 UTC <byorgey> ClaudiusMaximus: I'm recording the darcs patch importing your bounding box code, how should I list your name and email?
2011-05-28 00:59:40 UTC <byorgey> so you are properly credited
